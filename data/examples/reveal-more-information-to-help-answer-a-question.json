{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "reveal-more-information-to-help-answer-a-question",
  "recipeName": "Reveal More Information to Help Answer a Question",
  "category": "form-pattern",
  "summary": "Provide expandable contextual information to help users understand and answer form questions without overwhelming the main question",
  "serviceContext": {
    "useCase": "Offer additional context and explanation for complex questions while maintaining a clean, focused interface that reduces cognitive load",
    "userType": "both",
    "governmentServiceFlows": [
      "When citizens need clarification about eligibility criteria or question requirements",
      "When workers need additional context to process applications accurately",
      "When questions require examples or detailed explanations to ensure correct responses",
      "When providing background information that helps users make informed decisions"
    ],
    "relatedPatterns": [
      "question-page",
      "give-background-information-before-asking-a-question",
      "ask-a-user-one-question-at-a-time",
      "include-descriptions-for-items-in-a-checkbox-list"
    ]
  },
  "components": [
    {
      "componentName": "GoabDetails",
      "role": "Information disclosure",
      "purpose": "Provide expandable section for additional context and explanations"
    },
    {
      "componentName": "GoabFormItem",
      "role": "Form field container",
      "purpose": "Wrap question with proper labeling and helper text"
    },
    {
      "componentName": "GoabRadioGroup",
      "role": "Option selection",
      "purpose": "Present question response options with single selection capability"
    },
    {
      "componentName": "GoabRadioItem",
      "role": "Individual option",
      "purpose": "Display individual response choice within radio group"
    },
    {
      "componentName": "GoabButton",
      "role": "Form progression",
      "purpose": "Allow users to continue after answering the question"
    }
  ],
  "codeReference": {
    "exampleFile": "reveal-more-information-to-help-answer-a-question.tsx",
    "linesOfCode": 74,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "medium",
    "keyPatterns": [
      "Progressive disclosure using expandable details component",
      "Primary question with basic helper text for immediate context",
      "Secondary information hidden behind expandable interface",
      "Clear separation between question and additional context",
      "Back navigation with proper styling and accessibility"
    ],
    "designPatterns": [
      "Progressive disclosure",
      "Contextual help",
      "One question per page",
      "Minimal cognitive load design",
      "Accessible information hierarchy"
    ],
    "accessibility": [
      "Helper text provides immediate context for screen readers",
      "Details component properly announces expansion state",
      "Logical tab order from question to additional information",
      "Clear heading structure for information hierarchy",
      "Back link with proper keyboard navigation"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabButton, GoabDetails, GoabFormItem, GoabRadioGroup, GoabRadioItem } from \"@abgov/react-components\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function RevealMoreInformationToHelpAnswerAQuestion() {\n  const [selectedAnswer, setSelectedAnswer] = useState<string>('');\n  const [validationError, setValidationError] = useState<string>('');\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [additionalInfoExpanded, setAdditionalInfoExpanded] = useState<boolean>(false);\n  const navigate = useNavigate();\n\n  const questionData = {\n    id: 'child-care-payment',\n    label: 'Do you pay for child care?',\n    helpText: 'Examples of child care are daycares, day homes and baby-sitters.',\n    options: [\n      { value: 'yes', label: 'Yes' },\n      { value: 'no', label: 'No' }\n    ],\n    additionalInfo: {\n      heading: 'Why are we asking this question?',\n      content: 'We ask this question to determine if you are eligible for child care benefits. Child care expenses can be used to calculate your benefit amount and may affect your eligibility for certain programs.'\n    },\n    detailedExplanation: {\n      heading: 'What counts as child care?',\n      items: [\n        'Licensed daycare centers',\n        'Registered day homes',\n        'Baby-sitters or nannies',\n        'Before and after school programs',\n        'Summer day camps',\n        'Preschool programs'\n      ],\n      excludedItems: [\n        'Overnight camps',\n        'Tutoring or lessons',\n        'Care provided by immediate family members living in your home'\n      ]\n    }\n  };\n\n  const handleAnswerChange = (value: string) => {\n    setSelectedAnswer(value);\n    \n    // Clear validation error when user makes selection\n    if (validationError) {\n      setValidationError('');\n    }\n    \n    // Track analytics for question response\n    console.log('Question answered:', { questionId: questionData.id, answer: value });\n  };\n\n  const validateAnswer = (): boolean => {\n    if (!selectedAnswer) {\n      setValidationError('Please select an answer to continue');\n      return false;\n    }\n    \n    setValidationError('');\n    return true;\n  };\n\n  const handleSubmit = async () => {\n    if (!validateAnswer()) {\n      return;\n    }\n    \n    setIsSubmitting(true);\n    \n    try {\n      // Simulate API call to save answer\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Save answer and proceed\n      console.log('Answer saved:', { questionId: questionData.id, answer: selectedAnswer });\n      \n      // Navigate to next question or page\n      if (selectedAnswer === 'yes') {\n        navigate('/child-care-details');\n      } else {\n        navigate('/next-question');\n      }\n      \n    } catch (error) {\n      console.error('Error saving answer:', error);\n      setValidationError('There was an error saving your answer. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleBack = () => {\n    navigate(-1);\n  };\n\n  const handleAdditionalInfoToggle = (expanded: boolean) => {\n    setAdditionalInfoExpanded(expanded);\n    \n    // Track analytics for additional info usage\n    console.log('Additional info toggled:', { expanded, questionId: questionData.id });\n  };\n\n  const isAnswerSelected = (): boolean => {\n    return selectedAnswer !== '';\n  };\n\n  const getSubmitButtonText = (): string => {\n    if (isSubmitting) return 'Saving...';\n    return 'Save and continue';\n  };\n\n  return (\n    <div className=\"question-page-container\">\n      <nav className=\"question-navigation\">\n        <button \n          type=\"button\"\n          className=\"back-link\"\n          onClick={handleBack}\n          aria-label=\"Go back to previous question\">\n          Back\n        </button>\n      </nav>\n\n      <main className=\"question-content\">\n        <GoabFormItem\n          label={questionData.label}\n          labelSize=\"large\"\n          helpText={questionData.helpText}\n          error={validationError}\n          required\n          mt=\"2xl\">\n          <GoabRadioGroup\n            name={questionData.id}\n            ariaLabel={questionData.label}\n            value={selectedAnswer}\n            onChange={(name, value) => handleAnswerChange(value)}\n            error={!!validationError}>\n            {questionData.options.map((option) => (\n              <GoabRadioItem\n                key={option.value}\n                value={option.value}\n                label={option.label}\n              />\n            ))}\n          </GoabRadioGroup>\n        </GoabFormItem>\n\n        <div className=\"additional-information-section\">\n          <GoabDetails \n            heading={questionData.additionalInfo.heading}\n            mt=\"xl\"\n            onToggle={handleAdditionalInfoToggle}>\n            <div className=\"additional-info-content\">\n              <p>{questionData.additionalInfo.content}</p>\n              \n              <div className=\"detailed-explanation\">\n                <h4>{questionData.detailedExplanation.heading}</h4>\n                \n                <div className=\"info-categories\">\n                  <div className=\"included-items\">\n                    <h5>What's included:</h5>\n                    <ul>\n                      {questionData.detailedExplanation.items.map((item, index) => (\n                        <li key={index}>{item}</li>\n                      ))}\n                    </ul>\n                  </div>\n                  \n                  <div className=\"excluded-items\">\n                    <h5>What's not included:</h5>\n                    <ul>\n                      {questionData.detailedExplanation.excludedItems.map((item, index) => (\n                        <li key={index}>{item}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </GoabDetails>\n        </div>\n\n        <div className=\"question-actions\">\n          <GoabButton\n            type=\"primary\"\n            onClick={handleSubmit}\n            disabled={!isAnswerSelected() || isSubmitting}\n            mt=\"2xl\"\n            aria-describedby=\"submit-help\">\n            {getSubmitButtonText()}\n          </GoabButton>\n          \n          <p id=\"submit-help\" className=\"submit-help-text\">\n            {!isAnswerSelected() && 'Please select an answer to continue'}\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}",
      "key": "const [selectedAnswer, setSelectedAnswer] = useState<string>('');\nconst [validationError, setValidationError] = useState<string>('');\nconst [additionalInfoExpanded, setAdditionalInfoExpanded] = useState<boolean>(false);\n\nconst questionData = {\n  id: 'child-care-payment',\n  label: 'Do you pay for child care?',\n  helpText: 'Examples of child care are daycares, day homes and baby-sitters.',\n  options: [\n    { value: 'yes', label: 'Yes' },\n    { value: 'no', label: 'No' }\n  ],\n  additionalInfo: {\n    heading: 'Why are we asking this question?',\n    content: 'We ask this question to determine if you are eligible for child care benefits.'\n  }\n};\n\nconst handleAnswerChange = (value: string) => {\n  setSelectedAnswer(value);\n  \n  if (validationError) {\n    setValidationError('');\n  }\n  \n  console.log('Question answered:', { questionId: questionData.id, answer: value });\n};\n\nconst validateAnswer = (): boolean => {\n  if (!selectedAnswer) {\n    setValidationError('Please select an answer to continue');\n    return false;\n  }\n  \n  setValidationError('');\n  return true;\n};\n\nconst handleSubmit = () => {\n  if (!validateAnswer()) {\n    return;\n  }\n  \n  console.log('Answer saved:', { questionId: questionData.id, answer: selectedAnswer });\n  // Navigate to next question based on answer\n};\n\nconst handleAdditionalInfoToggle = (expanded: boolean) => {\n  setAdditionalInfoExpanded(expanded);\n  console.log('Additional info toggled:', { expanded, questionId: questionData.id });\n};\n\nconst isAnswerSelected = (): boolean => {\n  return selectedAnswer !== '';\n};\n\n<div className=\"question-page-container\">\n  <nav className=\"question-navigation\">\n    <button \n      type=\"button\"\n      className=\"back-link\"\n      onClick={() => navigate(-1)}\n      aria-label=\"Go back to previous question\">\n      Back\n    </button>\n  </nav>\n\n  <main className=\"question-content\">\n    <GoabFormItem\n      label={questionData.label}\n      labelSize=\"large\"\n      helpText={questionData.helpText}\n      error={validationError}\n      required\n      mt=\"2xl\">\n      <GoabRadioGroup\n        name={questionData.id}\n        ariaLabel={questionData.label}\n        value={selectedAnswer}\n        onChange={(name, value) => handleAnswerChange(value)}\n        error={!!validationError}>\n        {questionData.options.map((option) => (\n          <GoabRadioItem\n            key={option.value}\n            value={option.value}\n            label={option.label}\n          />\n        ))}\n      </GoabRadioGroup>\n    </GoabFormItem>\n\n    <div className=\"additional-information-section\">\n      <GoabDetails \n        heading={questionData.additionalInfo.heading}\n        mt=\"xl\"\n        onToggle={handleAdditionalInfoToggle}>\n        <p>{questionData.additionalInfo.content}</p>\n      </GoabDetails>\n    </div>\n\n    <div className=\"question-actions\">\n      <GoabButton\n        type=\"primary\"\n        onClick={handleSubmit}\n        disabled={!isAnswerSelected()}\n        mt=\"2xl\">\n        Save and continue\n      </GoabButton>\n    </div>\n  </main>\n</div>\n\n/* CSS */\n.question-page-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.back-link {\n  background: none;\n  border: none;\n  color: var(--goa-color-interactive);\n  text-decoration: underline;\n  cursor: pointer;\n  font-size: var(--goa-font-size-m);\n  margin-top: var(--goa-space-m);\n  padding: 0;\n}\n\n.back-link::before {\n  content: \"\";\n  display: inline-block;\n  width: 42px;\n  height: 24px;\n  vertical-align: middle;\n  background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 2 22 22\" fill=\"none\" stroke=\"%230070C4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>') center center no-repeat;\n}\n\n.back-link:hover {\n  color: var(--goa-color-interactive-hover);\n}\n\n.back-link:hover::before {\n  background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 2 22 22\" fill=\"none\" stroke=\"%23004f84\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>') center center no-repeat;\n}\n\n.question-content {\n  margin-top: var(--goa-space-xl);\n}\n\n.additional-information-section {\n  margin-top: var(--goa-space-xl);\n}\n\n.additional-info-content {\n  line-height: 1.6;\n}\n\n.detailed-explanation {\n  margin-top: var(--goa-space-l);\n}\n\n.info-categories {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: var(--goa-space-l);\n  margin-top: var(--goa-space-m);\n}\n\n@media (max-width: 768px) {\n  .info-categories {\n    grid-template-columns: 1fr;\n  }\n}\n\n.included-items,\n.excluded-items {\n  background-color: var(--goa-color-background-light);\n  padding: var(--goa-space-m);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.included-items h5,\n.excluded-items h5 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-text);\n}\n\n.submit-help-text {\n  margin-top: var(--goa-space-s);\n  font-size: var(--goa-font-size-s);\n  color: var(--goa-color-text-secondary);\n}"
    },
    "angular": {
      "complete": "export class RevealMoreInformationToHelpAnswerAQuestionComponent {\n  selectedAnswer: string = '';\n  validationError: string = '';\n  additionalInfoExpanded: boolean = false;\n  isSubmitting: boolean = false;\n\n  questionData = {\n    id: 'child-care-payment',\n    label: 'Do you pay for child care?',\n    helpText: 'Examples of child care are daycares, day homes and baby-sitters.',\n    options: [\n      { value: 'yes', label: 'Yes' },\n      { value: 'no', label: 'No' }\n    ],\n    additionalInfo: {\n      heading: 'Why are we asking this question?',\n      content: 'We ask this question to determine if you are eligible for child care benefits.'\n    }\n  };\n\n  handleAnswerChange(value: string) {\n    this.selectedAnswer = value;\n    \n    if (this.validationError) {\n      this.validationError = '';\n    }\n    \n    console.log('Question answered:', { questionId: this.questionData.id, answer: value });\n  }\n\n  validateAnswer(): boolean {\n    if (!this.selectedAnswer) {\n      this.validationError = 'Please select an answer to continue';\n      return false;\n    }\n    \n    this.validationError = '';\n    return true;\n  }\n\n  async handleSubmit() {\n    if (!this.validateAnswer()) {\n      return;\n    }\n    \n    this.isSubmitting = true;\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      console.log('Answer saved:', { questionId: this.questionData.id, answer: this.selectedAnswer });\n      \n      // Navigate based on answer\n      // this.router.navigate(['/next-question']);\n      \n    } catch (error) {\n      console.error('Error saving answer:', error);\n      this.validationError = 'There was an error saving your answer. Please try again.';\n    } finally {\n      this.isSubmitting = false;\n    }\n  }\n\n  handleBack() {\n    // this.location.back();\n    console.log('Navigate back');\n  }\n\n  handleAdditionalInfoToggle(expanded: boolean) {\n    this.additionalInfoExpanded = expanded;\n    console.log('Additional info toggled:', { expanded, questionId: this.questionData.id });\n  }\n\n  isAnswerSelected(): boolean {\n    return this.selectedAnswer !== '';\n  }\n\n  getSubmitButtonText(): string {\n    if (this.isSubmitting) return 'Saving...';\n    return 'Save and continue';\n  }\n}",
      "key": "selectedAnswer: string = '';\nvalidationError: string = '';\nadditionalInfoExpanded: boolean = false;\nisSubmitting: boolean = false;\n\nquestionData = {\n  id: 'child-care-payment',\n  label: 'Do you pay for child care?',\n  helpText: 'Examples of child care are daycares, day homes and baby-sitters.',\n  options: [\n    { value: 'yes', label: 'Yes' },\n    { value: 'no', label: 'No' }\n  ],\n  additionalInfo: {\n    heading: 'Why are we asking this question?',\n    content: 'We ask this question to determine if you are eligible for child care benefits.'\n  }\n};\n\nhandleAnswerChange(value: string) {\n  this.selectedAnswer = value;\n  \n  if (this.validationError) {\n    this.validationError = '';\n  }\n  \n  console.log('Question answered:', { questionId: this.questionData.id, answer: value });\n}\n\nvalidateAnswer(): boolean {\n  if (!this.selectedAnswer) {\n    this.validationError = 'Please select an answer to continue';\n    return false;\n  }\n  \n  this.validationError = '';\n  return true;\n}\n\nhandleSubmit() {\n  if (!this.validateAnswer()) {\n    return;\n  }\n  \n  console.log('Answer saved:', { questionId: this.questionData.id, answer: this.selectedAnswer });\n}\n\nhandleBack() {\n  console.log('Navigate back');\n}\n\nhandleAdditionalInfoToggle(expanded: boolean) {\n  this.additionalInfoExpanded = expanded;\n  console.log('Additional info toggled:', { expanded, questionId: this.questionData.id });\n}\n\nisAnswerSelected(): boolean {\n  return this.selectedAnswer !== '';\n}\n\ngetSubmitButtonText(): string {\n  if (this.isSubmitting) return 'Saving...';\n  return 'Save and continue';\n}\n\n<!-- Template -->\n<div class=\"question-page-container\">\n  <nav class=\"question-navigation\">\n    <button \n      type=\"button\"\n      class=\"back-link\"\n      (click)=\"handleBack()\"\n      aria-label=\"Go back to previous question\">\n      Back\n    </button>\n  </nav>\n\n  <main class=\"question-content\">\n    <goab-form-item\n      [label]=\"questionData.label\"\n      labelSize=\"large\"\n      [helpText]=\"questionData.helpText\"\n      [error]=\"validationError\"\n      required\n      mt=\"2xl\">\n      <goab-radio-group\n        [name]=\"questionData.id\"\n        [ariaLabel]=\"questionData.label\"\n        [value]=\"selectedAnswer\"\n        (onChange)=\"handleAnswerChange($event.value)\"\n        [error]=\"!!validationError\">\n        <goab-radio-item\n          *ngFor=\"let option of questionData.options\"\n          [value]=\"option.value\"\n          [label]=\"option.label\">\n        </goab-radio-item>\n      </goab-radio-group>\n    </goab-form-item>\n\n    <div class=\"additional-information-section\">\n      <goab-details \n        [heading]=\"questionData.additionalInfo.heading\"\n        mt=\"xl\"\n        (onToggle)=\"handleAdditionalInfoToggle($event)\">\n        <p>{{ questionData.additionalInfo.content }}</p>\n      </goab-details>\n    </div>\n\n    <div class=\"question-actions\">\n      <goab-button\n        type=\"primary\"\n        (onClick)=\"handleSubmit()\"\n        [disabled]=\"!isAnswerSelected() || isSubmitting\"\n        mt=\"2xl\">\n        {{ getSubmitButtonText() }}\n      </goab-button>\n      \n      <p class=\"submit-help-text\" *ngIf=\"!isAnswerSelected()\">\n        Please select an answer to continue\n      </p>\n    </div>\n  </main>\n</div>"
    }
  },
  "tags": [
    "progressive-disclosure",
    "contextual-help",
    "question-page",
    "form-pattern",
    "additional-information",
    "expandable-content",
    "user-guidance",
    "help-text",
    "form-assistance",
    "information-architecture"
  ]
}