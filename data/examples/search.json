{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "search",
  "recipeName": "Search",
  "category": "form-control",
  "summary": "Provide users with search functionality using input field with search icon and submit button for finding content or data",
  "serviceContext": {
    "useCase": "Enable users to search for information, services, records, or content within government applications and websites",
    "userType": "both",
    "governmentServiceFlows": [
      "When citizens need to find specific government services or information",
      "When workers search for case files, applications, or administrative records",
      "When users need to locate documents, forms, or resources within a large database",
      "When providing quick access to frequently searched content or services"
    ],
    "relatedPatterns": [
      "filter-data-in-a-table",
      "show-number-of-results-per-page",
      "add-a-filter-chip",
      "type-to-create-a-new-filter"
    ]
  },
  "components": [
    {
      "componentName": "GoabInput",
      "role": "Search input field",
      "purpose": "Capture user search queries with built-in search styling and icon"
    },
    {
      "componentName": "GoabButton",
      "role": "Search action trigger",
      "purpose": "Execute the search operation when user completes their query"
    },
    {
      "componentName": "GoabFormItem",
      "role": "Form field container",
      "purpose": "Wrap search controls with proper form structure and spacing"
    },
    {
      "componentName": "GoabBlock",
      "role": "Layout container",
      "purpose": "Arrange search input and button in horizontal layout with appropriate spacing"
    }
  ],
  "codeReference": {
    "exampleFile": "search.tsx",
    "linesOfCode": 94,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "medium",
    "keyPatterns": [
      "Search input with leading search icon for visual clarity",
      "Horizontal layout combining input field and action button",
      "State management for search query value",
      "Event handling for search execution and input changes",
      "Form structure supporting search functionality"
    ],
    "designPatterns": [
      "Search interface design",
      "Action-oriented input controls",
      "Visual search indicators",
      "Responsive search layout",
      "Search query management"
    ],
    "accessibility": [
      "Search input type provides appropriate browser behavior",
      "Clear visual association between input and search button",
      "Proper form labeling and structure",
      "Keyboard accessible search functionality",
      "Search icon provides visual context for purpose"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabBlock, GoabButton, GoabFormItem, GoabInput, GoabCallout } from \"@abgov/react-components\";\nimport { GoabInputOnChangeDetail } from \"@abgov/ui-components-common\";\nimport { useState, useRef, useEffect } from \"react\";\n\nexport default function Search() {\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n  const [isSearching, setIsSearching] = useState<boolean>(false);\n  const [hasSearched, setHasSearched] = useState<boolean>(false);\n  const [searchError, setSearchError] = useState<string>('');\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  const searchHistory = [\n    'government services',\n    'permit application',\n    'tax information',\n    'healthcare services'\n  ];\n\n  const mockSearchResults = [\n    {\n      id: 1,\n      title: 'Apply for a Business Permit',\n      description: 'Start your business in Alberta with the required permits and licenses.',\n      url: '/services/business-permit',\n      category: 'Business Services'\n    },\n    {\n      id: 2,\n      title: 'Healthcare Services Directory',\n      description: 'Find healthcare providers and services in your area.',\n      url: '/services/healthcare',\n      category: 'Health Services'\n    },\n    {\n      id: 3,\n      title: 'Property Tax Information',\n      description: 'Learn about property taxes, assessments, and payment options.',\n      url: '/services/property-tax',\n      category: 'Tax Services'\n    }\n  ];\n\n  const handleSearchInputChange = (event: GoabInputOnChangeDetail) => {\n    setSearchQuery(event.value);\n    \n    // Clear previous errors when user starts typing\n    if (searchError) {\n      setSearchError('');\n    }\n    \n    // Optional: Implement search suggestions or auto-complete here\n    console.log('Search query changed:', event.value);\n  };\n\n  const performSearch = async (query: string) => {\n    if (!query.trim()) {\n      setSearchError('Please enter a search term');\n      return;\n    }\n\n    setIsSearching(true);\n    setSearchError('');\n    setHasSearched(true);\n\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Filter mock results based on query\n      const filteredResults = mockSearchResults.filter(result =>\n        result.title.toLowerCase().includes(query.toLowerCase()) ||\n        result.description.toLowerCase().includes(query.toLowerCase()) ||\n        result.category.toLowerCase().includes(query.toLowerCase())\n      );\n      \n      setSearchResults(filteredResults);\n      \n      // Track search analytics\n      trackSearchAnalytics(query, filteredResults.length);\n      \n      console.log('Search completed:', { query, resultsCount: filteredResults.length });\n      \n    } catch (error) {\n      console.error('Search error:', error);\n      setSearchError('An error occurred while searching. Please try again.');\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const handleSearchSubmit = () => {\n    performSearch(searchQuery);\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      performSearch(searchQuery);\n    }\n  };\n\n  const handleSearchHistoryClick = (historyItem: string) => {\n    setSearchQuery(historyItem);\n    performSearch(historyItem);\n  };\n\n  const clearSearch = () => {\n    setSearchQuery('');\n    setSearchResults([]);\n    setHasSearched(false);\n    setSearchError('');\n    \n    // Focus back to search input\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n  };\n\n  const trackSearchAnalytics = (query: string, resultsCount: number) => {\n    console.log('Search analytics:', {\n      query,\n      resultsCount,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent\n    });\n  };\n\n  const getSearchButtonText = (): string => {\n    if (isSearching) return 'Searching...';\n    return 'Search';\n  };\n\n  const getResultsText = (): string => {\n    const count = searchResults.length;\n    if (count === 0) return 'No results found';\n    if (count === 1) return '1 result found';\n    return `${count} results found`;\n  };\n\n  useEffect(() => {\n    // Focus search input on component mount\n    if (searchInputRef.current) {\n      searchInputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <div className=\"search-container\">\n      <div className=\"search-form\">\n        <GoabFormItem label=\"Search\" helperText=\"Enter keywords to find services, information, or resources\">\n          <GoabBlock gap=\"xs\" direction=\"row\">\n            <GoabInput\n              ref={searchInputRef}\n              type=\"search\"\n              name=\"search\"\n              value={searchQuery}\n              onChange={handleSearchInputChange}\n              onKeyPress={handleKeyPress}\n              leadingIcon=\"search\"\n              placeholder=\"Search for services or information...\"\n              error={!!searchError}\n              aria-label=\"Search for government services and information\"\n              width=\"100%\"\n            />\n            <GoabButton\n              type=\"primary\"\n              onClick={handleSearchSubmit}\n              disabled={isSearching}\n              aria-label=\"Execute search\">\n              {getSearchButtonText()}\n            </GoabButton>\n          </GoabBlock>\n        </GoabFormItem>\n\n        {searchError && (\n          <div className=\"search-error\" role=\"alert\">\n            {searchError}\n          </div>\n        )}\n      </div>\n\n      {!hasSearched && searchHistory.length > 0 && (\n        <div className=\"search-suggestions\">\n          <h3>Popular searches</h3>\n          <div className=\"suggestion-buttons\">\n            {searchHistory.map((item, index) => (\n              <button\n                key={index}\n                type=\"button\"\n                className=\"suggestion-button\"\n                onClick={() => handleSearchHistoryClick(item)}\n                aria-label={`Search for ${item}`}>\n                {item}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {hasSearched && (\n        <div className=\"search-results\">\n          <div className=\"results-header\">\n            <h2>{getResultsText()}</h2>\n            {searchQuery && (\n              <p className=\"search-query\">for \"{searchQuery}\"</p>\n            )}\n            <button\n              type=\"button\"\n              className=\"clear-search\"\n              onClick={clearSearch}\n              aria-label=\"Clear search and start new search\">\n              Clear search\n            </button>\n          </div>\n\n          {searchResults.length === 0 && !isSearching && (\n            <GoabCallout type=\"information\" heading=\"No results found\">\n              <p>Try different keywords or check your spelling.</p>\n              <p>You can also browse our services by category or contact us for assistance.</p>\n            </GoabCallout>\n          )}\n\n          {searchResults.length > 0 && (\n            <div className=\"results-list\">\n              {searchResults.map((result) => (\n                <div key={result.id} className=\"result-item\">\n                  <h3 className=\"result-title\">\n                    <a href={result.url}>{result.title}</a>\n                  </h3>\n                  <p className=\"result-description\">{result.description}</p>\n                  <span className=\"result-category\">{result.category}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {isSearching && (\n        <div className=\"search-loading\" aria-live=\"polite\">\n          <p>Searching for results...</p>\n        </div>\n      )}\n    </div>\n  );\n}",
      "key": "const [searchQuery, setSearchQuery] = useState<string>('');\nconst [searchResults, setSearchResults] = useState<any[]>([]);\nconst [isSearching, setIsSearching] = useState<boolean>(false);\nconst [hasSearched, setHasSearched] = useState<boolean>(false);\nconst [searchError, setSearchError] = useState<string>('');\n\nconst handleSearchInputChange = (event: GoabInputOnChangeDetail) => {\n  setSearchQuery(event.value);\n  \n  if (searchError) {\n    setSearchError('');\n  }\n  \n  console.log('Search query changed:', event.value);\n};\n\nconst performSearch = async (query: string) => {\n  if (!query.trim()) {\n    setSearchError('Please enter a search term');\n    return;\n  }\n\n  setIsSearching(true);\n  setSearchError('');\n  setHasSearched(true);\n\n  try {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Filter results based on query\n    const filteredResults = mockSearchResults.filter(result =>\n      result.title.toLowerCase().includes(query.toLowerCase()) ||\n      result.description.toLowerCase().includes(query.toLowerCase())\n    );\n    \n    setSearchResults(filteredResults);\n    \n    // Track search analytics\n    trackSearchAnalytics(query, filteredResults.length);\n    \n  } catch (error) {\n    console.error('Search error:', error);\n    setSearchError('An error occurred while searching. Please try again.');\n  } finally {\n    setIsSearching(false);\n  }\n};\n\nconst handleSearchSubmit = () => {\n  performSearch(searchQuery);\n};\n\nconst handleKeyPress = (event: React.KeyboardEvent) => {\n  if (event.key === 'Enter') {\n    event.preventDefault();\n    performSearch(searchQuery);\n  }\n};\n\nconst clearSearch = () => {\n  setSearchQuery('');\n  setSearchResults([]);\n  setHasSearched(false);\n  setSearchError('');\n};\n\nconst trackSearchAnalytics = (query: string, resultsCount: number) => {\n  console.log('Search analytics:', {\n    query,\n    resultsCount,\n    timestamp: new Date().toISOString()\n  });\n};\n\nconst getSearchButtonText = (): string => {\n  if (isSearching) return 'Searching...';\n  return 'Search';\n};\n\nconst getResultsText = (): string => {\n  const count = searchResults.length;\n  if (count === 0) return 'No results found';\n  if (count === 1) return '1 result found';\n  return `${count} results found`;\n};\n\n<div className=\"search-container\">\n  <div className=\"search-form\">\n    <GoabFormItem label=\"Search\" helperText=\"Enter keywords to find services, information, or resources\">\n      <GoabBlock gap=\"xs\" direction=\"row\">\n        <GoabInput\n          type=\"search\"\n          name=\"search\"\n          value={searchQuery}\n          onChange={handleSearchInputChange}\n          onKeyPress={handleKeyPress}\n          leadingIcon=\"search\"\n          placeholder=\"Search for services or information...\"\n          error={!!searchError}\n          aria-label=\"Search for government services and information\"\n          width=\"100%\"\n        />\n        <GoabButton\n          type=\"primary\"\n          onClick={handleSearchSubmit}\n          disabled={isSearching}\n          aria-label=\"Execute search\">\n          {getSearchButtonText()}\n        </GoabButton>\n      </GoabBlock>\n    </GoabFormItem>\n\n    {searchError && (\n      <div className=\"search-error\" role=\"alert\">\n        {searchError}\n      </div>\n    )}\n  </div>\n\n  {hasSearched && (\n    <div className=\"search-results\">\n      <div className=\"results-header\">\n        <h2>{getResultsText()}</h2>\n        {searchQuery && (\n          <p className=\"search-query\">for \"{searchQuery}\"</p>\n        )}\n        <button\n          type=\"button\"\n          className=\"clear-search\"\n          onClick={clearSearch}\n          aria-label=\"Clear search and start new search\">\n          Clear search\n        </button>\n      </div>\n\n      {searchResults.length > 0 && (\n        <div className=\"results-list\">\n          {searchResults.map((result) => (\n            <div key={result.id} className=\"result-item\">\n              <h3 className=\"result-title\">\n                <a href={result.url}>{result.title}</a>\n              </h3>\n              <p className=\"result-description\">{result.description}</p>\n              <span className=\"result-category\">{result.category}</span>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  )}\n\n  {isSearching && (\n    <div className=\"search-loading\" aria-live=\"polite\">\n      <p>Searching for results...</p>\n    </div>\n  )}\n</div>\n\n/* CSS */\n.search-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.search-form {\n  margin-bottom: var(--goa-space-xl);\n}\n\n.search-error {\n  background-color: var(--goa-color-emergency-light);\n  border-left: 4px solid var(--goa-color-emergency);\n  padding: var(--goa-space-s);\n  margin-top: var(--goa-space-m);\n  color: var(--goa-color-emergency-dark);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.search-suggestions {\n  margin-bottom: var(--goa-space-xl);\n}\n\n.search-suggestions h3 {\n  margin-bottom: var(--goa-space-m);\n  color: var(--goa-color-text);\n}\n\n.suggestion-buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--goa-space-s);\n}\n\n.suggestion-button {\n  background: var(--goa-color-background-light);\n  border: 1px solid var(--goa-color-border);\n  color: var(--goa-color-interactive);\n  padding: var(--goa-space-xs) var(--goa-space-s);\n  border-radius: var(--goa-border-radius-s);\n  cursor: pointer;\n  font-size: var(--goa-font-size-s);\n}\n\n.suggestion-button:hover {\n  background-color: var(--goa-color-interactive-light);\n  border-color: var(--goa-color-interactive);\n}\n\n.results-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: var(--goa-space-l);\n  padding-bottom: var(--goa-space-m);\n  border-bottom: 1px solid var(--goa-color-border);\n}\n\n.results-header h2 {\n  margin: 0;\n  color: var(--goa-color-text);\n}\n\n.search-query {\n  margin: 0;\n  color: var(--goa-color-text-secondary);\n  font-style: italic;\n}\n\n.clear-search {\n  background: none;\n  border: none;\n  color: var(--goa-color-interactive);\n  text-decoration: underline;\n  cursor: pointer;\n  font-size: var(--goa-font-size-s);\n}\n\n.clear-search:hover {\n  color: var(--goa-color-interactive-hover);\n}\n\n.results-list {\n  space: var(--goa-space-l);\n}\n\n.result-item {\n  padding: var(--goa-space-m);\n  border: 1px solid var(--goa-color-border);\n  border-radius: var(--goa-border-radius-s);\n  margin-bottom: var(--goa-space-m);\n}\n\n.result-title {\n  margin: 0 0 var(--goa-space-s) 0;\n}\n\n.result-title a {\n  color: var(--goa-color-interactive);\n  text-decoration: underline;\n  font-size: var(--goa-font-size-l);\n}\n\n.result-title a:hover {\n  color: var(--goa-color-interactive-hover);\n}\n\n.result-description {\n  margin: var(--goa-space-s) 0;\n  color: var(--goa-color-text);\n  line-height: 1.5;\n}\n\n.result-category {\n  display: inline-block;\n  background-color: var(--goa-color-background-light);\n  color: var(--goa-color-text-secondary);\n  padding: var(--goa-space-2xs) var(--goa-space-xs);\n  border-radius: var(--goa-border-radius-s);\n  font-size: var(--goa-font-size-s);\n}\n\n.search-loading {\n  text-align: center;\n  padding: var(--goa-space-xl);\n  color: var(--goa-color-text-secondary);\n}"
    },
    "angular": {
      "complete": "export class SearchComponent {\n  searchQuery: string = '';\n  searchResults: any[] = [];\n  isSearching: boolean = false;\n  hasSearched: boolean = false;\n  searchError: string = '';\n\n  mockSearchResults = [\n    {\n      id: 1,\n      title: 'Apply for a Business Permit',\n      description: 'Start your business in Alberta with the required permits and licenses.',\n      url: '/services/business-permit',\n      category: 'Business Services'\n    },\n    {\n      id: 2,\n      title: 'Healthcare Services Directory',\n      description: 'Find healthcare providers and services in your area.',\n      url: '/services/healthcare',\n      category: 'Health Services'\n    }\n  ];\n\n  searchHistory = [\n    'government services',\n    'permit application',\n    'tax information',\n    'healthcare services'\n  ];\n\n  handleSearchInputChange(event: any) {\n    this.searchQuery = event.value;\n    \n    if (this.searchError) {\n      this.searchError = '';\n    }\n    \n    console.log('Search query changed:', event.value);\n  }\n\n  async performSearch(query: string) {\n    if (!query.trim()) {\n      this.searchError = 'Please enter a search term';\n      return;\n    }\n\n    this.isSearching = true;\n    this.searchError = '';\n    this.hasSearched = true;\n\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Filter results based on query\n      const filteredResults = this.mockSearchResults.filter(result =>\n        result.title.toLowerCase().includes(query.toLowerCase()) ||\n        result.description.toLowerCase().includes(query.toLowerCase()) ||\n        result.category.toLowerCase().includes(query.toLowerCase())\n      );\n      \n      this.searchResults = filteredResults;\n      \n      // Track search analytics\n      this.trackSearchAnalytics(query, filteredResults.length);\n      \n    } catch (error) {\n      console.error('Search error:', error);\n      this.searchError = 'An error occurred while searching. Please try again.';\n    } finally {\n      this.isSearching = false;\n    }\n  }\n\n  handleSearchSubmit() {\n    this.performSearch(this.searchQuery);\n  }\n\n  handleKeyPress(event: KeyboardEvent) {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      this.performSearch(this.searchQuery);\n    }\n  }\n\n  handleSearchHistoryClick(historyItem: string) {\n    this.searchQuery = historyItem;\n    this.performSearch(historyItem);\n  }\n\n  clearSearch() {\n    this.searchQuery = '';\n    this.searchResults = [];\n    this.hasSearched = false;\n    this.searchError = '';\n  }\n\n  trackSearchAnalytics(query: string, resultsCount: number) {\n    console.log('Search analytics:', {\n      query,\n      resultsCount,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  getSearchButtonText(): string {\n    if (this.isSearching) return 'Searching...';\n    return 'Search';\n  }\n\n  getResultsText(): string {\n    const count = this.searchResults.length;\n    if (count === 0) return 'No results found';\n    if (count === 1) return '1 result found';\n    return `${count} results found`;\n  }\n}",
      "key": "searchQuery: string = '';\nsearchResults: any[] = [];\nisSearching: boolean = false;\nhasSearched: boolean = false;\nsearchError: string = '';\n\nmockSearchResults = [\n  {\n    id: 1,\n    title: 'Apply for a Business Permit',\n    description: 'Start your business in Alberta with the required permits and licenses.',\n    url: '/services/business-permit',\n    category: 'Business Services'\n  }\n];\n\nhandleSearchInputChange(event: any) {\n  this.searchQuery = event.value;\n  \n  if (this.searchError) {\n    this.searchError = '';\n  }\n  \n  console.log('Search query changed:', event.value);\n}\n\nasync performSearch(query: string) {\n  if (!query.trim()) {\n    this.searchError = 'Please enter a search term';\n    return;\n  }\n\n  this.isSearching = true;\n  this.searchError = '';\n  this.hasSearched = true;\n\n  try {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const filteredResults = this.mockSearchResults.filter(result =>\n      result.title.toLowerCase().includes(query.toLowerCase()) ||\n      result.description.toLowerCase().includes(query.toLowerCase())\n    );\n    \n    this.searchResults = filteredResults;\n    this.trackSearchAnalytics(query, filteredResults.length);\n    \n  } catch (error) {\n    console.error('Search error:', error);\n    this.searchError = 'An error occurred while searching. Please try again.';\n  } finally {\n    this.isSearching = false;\n  }\n}\n\nhandleSearchSubmit() {\n  this.performSearch(this.searchQuery);\n}\n\nhandleKeyPress(event: KeyboardEvent) {\n  if (event.key === 'Enter') {\n    event.preventDefault();\n    this.performSearch(this.searchQuery);\n  }\n}\n\nclearSearch() {\n  this.searchQuery = '';\n  this.searchResults = [];\n  this.hasSearched = false;\n  this.searchError = '';\n}\n\ntrackSearchAnalytics(query: string, resultsCount: number) {\n  console.log('Search analytics:', {\n    query,\n    resultsCount,\n    timestamp: new Date().toISOString()\n  });\n}\n\ngetSearchButtonText(): string {\n  if (this.isSearching) return 'Searching...';\n  return 'Search';\n}\n\ngetResultsText(): string {\n  const count = this.searchResults.length;\n  if (count === 0) return 'No results found';\n  if (count === 1) return '1 result found';\n  return `${count} results found`;\n}\n\n<!-- Template -->\n<div class=\"search-container\">\n  <div class=\"search-form\">\n    <goab-form-item label=\"Search\" helperText=\"Enter keywords to find services, information, or resources\">\n      <goab-block gap=\"xs\" direction=\"row\">\n        <goab-input\n          type=\"search\"\n          name=\"search\"\n          [value]=\"searchQuery\"\n          (onChange)=\"handleSearchInputChange($event)\"\n          (keypress)=\"handleKeyPress($event)\"\n          leadingIcon=\"search\"\n          placeholder=\"Search for services or information...\"\n          [error]=\"!!searchError\"\n          aria-label=\"Search for government services and information\"\n          width=\"100%\">\n        </goab-input>\n        <goab-button\n          type=\"primary\"\n          (onClick)=\"handleSearchSubmit()\"\n          [disabled]=\"isSearching\"\n          aria-label=\"Execute search\">\n          {{ getSearchButtonText() }}\n        </goab-button>\n      </goab-block>\n    </goab-form-item>\n\n    <div class=\"search-error\" role=\"alert\" *ngIf=\"searchError\">\n      {{ searchError }}\n    </div>\n  </div>\n\n  <div class=\"search-results\" *ngIf=\"hasSearched\">\n    <div class=\"results-header\">\n      <h2>{{ getResultsText() }}</h2>\n      <p class=\"search-query\" *ngIf=\"searchQuery\">for \"{{ searchQuery }}\"</p>\n      <button\n        type=\"button\"\n        class=\"clear-search\"\n        (click)=\"clearSearch()\"\n        aria-label=\"Clear search and start new search\">\n        Clear search\n      </button>\n    </div>\n\n    <div class=\"results-list\" *ngIf=\"searchResults.length > 0\">\n      <div class=\"result-item\" *ngFor=\"let result of searchResults\">\n        <h3 class=\"result-title\">\n          <a [href]=\"result.url\">{{ result.title }}</a>\n        </h3>\n        <p class=\"result-description\">{{ result.description }}</p>\n        <span class=\"result-category\">{{ result.category }}</span>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"search-loading\" aria-live=\"polite\" *ngIf=\"isSearching\">\n    <p>Searching for results...</p>\n  </div>\n</div>"
    }
  },
  "tags": [
    "search",
    "form-control",
    "search-input",
    "search-functionality",
    "data-discovery",
    "content-search",
    "search-interface",
    "information-finding",
    "search-results",
    "query-input"
  ]
}