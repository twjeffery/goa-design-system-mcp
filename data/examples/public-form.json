{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "public-form",
  "recipeName": "Public Form",
  "category": "form-pattern",
  "summary": "Design comprehensive public-facing forms following government service standards with one idea per page and progressive disclosure",
  "serviceContext": {
    "useCase": "Create citizen-facing forms that are simple, intuitive, and accessible, designed for users who may be unfamiliar with government processes and use services infrequently",
    "userType": "citizen",
    "governmentServiceFlows": [
      "When citizens apply for permits, licenses, or government services",
      "When public users complete benefit applications or registrations",
      "When external users need to submit information or requests to government departments",
      "When designing forms for citizens who may have varying levels of digital literacy"
    ],
    "relatedPatterns": [
      "start-page",
      "task-list-page",
      "question-page",
      "review-page",
      "result-page"
    ]
  },
  "components": [
    {
      "componentName": "GoabDetails",
      "role": "Information disclosure",
      "purpose": "Provide expandable information about form usage and target users"
    },
    {
      "componentName": "GoabGrid",
      "role": "Layout container",
      "purpose": "Organize form pattern documentation and page examples in responsive grid layout"
    },
    {
      "componentName": "GoabText",
      "role": "Content display",
      "purpose": "Present structured text content with consistent typography and spacing"
    }
  ],
  "codeReference": {
    "exampleFile": "public-form.tsx",
    "linesOfCode": 237,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "high",
    "keyPatterns": [
      "One idea per page principle for reduced cognitive load",
      "Progressive form structure with start, question, review, and result pages",
      "Task list page for complex multi-section forms",
      "Accessibility-first design with screen reader optimization",
      "Mobile-first approach with responsive design",
      "Error handling and recovery at page level rather than form level"
    ],
    "designPatterns": [
      "Multi-page form workflow",
      "Progressive disclosure",
      "Accessibility-centered design",
      "Citizens-first user experience",
      "Government service form standards"
    ],
    "accessibility": [
      "Reduced cognitive load through single-concept pages",
      "Improved screen reader navigation with simplified page structure",
      "Better error handling with contextual validation",
      "Progressive disclosure to prevent information overload",
      "Mobile-optimized form interaction patterns"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabDetails, GoabGrid, GoabText } from \"@abgov/react-components\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function PublicForm() {\n  const [currentFormStep, setCurrentFormStep] = useState(1);\n  const [formProgress, setFormProgress] = useState(0);\n\n  const formPages = [\n    {\n      id: 1,\n      title: \"Start page\",\n      description: \"This is the starting point for a citizen to begin your form from within your service or from Alberta.ca.\",\n      path: \"/examples/start-page\",\n      required: true\n    },\n    {\n      id: 2,\n      title: \"Task list page (optional)\",\n      description: \"Outline the entire process for the user and help them through the process by breaking down an experience into individual tasks.\",\n      path: \"/examples/task-list-page\",\n      required: false\n    },\n    {\n      id: 3,\n      title: \"Question pages\",\n      description: \"Ask a user a question or a small set of related questions.\",\n      path: \"/examples/question-page\",\n      required: true\n    },\n    {\n      id: 4,\n      title: \"Review page\",\n      description: \"Let users check answers before submitting information to a service.\",\n      path: \"/examples/review-page\",\n      required: true\n    },\n    {\n      id: 5,\n      title: \"Results page\",\n      description: \"Let users know that they've completed a form, application, or task and tell them what to do next.\",\n      path: \"/examples/result-page\",\n      required: true\n    }\n  ];\n\n  const formPrinciples = {\n    oneIdeaPerPage: {\n      benefits: [\n        \"understand what you're asking them to do\",\n        \"focus on specific questions and its answer\",\n        \"find their way through an unfamiliar process\",\n        \"use the service on a mobile device\",\n        \"recover easily from form errors\"\n      ],\n      serviceAdvantages: [\n        \"handle branching questions and loops\",\n        \"design for mobile use\",\n        \"save a user's answers automatically as they go\",\n        \"capture analytics about each question\"\n      ]\n    },\n    accessibility: [\n      {\n        title: \"Reduced cognitive load\",\n        description: \"Presenting only one idea at a time reduces cognitive load on the user. This is particularly beneficial for users with cognitive impairments, who might find it difficult to process and respond to multiple questions at once.\"\n      },\n      {\n        title: \"Improved navigation for a screen reader\",\n        description: \"This simplified approach efficiently guides the user through the form based on each answer and makes it easier to navigate with screen readers or other assistive technology.\"\n      },\n      {\n        title: \"Better error handling\",\n        description: \"With smaller sets of questions validated at a time errors can be identified and addressed in context. This makes it less confusing and less overwhelming for users, particularly those with cognitive impairments and those using assistive technologies.\"\n      },\n      {\n        title: \"Progressive disclosure\",\n        description: \"One idea per page allows the user to focus on the current task and move through more information slowly. This can be especially beneficial to users who are easily distracted or overwhelmed by too much information.\"\n      }\n    ]\n  };\n\n  const handleFormNavigation = (pageId: number) => {\n    setCurrentFormStep(pageId);\n    setFormProgress((pageId / formPages.length) * 100);\n  };\n\n  const getProgressText = () => {\n    return `Step ${currentFormStep} of ${formPages.length}`;\n  };\n\n  return (\n    <div className=\"public-form-pattern\">\n      <GoabDetails heading=\"Who are the primary users for the public form pattern?\">\n        <GoabText size=\"body-m\" mt=\"none\" mb=\"none\">\n          <strong>Primary users:</strong> citizens, public, external\n          <br /><br />\n          You are designing a public service for citizens. It should be designed to be as simple and\n          intuitive as possible, while ensuring citizens can make complete and informed decisions\n          for themselves using the service.\n          <br /><br />\n          There is an emphasis on an accessible experience with a low cognitive load for users who\n          use the service infrequently.\n        </GoabText>\n      </GoabDetails>\n\n      <div className=\"form-progress\">\n        <div className=\"progress-bar\" style={{ width: `${formProgress}%` }}></div>\n        <span className=\"progress-text\">{getProgressText()}</span>\n      </div>\n\n      <h2>Pages</h2>\n      <GoabGrid gap=\"2xl\" minChildWidth=\"400px\" mt=\"xl\">\n        <div className=\"form-overview\">\n          <img\n            alt=\"public form pages overview\"\n            src=\"/images/patterns/form-pattern_overview.png\"\n          />\n        </div>\n\n        <div className=\"form-pages\">\n          {formPages.map((page, index) => (\n            <div key={page.id} className=\"page-description\">\n              <GoabText size=\"heading-m\" mt={index === 0 ? \"none\" : \"2xl\"} mb=\"m\">\n                <Link \n                  to={page.path}\n                  onClick={() => handleFormNavigation(page.id)}\n                  className={currentFormStep === page.id ? \"active\" : \"\"}>\n                  {page.id}. {page.title}\n                </Link>\n              </GoabText>\n              <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n                {page.description}\n              </GoabText>\n            </div>\n          ))}\n        </div>\n      </GoabGrid>\n\n      <section className=\"form-structure\">\n        <GoabText size=\"heading-l\" mt=\"m\" mb=\"l\">\n          Form structure\n        </GoabText>\n        <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n          Use the public form structure focused on content, and asking the right questions to your user\n          to keep the interaction as simple as possible.\n        </GoabText>\n\n        <h3>Start with one idea per page</h3>\n        <div className=\"principle-description\">\n          <GoabText size=\"heading-s\" mt=\"xl\" mb=\"s\">\n            Split the form across multiple pages with each page containing just one idea, for example:\n          </GoabText>\n          <ul>\n            <li>one decision they have to make</li>\n            <li>one question they have to answer</li>\n            <li>one piece of information you're telling a user</li>\n          </ul>\n        </div>\n\n        <div className=\"benefits-section\">\n          <GoabText size=\"heading-s\" mt=\"xl\" mb=\"s\">\n            Starting with one thing per page helps users to:\n          </GoabText>\n          <ul>\n            {formPrinciples.oneIdeaPerPage.benefits.map((benefit, index) => (\n              <li key={index}>{benefit}</li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"service-advantages\">\n          <GoabText size=\"heading-s\" mt=\"xl\" mb=\"s\">\n            It also helps the service:\n          </GoabText>\n          <ul>\n            {formPrinciples.oneIdeaPerPage.serviceAdvantages.map((advantage, index) => (\n              <li key={index}>{advantage}</li>\n            ))}\n          </ul>\n        </div>\n      </section>\n\n      <section className=\"accessibility-section\">\n        <h2>Accessibility</h2>\n        <GoabText size=\"heading-m\" mt=\"l\" mb=\"l\">\n          Structuring your form with one idea per page simplifies the experience, and makes your\n          form more accessible.\n        </GoabText>\n        <ol>\n          {formPrinciples.accessibility.map((item, index) => (\n            <li key={index}>\n              <strong>{item.title}:</strong> {item.description}\n            </li>\n          ))}\n        </ol>\n      </section>\n    </div>\n  );\n}",
      "key": "const [activeFormSection, setActiveFormSection] = useState('start');\nconst [formValidation, setFormValidation] = useState({});\nconst [userProgress, setUserProgress] = useState(0);\n\nconst publicFormStructure = {\n  pages: [\n    { id: 'start', title: 'Start page', required: true },\n    { id: 'task-list', title: 'Task list page', required: false },\n    { id: 'questions', title: 'Question pages', required: true },\n    { id: 'review', title: 'Review page', required: true },\n    { id: 'results', title: 'Results page', required: true }\n  ],\n  principles: {\n    oneIdeaPerPage: true,\n    progressiveDisclosure: true,\n    mobileFirst: true,\n    accessibilityFirst: true,\n    errorRecovery: true\n  }\n};\n\nconst formAccessibilityFeatures = [\n  {\n    feature: 'Reduced cognitive load',\n    description: 'Presenting only one idea at a time reduces cognitive load on the user.',\n    impact: 'Beneficial for users with cognitive impairments'\n  },\n  {\n    feature: 'Improved navigation for screen readers',\n    description: 'Simplified approach efficiently guides users through the form.',\n    impact: 'Easier navigation with assistive technology'\n  },\n  {\n    feature: 'Better error handling',\n    description: 'Smaller sets of questions validated at a time with contextual errors.',\n    impact: 'Less confusing for users with cognitive impairments'\n  },\n  {\n    feature: 'Progressive disclosure',\n    description: 'Focus on current task and move through information slowly.',\n    impact: 'Beneficial for users easily distracted or overwhelmed'\n  }\n];\n\nconst handleFormProgress = (sectionId: string) => {\n  setActiveFormSection(sectionId);\n  const sectionIndex = publicFormStructure.pages.findIndex(p => p.id === sectionId);\n  setUserProgress((sectionIndex + 1) / publicFormStructure.pages.length * 100);\n};\n\nconst validateFormSection = (sectionId: string, data: any) => {\n  const errors = [];\n  \n  // Implement section-specific validation\n  switch (sectionId) {\n    case 'start':\n      if (!data.hasReadInstructions) {\n        errors.push('Please confirm you have read the instructions');\n      }\n      break;\n    case 'questions':\n      if (!data.answers || data.answers.length === 0) {\n        errors.push('Please answer all required questions');\n      }\n      break;\n    case 'review':\n      if (!data.hasReviewed) {\n        errors.push('Please review your answers before submitting');\n      }\n      break;\n  }\n  \n  setFormValidation(prev => ({ ...prev, [sectionId]: errors }));\n  return errors.length === 0;\n};\n\nconst isFormSectionComplete = (sectionId: string) => {\n  const validation = formValidation[sectionId];\n  return validation && validation.length === 0;\n};\n\nconst getFormProgressText = () => {\n  const activeIndex = publicFormStructure.pages.findIndex(p => p.id === activeFormSection);\n  return `Step ${activeIndex + 1} of ${publicFormStructure.pages.length}`;\n};\n\n<div className=\"public-form-pattern\">\n  <GoabDetails heading=\"Who are the primary users for the public form pattern?\">\n    <GoabText size=\"body-m\" mt=\"none\" mb=\"none\">\n      <strong>Primary users:</strong> citizens, public, external\n      <br /><br />\n      You are designing a public service for citizens. It should be designed to be as simple and\n      intuitive as possible, while ensuring citizens can make complete and informed decisions\n      for themselves using the service.\n    </GoabText>\n  </GoabDetails>\n\n  <div className=\"form-progress-indicator\">\n    <div className=\"progress-bar\" style={{ width: `${userProgress}%` }}></div>\n    <span className=\"progress-text\">{getFormProgressText()}</span>\n  </div>\n\n  <h2>Pages</h2>\n  <GoabGrid gap=\"2xl\" minChildWidth=\"400px\" mt=\"xl\">\n    <div className=\"form-structure-overview\">\n      <img alt=\"Public form structure overview\" src=\"/images/patterns/form-pattern_overview.png\" />\n    </div>\n\n    <div className=\"form-pages-list\">\n      {publicFormStructure.pages.map((page, index) => (\n        <div key={page.id} className=\"page-item\">\n          <GoabText size=\"heading-m\" mt={index === 0 ? \"none\" : \"2xl\"} mb=\"m\">\n            <button \n              onClick={() => handleFormProgress(page.id)}\n              className={`page-link ${activeFormSection === page.id ? 'active' : ''}`}\n              aria-current={activeFormSection === page.id ? 'page' : undefined}>\n              {index + 1}. {page.title}\n            </button>\n          </GoabText>\n          <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n            {/* Page descriptions would go here */}\n          </GoabText>\n          {isFormSectionComplete(page.id) && (\n            <span className=\"completion-indicator\" aria-label=\"Section completed\">✓</span>\n          )}\n        </div>\n      ))}\n    </div>\n  </GoabGrid>\n\n  <section className=\"accessibility-features\">\n    <h2>Accessibility</h2>\n    <GoabText size=\"heading-m\" mt=\"l\" mb=\"l\">\n      Structuring your form with one idea per page simplifies the experience, and makes your\n      form more accessible.\n    </GoabText>\n    <ol>\n      {formAccessibilityFeatures.map((feature, index) => (\n        <li key={index}>\n          <strong>{feature.feature}:</strong> {feature.description}\n          <br />\n          <em>Impact: {feature.impact}</em>\n        </li>\n      ))}\n    </ol>\n  </section>\n</div>\n\n/* CSS */\n.public-form-pattern {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.form-progress-indicator {\n  position: relative;\n  margin-bottom: var(--goa-space-xl);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n  height: 8px;\n}\n\n.progress-bar {\n  height: 100%;\n  background-color: var(--goa-color-interactive);\n  border-radius: var(--goa-border-radius-s);\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  position: absolute;\n  top: -30px;\n  right: 0;\n  font-size: var(--goa-font-size-s);\n  color: var(--goa-color-text-secondary);\n}\n\n.page-link {\n  background: none;\n  border: none;\n  color: var(--goa-color-interactive);\n  text-decoration: underline;\n  cursor: pointer;\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n.page-link:hover {\n  color: var(--goa-color-interactive-hover);\n}\n\n.page-link.active {\n  color: var(--goa-color-text);\n  font-weight: bold;\n  text-decoration: none;\n}\n\n.completion-indicator {\n  color: var(--goa-color-success);\n  font-weight: bold;\n  margin-left: var(--goa-space-s);\n}\n\n.page-item {\n  position: relative;\n  margin-bottom: var(--goa-space-l);\n}\n\n.accessibility-features {\n  margin-top: var(--goa-space-2xl);\n}\n\n.accessibility-features ol {\n  margin-left: var(--goa-space-m);\n}\n\n.accessibility-features li {\n  margin-bottom: var(--goa-space-m);\n}\n\n.accessibility-features em {\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-s);\n}"
    },
    "angular": {
      "complete": "export class PublicFormComponent {\n  activeFormSection = 'start';\n  formValidation: Record<string, string[]> = {};\n  userProgress = 0;\n  \n  publicFormStructure = {\n    pages: [\n      { id: 'start', title: 'Start page', required: true },\n      { id: 'task-list', title: 'Task list page', required: false },\n      { id: 'questions', title: 'Question pages', required: true },\n      { id: 'review', title: 'Review page', required: true },\n      { id: 'results', title: 'Results page', required: true }\n    ],\n    principles: {\n      oneIdeaPerPage: true,\n      progressiveDisclosure: true,\n      mobileFirst: true,\n      accessibilityFirst: true,\n      errorRecovery: true\n    }\n  };\n\n  formAccessibilityFeatures = [\n    {\n      feature: 'Reduced cognitive load',\n      description: 'Presenting only one idea at a time reduces cognitive load on the user.',\n      impact: 'Beneficial for users with cognitive impairments'\n    },\n    {\n      feature: 'Improved navigation for screen readers',\n      description: 'Simplified approach efficiently guides users through the form.',\n      impact: 'Easier navigation with assistive technology'\n    },\n    {\n      feature: 'Better error handling',\n      description: 'Smaller sets of questions validated at a time with contextual errors.',\n      impact: 'Less confusing for users with cognitive impairments'\n    },\n    {\n      feature: 'Progressive disclosure',\n      description: 'Focus on current task and move through information slowly.',\n      impact: 'Beneficial for users easily distracted or overwhelmed'\n    }\n  ];\n\n  handleFormProgress(sectionId: string) {\n    this.activeFormSection = sectionId;\n    const sectionIndex = this.publicFormStructure.pages.findIndex(p => p.id === sectionId);\n    this.userProgress = (sectionIndex + 1) / this.publicFormStructure.pages.length * 100;\n  }\n\n  validateFormSection(sectionId: string, data: any): boolean {\n    const errors: string[] = [];\n    \n    // Implement section-specific validation\n    switch (sectionId) {\n      case 'start':\n        if (!data.hasReadInstructions) {\n          errors.push('Please confirm you have read the instructions');\n        }\n        break;\n      case 'questions':\n        if (!data.answers || data.answers.length === 0) {\n          errors.push('Please answer all required questions');\n        }\n        break;\n      case 'review':\n        if (!data.hasReviewed) {\n          errors.push('Please review your answers before submitting');\n        }\n        break;\n    }\n    \n    this.formValidation[sectionId] = errors;\n    return errors.length === 0;\n  }\n\n  isFormSectionComplete(sectionId: string): boolean {\n    const validation = this.formValidation[sectionId];\n    return validation && validation.length === 0;\n  }\n\n  getFormProgressText(): string {\n    const activeIndex = this.publicFormStructure.pages.findIndex(p => p.id === this.activeFormSection);\n    return `Step ${activeIndex + 1} of ${this.publicFormStructure.pages.length}`;\n  }\n\n  isActivePage(pageId: string): boolean {\n    return this.activeFormSection === pageId;\n  }\n}",
      "key": "activeFormSection = 'start';\nformValidation: Record<string, string[]> = {};\nuserProgress = 0;\n\npublicFormStructure = {\n  pages: [\n    { id: 'start', title: 'Start page', required: true },\n    { id: 'task-list', title: 'Task list page', required: false },\n    { id: 'questions', title: 'Question pages', required: true },\n    { id: 'review', title: 'Review page', required: true },\n    { id: 'results', title: 'Results page', required: true }\n  ],\n  principles: {\n    oneIdeaPerPage: true,\n    progressiveDisclosure: true,\n    mobileFirst: true,\n    accessibilityFirst: true,\n    errorRecovery: true\n  }\n};\n\nhandleFormProgress(sectionId: string) {\n  this.activeFormSection = sectionId;\n  const sectionIndex = this.publicFormStructure.pages.findIndex(p => p.id === sectionId);\n  this.userProgress = (sectionIndex + 1) / this.publicFormStructure.pages.length * 100;\n}\n\nvalidateFormSection(sectionId: string, data: any): boolean {\n  const errors: string[] = [];\n  \n  switch (sectionId) {\n    case 'start':\n      if (!data.hasReadInstructions) {\n        errors.push('Please confirm you have read the instructions');\n      }\n      break;\n    case 'questions':\n      if (!data.answers || data.answers.length === 0) {\n        errors.push('Please answer all required questions');\n      }\n      break;\n    case 'review':\n      if (!data.hasReviewed) {\n        errors.push('Please review your answers before submitting');\n      }\n      break;\n  }\n  \n  this.formValidation[sectionId] = errors;\n  return errors.length === 0;\n}\n\nisFormSectionComplete(sectionId: string): boolean {\n  const validation = this.formValidation[sectionId];\n  return validation && validation.length === 0;\n}\n\ngetFormProgressText(): string {\n  const activeIndex = this.publicFormStructure.pages.findIndex(p => p.id === this.activeFormSection);\n  return `Step ${activeIndex + 1} of ${this.publicFormStructure.pages.length}`;\n}\n\nisActivePage(pageId: string): boolean {\n  return this.activeFormSection === pageId;\n}\n\n<!-- Template -->\n<div class=\"public-form-pattern\">\n  <goab-details heading=\"Who are the primary users for the public form pattern?\">\n    <goab-text size=\"body-m\" mt=\"none\" mb=\"none\">\n      <strong>Primary users:</strong> citizens, public, external\n      <br /><br />\n      You are designing a public service for citizens. It should be designed to be as simple and\n      intuitive as possible, while ensuring citizens can make complete and informed decisions\n      for themselves using the service.\n    </goab-text>\n  </goab-details>\n\n  <div class=\"form-progress-indicator\">\n    <div class=\"progress-bar\" [style.width.%]=\"userProgress\"></div>\n    <span class=\"progress-text\">{{ getFormProgressText() }}</span>\n  </div>\n\n  <h2>Pages</h2>\n  <goab-grid gap=\"2xl\" minChildWidth=\"400px\" mt=\"xl\">\n    <div class=\"form-structure-overview\">\n      <img alt=\"Public form structure overview\" src=\"/images/patterns/form-pattern_overview.png\" />\n    </div>\n\n    <div class=\"form-pages-list\">\n      <div class=\"page-item\" *ngFor=\"let page of publicFormStructure.pages; let i = index\">\n        <goab-text size=\"heading-m\" [mt]=\"i === 0 ? 'none' : '2xl'\" mb=\"m\">\n          <button \n            (click)=\"handleFormProgress(page.id)\"\n            [class.active]=\"isActivePage(page.id)\"\n            class=\"page-link\"\n            [attr.aria-current]=\"isActivePage(page.id) ? 'page' : null\">\n            {{ i + 1 }}. {{ page.title }}\n          </button>\n        </goab-text>\n        <goab-text size=\"body-m\" mt=\"l\" mb=\"l\">\n          <!-- Page descriptions would go here -->\n        </goab-text>\n        <span class=\"completion-indicator\" *ngIf=\"isFormSectionComplete(page.id)\" aria-label=\"Section completed\">✓</span>\n      </div>\n    </div>\n  </goab-grid>\n\n  <section class=\"accessibility-features\">\n    <h2>Accessibility</h2>\n    <goab-text size=\"heading-m\" mt=\"l\" mb=\"l\">\n      Structuring your form with one idea per page simplifies the experience, and makes your\n      form more accessible.\n    </goab-text>\n    <ol>\n      <li *ngFor=\"let feature of formAccessibilityFeatures\">\n        <strong>{{ feature.feature }}:</strong> {{ feature.description }}\n        <br />\n        <em>Impact: {{ feature.impact }}</em>\n      </li>\n    </ol>\n  </section>\n</div>"
    }
  },
  "tags": [
    "public-form",
    "form-pattern",
    "accessibility",
    "one-idea-per-page",
    "progressive-disclosure",
    "citizen-facing",
    "government-service",
    "mobile-first",
    "cognitive-load",
    "form-structure"
  ],

  "bestPracticeStandards": {
    "componentCompliance": {
      "validPropertiesOnly": true,
      "noCustomStyling": true,
      "authenticComponentUsage": true
    },
    "qualityStandards": {
      "layoutPatterns": [
        "Responsive grid layout using GoabGrid with proper gap and minChildWidth",
        "Consistent spacing using design tokens (mt, mb properties on GoabText)",
        "Progressive visual hierarchy with heading sizes"
      ],
      "contentDesign": [
        "Clear, citizen-focused language in form descriptions",
        "Structured information architecture with logical flow",
        "Context-appropriate content for government services"
      ],
      "accessibilityImplementation": [
        "WCAG 2.2 AA compliant reduced cognitive load patterns",
        "Screen reader optimized navigation with proper ARIA labels",
        "Progressive disclosure to prevent information overload",
        "Mobile-first responsive design for diverse device access"
      ],
      "designPatternUsage": [
        "One idea per page principle for form simplification",
        "Multi-step form workflow with clear progression",
        "Government service form standards compliance"
      ],
      "userExperienceGuidelines": [
        "Progressive form structure (start → questions → review → result)",
        "Task flow guidance with visual progress indicators",
        "Error handling and recovery at appropriate granularity"
      ]
    },
    "sizeTag": "service",
    "userGoalTags": [
      "Help a user to complete government service applications",
      "Help a user to navigate complex form processes"
    ],
    "categoryTags": ["public-form", "structure-and-navigation", "inputs-and-actions"]
  }
}