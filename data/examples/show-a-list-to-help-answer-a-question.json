{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "show-a-list-to-help-answer-a-question",
  "recipeName": "Show a List to Help Answer a Question",
  "category": "form-pattern",
  "summary": "Provide contextual examples and clarifications through expandable lists to help users understand questions and make informed responses",
  "serviceContext": {
    "useCase": "Support user decision-making by providing clear examples, definitions, and exclusions that help users accurately respond to complex government form questions",
    "userType": "citizen",
    "governmentServiceFlows": [
      "When citizens need to understand eligibility criteria for financial assistance or benefits",
      "When form questions involve complex categories that require examples for clarity",
      "When users need to distinguish between included and excluded items or expenses",
      "When government programs have specific definitions that differ from common understanding"
    ],
    "relatedPatterns": [
      "reveal-more-information-to-help-answer-a-question",
      "give-context-before-asking-a-long-answer-question",
      "include-descriptions-for-items-in-a-checkbox-list",
      "ask-a-user-one-question-at-a-time"
    ]
  },
  "components": [
    {
      "componentName": "GoabFormItem",
      "role": "Question container with helper text",
      "purpose": "Present the main question with initial guidance and proper form structure"
    },
    {
      "componentName": "GoabRadioGroup",
      "role": "Response selection control",
      "purpose": "Allow user to choose from predefined options for the question"
    },
    {
      "componentName": "GoabRadioItem",
      "role": "Individual response option",
      "purpose": "Provide specific answer choices with clear labeling"
    },
    {
      "componentName": "GoabDetails",
      "role": "Expandable information container",
      "purpose": "Hide additional context until user needs clarification, reducing cognitive load"
    },
    {
      "componentName": "GoabBlock",
      "role": "Content layout organizer",
      "purpose": "Structure examples and exclusions with consistent spacing and organization"
    }
  ],
  "codeReference": {
    "exampleFile": "show-a-list-to-help-answer-a-question.tsx",
    "linesOfCode": 83,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "medium",
    "keyPatterns": [
      "Form question with contextual helper text",
      "Expandable details section for additional guidance",
      "Structured lists with examples and exclusions",
      "Progressive disclosure to reduce initial cognitive load",
      "Clear distinction between included and excluded items"
    ],
    "designPatterns": [
      "Progressive disclosure",
      "Contextual help",
      "Example-driven guidance",
      "Clear categorization",
      "User-centered information architecture"
    ],
    "accessibility": [
      "Form item properly labeled with question and helper text",
      "Details component maintains keyboard navigation",
      "List structure provides clear content hierarchy",
      "Radio options clearly associated with question",
      "Screen reader friendly expandable content"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabBlock, GoabDetails, GoabFormItem, GoabRadioGroup, GoabRadioItem, GoabButton, GoabCallout } from \"@abgov/react-components\";\nimport { GoabRadioGroupOnChangeDetail } from \"@abgov/ui-components-common\";\nimport { useState } from \"react\";\n\nexport default function ShowAListToHelpAnswerAQuestion() {\n  const [additionalExpenses, setAdditionalExpenses] = useState<string>('');\n  const [validationError, setValidationError] = useState<string>('');\n  const [isSubmitted, setIsSubmitted] = useState<boolean>(false);\n  const [expandedDetails, setExpandedDetails] = useState<boolean>(false);\n  const [userInteractions, setUserInteractions] = useState<any>({\n    detailsOpened: false,\n    helpSections: []\n  });\n\n  const expenseCategories = {\n    included: [\n      {\n        item: 'Laptop and computer hardware',\n        description: 'Desktop computers, laptops, tablets, keyboards, mice, monitors'\n      },\n      {\n        item: 'Computer apps and subscriptions',\n        description: 'Software licenses, cloud storage, productivity applications'\n      },\n      {\n        item: 'Home internet',\n        description: 'Monthly internet service costs for remote learning'\n      },\n      {\n        item: 'Testing and exam fees',\n        description: 'Certification exams, professional licensing tests, placement tests'\n      },\n      {\n        item: 'Work or school clothing',\n        description: 'Safety equipment, uniforms, work boots, lab coats'\n      },\n      {\n        item: 'Transportation costs',\n        description: 'Public transit passes, parking fees for school attendance'\n      },\n      {\n        item: 'Professional tools',\n        description: 'Industry-specific tools and equipment required for training'\n      }\n    ],\n    excluded: [\n      {\n        item: 'Tuition',\n        reason: 'Covered under separate tuition assistance program'\n      },\n      {\n        item: 'Mandatory fees',\n        reason: 'Included in standard program costs'\n      },\n      {\n        item: 'Books and supplies',\n        reason: 'Provided through textbook allowance'\n      },\n      {\n        item: 'School association fees',\n        reason: 'Not directly related to educational requirements'\n      },\n      {\n        item: 'Personal living expenses',\n        reason: 'Housing, food, and personal items not covered'\n      }\n    ]\n  };\n\n  const handleRadioChange = (event: GoabRadioGroupOnChangeDetail) => {\n    setAdditionalExpenses(event.value);\n    \n    // Clear validation error when user makes selection\n    if (validationError) {\n      setValidationError('');\n    }\n    \n    // Track user selection analytics\n    trackUserSelection(event.value);\n    \n    console.log('Additional expenses selection:', event.value);\n  };\n\n  const validateSelection = (): boolean => {\n    if (!additionalExpenses) {\n      setValidationError('Please select whether you have additional education expenses');\n      return false;\n    }\n    \n    setValidationError('');\n    return true;\n  };\n\n  const handleSubmit = () => {\n    if (!validateSelection()) {\n      return;\n    }\n    \n    setIsSubmitted(true);\n    \n    // Process the selection\n    const submissionData = {\n      hasAdditionalExpenses: additionalExpenses === 'yes',\n      userSelection: additionalExpenses,\n      detailsAccessed: userInteractions.detailsOpened,\n      timestamp: new Date().toISOString()\n    };\n    \n    console.log('Form submitted:', submissionData);\n    \n    // Track completion analytics\n    trackFormCompletion(submissionData);\n  };\n\n  const handleDetailsToggle = (isOpen: boolean) => {\n    setExpandedDetails(isOpen);\n    \n    if (isOpen && !userInteractions.detailsOpened) {\n      setUserInteractions(prev => ({\n        ...prev,\n        detailsOpened: true\n      }));\n      \n      // Track that user sought additional help\n      trackHelpAccess('expense-examples');\n    }\n    \n    console.log('Details section toggled:', isOpen);\n  };\n\n  const trackUserSelection = (selection: string) => {\n    console.log('Selection analytics:', {\n      selection,\n      timestamp: new Date().toISOString(),\n      helpAccessed: userInteractions.detailsOpened\n    });\n  };\n\n  const trackHelpAccess = (helpType: string) => {\n    console.log('Help access analytics:', {\n      helpType,\n      timestamp: new Date().toISOString(),\n      currentSelection: additionalExpenses\n    });\n  };\n\n  const trackFormCompletion = (submissionData: any) => {\n    console.log('Form completion analytics:', {\n      ...submissionData,\n      helpUtilization: userInteractions.detailsOpened,\n      completionTime: new Date().toISOString()\n    });\n  };\n\n  const handleReset = () => {\n    setAdditionalExpenses('');\n    setValidationError('');\n    setIsSubmitted(false);\n    setExpandedDetails(false);\n    setUserInteractions({\n      detailsOpened: false,\n      helpSections: []\n    });\n  };\n\n  const getSelectionSummary = (): string => {\n    if (!additionalExpenses) return 'No selection made';\n    return additionalExpenses === 'yes' \n      ? 'You have additional education expenses'\n      : 'You do not have additional education expenses';\n  };\n\n  const getNextStepsMessage = (): string => {\n    if (additionalExpenses === 'yes') {\n      return 'You will be able to submit receipts and documentation for your additional expenses in the next section.';\n    } else {\n      return 'You can always add additional expenses later if your situation changes.';\n    }\n  };\n\n  const renderIncludedItems = () => (\n    <div className=\"expense-category\">\n      <h4 className=\"category-title\">Examples of eligible education expenses</h4>\n      <ul className=\"expense-list included-list\">\n        {expenseCategories.included.map((expense, index) => (\n          <li key={index} className=\"expense-item\">\n            <strong className=\"expense-name\">{expense.item}</strong>\n            <span className=\"expense-description\">{expense.description}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n\n  const renderExcludedItems = () => (\n    <div className=\"expense-category\">\n      <h4 className=\"category-title\">Do not include these items</h4>\n      <ul className=\"expense-list excluded-list\">\n        {expenseCategories.excluded.map((expense, index) => (\n          <li key={index} className=\"expense-item\">\n            <strong className=\"expense-name\">{expense.item}</strong>\n            <span className=\"expense-reason\">{expense.reason}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n\n  return (\n    <div className=\"question-help-container\">\n      <div className=\"form-header\">\n        <h1>Education Expense Assessment</h1>\n        <p className=\"form-description\">\n          Help us understand your additional education costs to determine your eligibility for expense assistance.\n        </p>\n      </div>\n\n      <form className=\"expense-form\">\n        <GoabFormItem\n          label=\"Do you have additional education expenses?\"\n          helpText=\"You can request this money now or at any time during your program. Click below for examples of what qualifies.\"\n          error={validationError}\n          required\n          mb=\"m\">\n          <GoabRadioGroup \n            name=\"additional\" \n            value={additionalExpenses}\n            onChange={handleRadioChange}\n            error={!!validationError}>\n            <GoabRadioItem \n              label=\"Yes, I have additional education expenses\" \n              value=\"yes\" \n              name=\"additional\" \n            />\n            <GoabRadioItem \n              label=\"No, I do not have additional education expenses\" \n              value=\"no\" \n              name=\"additional\" \n            />\n          </GoabRadioGroup>\n        </GoabFormItem>\n\n        <GoabDetails \n          heading=\"What is considered an additional education expense?\" \n          onToggle={handleDetailsToggle}\n          className=\"expense-details\">\n          <GoabBlock gap=\"l\" mt=\"m\">\n            {renderIncludedItems()}\n            {renderExcludedItems()}\n            \n            <div className=\"additional-info\">\n              <GoabCallout type=\"information\" heading=\"Important Note\">\n                <p>\n                  Only submit expenses that are directly related to your education or training program. \n                  All expenses must be supported by receipts or documentation.\n                </p>\n              </GoabCallout>\n              \n              <div className=\"contact-info\">\n                <h4>Need more help?</h4>\n                <p>\n                  If you're unsure whether an expense qualifies, contact our support team at \n                  <a href=\"tel:+1-800-555-0123\"> 1-800-555-0123</a> or \n                  <a href=\"mailto:expenses@education.alberta.ca\"> expenses@education.alberta.ca</a>\n                </p>\n              </div>\n            </div>\n          </GoabBlock>\n        </GoabDetails>\n\n        {additionalExpenses && (\n          <div className=\"selection-summary\">\n            <h3>Your Selection</h3>\n            <p className=\"summary-text\">{getSelectionSummary()}</p>\n            <p className=\"next-steps\">{getNextStepsMessage()}</p>\n          </div>\n        )}\n\n        <div className=\"form-actions\">\n          <GoabButton \n            type=\"primary\" \n            onClick={handleSubmit}\n            disabled={!additionalExpenses || isSubmitted}>\n            {isSubmitted ? 'Response saved' : 'Continue'}\n          </GoabButton>\n          \n          {!isSubmitted && (\n            <GoabButton \n              type=\"secondary\" \n              onClick={handleReset}\n              disabled={!additionalExpenses}>\n              Reset\n            </GoabButton>\n          )}\n        </div>\n      </form>\n\n      {isSubmitted && (\n        <div className=\"completion-message\" role=\"alert\">\n          <GoabCallout type=\"success\" heading=\"Response Recorded\">\n            <p>\n              Your response has been saved. {additionalExpenses === 'yes' \n                ? 'You will be directed to the expense documentation section next.'\n                : 'You can continue with the rest of your application.'}\n            </p>\n          </GoabCallout>\n        </div>\n      )}\n\n      <div className=\"help-usage-guide\">\n        <h2>Using Helper Information Effectively</h2>\n        <ul className=\"guide-list\">\n          <li>\n            <strong>Read the question carefully:</strong> The main question and helper text provide initial context\n          </li>\n          <li>\n            <strong>Expand details when needed:</strong> Click the expandable section if you need examples or clarification\n          </li>\n          <li>\n            <strong>Review included examples:</strong> Check the \"eligible expenses\" list to see what qualifies\n          </li>\n          <li>\n            <strong>Check exclusions:</strong> Make sure your expenses aren't in the \"do not include\" list\n          </li>\n          <li>\n            <strong>Contact support if unsure:</strong> When in doubt, reach out for personalized guidance\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}",
      "key": "const [additionalExpenses, setAdditionalExpenses] = useState<string>('');\nconst [validationError, setValidationError] = useState<string>('');\nconst [isSubmitted, setIsSubmitted] = useState<boolean>(false);\nconst [expandedDetails, setExpandedDetails] = useState<boolean>(false);\n\nconst expenseCategories = {\n  included: [\n    {\n      item: 'Laptop and computer hardware',\n      description: 'Desktop computers, laptops, tablets, keyboards, mice, monitors'\n    },\n    {\n      item: 'Computer apps and subscriptions',\n      description: 'Software licenses, cloud storage, productivity applications'\n    },\n    {\n      item: 'Home internet',\n      description: 'Monthly internet service costs for remote learning'\n    },\n    {\n      item: 'Testing and exam fees',\n      description: 'Certification exams, professional licensing tests, placement tests'\n    },\n    {\n      item: 'Work or school clothing',\n      description: 'Safety equipment, uniforms, work boots, lab coats'\n    }\n  ],\n  excluded: [\n    {\n      item: 'Tuition',\n      reason: 'Covered under separate tuition assistance program'\n    },\n    {\n      item: 'Mandatory fees',\n      reason: 'Included in standard program costs'\n    },\n    {\n      item: 'Books and supplies',\n      reason: 'Provided through textbook allowance'\n    },\n    {\n      item: 'School association fees',\n      reason: 'Not directly related to educational requirements'\n    }\n  ]\n};\n\nconst handleRadioChange = (event: GoabRadioGroupOnChangeDetail) => {\n  setAdditionalExpenses(event.value);\n  \n  if (validationError) {\n    setValidationError('');\n  }\n  \n  console.log('Additional expenses selection:', event.value);\n};\n\nconst validateSelection = (): boolean => {\n  if (!additionalExpenses) {\n    setValidationError('Please select whether you have additional education expenses');\n    return false;\n  }\n  \n  setValidationError('');\n  return true;\n};\n\nconst handleSubmit = () => {\n  if (!validateSelection()) {\n    return;\n  }\n  \n  setIsSubmitted(true);\n  \n  const submissionData = {\n    hasAdditionalExpenses: additionalExpenses === 'yes',\n    userSelection: additionalExpenses,\n    timestamp: new Date().toISOString()\n  };\n  \n  console.log('Form submitted:', submissionData);\n};\n\nconst handleDetailsToggle = (isOpen: boolean) => {\n  setExpandedDetails(isOpen);\n  console.log('Details section toggled:', isOpen);\n};\n\nconst getSelectionSummary = (): string => {\n  if (!additionalExpenses) return 'No selection made';\n  return additionalExpenses === 'yes' \n    ? 'You have additional education expenses'\n    : 'You do not have additional education expenses';\n};\n\nconst renderIncludedItems = () => (\n  <div className=\"expense-category\">\n    <h4>Examples of eligible education expenses</h4>\n    <ul className=\"expense-list\">\n      {expenseCategories.included.map((expense, index) => (\n        <li key={index} className=\"expense-item\">\n          <strong>{expense.item}</strong>\n          <span>{expense.description}</span>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nconst renderExcludedItems = () => (\n  <div className=\"expense-category\">\n    <h4>Do not include these items</h4>\n    <ul className=\"expense-list\">\n      {expenseCategories.excluded.map((expense, index) => (\n        <li key={index} className=\"expense-item\">\n          <strong>{expense.item}</strong>\n          <span>{expense.reason}</span>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\n<div className=\"question-help-container\">\n  <form className=\"expense-form\">\n    <GoabFormItem\n      label=\"Do you have additional education expenses?\"\n      helpText=\"You can request this money now or at any time during your program. Click below for examples of what qualifies.\"\n      error={validationError}\n      required\n      mb=\"m\">\n      <GoabRadioGroup \n        name=\"additional\" \n        value={additionalExpenses}\n        onChange={handleRadioChange}\n        error={!!validationError}>\n        <GoabRadioItem \n          label=\"Yes, I have additional education expenses\" \n          value=\"yes\" \n          name=\"additional\" \n        />\n        <GoabRadioItem \n          label=\"No, I do not have additional education expenses\" \n          value=\"no\" \n          name=\"additional\" \n        />\n      </GoabRadioGroup>\n    </GoabFormItem>\n\n    <GoabDetails \n      heading=\"What is considered an additional education expense?\" \n      onToggle={handleDetailsToggle}>\n      <GoabBlock gap=\"l\" mt=\"m\">\n        {renderIncludedItems()}\n        {renderExcludedItems()}\n        \n        <div className=\"additional-info\">\n          <GoabCallout type=\"information\" heading=\"Important Note\">\n            <p>\n              Only submit expenses that are directly related to your education or training program. \n              All expenses must be supported by receipts or documentation.\n            </p>\n          </GoabCallout>\n        </div>\n      </GoabBlock>\n    </GoabDetails>\n\n    {additionalExpenses && (\n      <div className=\"selection-summary\">\n        <h3>Your Selection</h3>\n        <p>{getSelectionSummary()}</p>\n      </div>\n    )}\n\n    <div className=\"form-actions\">\n      <GoabButton \n        type=\"primary\" \n        onClick={handleSubmit}\n        disabled={!additionalExpenses || isSubmitted}>\n        {isSubmitted ? 'Response saved' : 'Continue'}\n      </GoabButton>\n    </div>\n  </form>\n</div>\n\n/* CSS */\n.question-help-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.form-header {\n  margin-bottom: var(--goa-space-xl);\n  text-align: center;\n}\n\n.form-header h1 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-text);\n}\n\n.form-description {\n  margin: 0;\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-l);\n}\n\n.expense-form {\n  margin-bottom: var(--goa-space-xl);\n}\n\n.expense-details {\n  margin: var(--goa-space-l) 0;\n}\n\n.expense-category {\n  margin-bottom: var(--goa-space-l);\n}\n\n.category-title {\n  margin: 0 0 var(--goa-space-m) 0;\n  color: var(--goa-color-text);\n  font-size: var(--goa-font-size-l);\n}\n\n.expense-list {\n  margin: 0;\n  padding-left: var(--goa-space-l);\n  list-style: none;\n}\n\n.expense-item {\n  margin-bottom: var(--goa-space-m);\n  padding: var(--goa-space-s);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n  display: flex;\n  flex-direction: column;\n}\n\n.expense-name {\n  color: var(--goa-color-text);\n  font-weight: 600;\n  margin-bottom: var(--goa-space-xs);\n}\n\n.expense-description,\n.expense-reason {\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-s);\n  line-height: 1.4;\n}\n\n.included-list .expense-item {\n  border-left: 4px solid var(--goa-color-success);\n}\n\n.excluded-list .expense-item {\n  border-left: 4px solid var(--goa-color-emergency);\n}\n\n.selection-summary {\n  margin: var(--goa-space-l) 0;\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n  border-left: 4px solid var(--goa-color-interactive);\n}\n\n.selection-summary h3 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-text);\n}\n\n.summary-text {\n  margin: 0;\n  color: var(--goa-color-text);\n  font-weight: 600;\n}\n\n.next-steps {\n  margin: var(--goa-space-s) 0 0 0;\n  color: var(--goa-color-text-secondary);\n}\n\n.form-actions {\n  display: flex;\n  gap: var(--goa-space-m);\n  margin-top: var(--goa-space-xl);\n}\n\n.additional-info {\n  margin-top: var(--goa-space-l);\n}\n\n.contact-info {\n  margin-top: var(--goa-space-m);\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.contact-info h4 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-text);\n}\n\n.contact-info p {\n  margin: 0;\n  color: var(--goa-color-text);\n}\n\n.contact-info a {\n  color: var(--goa-color-interactive);\n  text-decoration: underline;\n}\n\n.completion-message {\n  margin-top: var(--goa-space-xl);\n}\n\n.help-usage-guide {\n  margin-top: var(--goa-space-2xl);\n  padding: var(--goa-space-l);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n  border-left: 4px solid var(--goa-color-interactive);\n}\n\n.help-usage-guide h2 {\n  margin: 0 0 var(--goa-space-m) 0;\n  color: var(--goa-color-text);\n}\n\n.guide-list {\n  margin: 0;\n  padding-left: var(--goa-space-l);\n}\n\n.guide-list li {\n  margin-bottom: var(--goa-space-s);\n  line-height: 1.5;\n}\n\n.guide-list strong {\n  color: var(--goa-color-text);\n}"
    },
    "angular": {
      "complete": "export class ShowAListToHelpAnswerAQuestionComponent {\n  form!: FormGroup;\n  additionalExpenses: string = '';\n  validationError: string = '';\n  isSubmitted: boolean = false;\n  expandedDetails: boolean = false;\n\n  expenseCategories = {\n    included: [\n      {\n        item: 'Laptop and computer hardware',\n        description: 'Desktop computers, laptops, tablets, keyboards, mice, monitors'\n      },\n      {\n        item: 'Computer apps and subscriptions',\n        description: 'Software licenses, cloud storage, productivity applications'\n      },\n      {\n        item: 'Home internet',\n        description: 'Monthly internet service costs for remote learning'\n      },\n      {\n        item: 'Testing and exam fees',\n        description: 'Certification exams, professional licensing tests, placement tests'\n      },\n      {\n        item: 'Work or school clothing',\n        description: 'Safety equipment, uniforms, work boots, lab coats'\n      }\n    ],\n    excluded: [\n      {\n        item: 'Tuition',\n        reason: 'Covered under separate tuition assistance program'\n      },\n      {\n        item: 'Mandatory fees',\n        reason: 'Included in standard program costs'\n      },\n      {\n        item: 'Books and supplies',\n        reason: 'Provided through textbook allowance'\n      },\n      {\n        item: 'School association fees',\n        reason: 'Not directly related to educational requirements'\n      }\n    ]\n  };\n\n  constructor(private fb: FormBuilder) {\n    this.form = this.fb.group({\n      additional: ['', Validators.required]\n    });\n  }\n\n  ngOnInit() {\n    this.form.get('additional')?.valueChanges.subscribe(value => {\n      this.additionalExpenses = value;\n      if (this.validationError) {\n        this.validationError = '';\n      }\n      console.log('Additional expenses selection:', value);\n    });\n  }\n\n  validateSelection(): boolean {\n    if (!this.additionalExpenses) {\n      this.validationError = 'Please select whether you have additional education expenses';\n      return false;\n    }\n    \n    this.validationError = '';\n    return true;\n  }\n\n  handleSubmit() {\n    if (!this.validateSelection()) {\n      return;\n    }\n    \n    this.isSubmitted = true;\n    \n    const submissionData = {\n      hasAdditionalExpenses: this.additionalExpenses === 'yes',\n      userSelection: this.additionalExpenses,\n      timestamp: new Date().toISOString()\n    };\n    \n    console.log('Form submitted:', submissionData);\n  }\n\n  handleDetailsToggle(isOpen: boolean) {\n    this.expandedDetails = isOpen;\n    console.log('Details section toggled:', isOpen);\n  }\n\n  handleReset() {\n    this.form.reset();\n    this.additionalExpenses = '';\n    this.validationError = '';\n    this.isSubmitted = false;\n    this.expandedDetails = false;\n  }\n\n  getSelectionSummary(): string {\n    if (!this.additionalExpenses) return 'No selection made';\n    return this.additionalExpenses === 'yes' \n      ? 'You have additional education expenses'\n      : 'You do not have additional education expenses';\n  }\n\n  getNextStepsMessage(): string {\n    if (this.additionalExpenses === 'yes') {\n      return 'You will be able to submit receipts and documentation for your additional expenses in the next section.';\n    } else {\n      return 'You can always add additional expenses later if your situation changes.';\n    }\n  }\n\n  getSubmitButtonText(): string {\n    return this.isSubmitted ? 'Response saved' : 'Continue';\n  }\n\n  isSubmitDisabled(): boolean {\n    return !this.additionalExpenses || this.isSubmitted;\n  }\n\n  isResetDisabled(): boolean {\n    return !this.additionalExpenses || this.isSubmitted;\n  }\n}",
      "key": "form!: FormGroup;\nadditionalExpenses: string = '';\nvalidationError: string = '';\nisSubmitted: boolean = false;\nexpandedDetails: boolean = false;\n\nexpenseCategories = {\n  included: [\n    {\n      item: 'Laptop and computer hardware',\n      description: 'Desktop computers, laptops, tablets, keyboards, mice, monitors'\n    },\n    {\n      item: 'Computer apps and subscriptions',\n      description: 'Software licenses, cloud storage, productivity applications'\n    },\n    {\n      item: 'Testing and exam fees',\n      description: 'Certification exams, professional licensing tests, placement tests'\n    }\n  ],\n  excluded: [\n    {\n      item: 'Tuition',\n      reason: 'Covered under separate tuition assistance program'\n    },\n    {\n      item: 'Mandatory fees',\n      reason: 'Included in standard program costs'\n    }\n  ]\n};\n\nconstructor(private fb: FormBuilder) {\n  this.form = this.fb.group({\n    additional: ['', Validators.required]\n  });\n}\n\nngOnInit() {\n  this.form.get('additional')?.valueChanges.subscribe(value => {\n    this.additionalExpenses = value;\n    if (this.validationError) {\n      this.validationError = '';\n    }\n  });\n}\n\nvalidateSelection(): boolean {\n  if (!this.additionalExpenses) {\n    this.validationError = 'Please select whether you have additional education expenses';\n    return false;\n  }\n  \n  this.validationError = '';\n  return true;\n}\n\nhandleSubmit() {\n  if (!this.validateSelection()) {\n    return;\n  }\n  \n  this.isSubmitted = true;\n  \n  const submissionData = {\n    hasAdditionalExpenses: this.additionalExpenses === 'yes',\n    userSelection: this.additionalExpenses,\n    timestamp: new Date().toISOString()\n  };\n  \n  console.log('Form submitted:', submissionData);\n}\n\nhandleDetailsToggle(isOpen: boolean) {\n  this.expandedDetails = isOpen;\n}\n\ngetSelectionSummary(): string {\n  if (!this.additionalExpenses) return 'No selection made';\n  return this.additionalExpenses === 'yes' \n    ? 'You have additional education expenses'\n    : 'You do not have additional education expenses';\n}\n\n<!-- Template -->\n<div class=\"question-help-container\">\n  <form class=\"expense-form\" [formGroup]=\"form\" (ngSubmit)=\"handleSubmit()\">\n    <goab-form-item\n      label=\"Do you have additional education expenses?\"\n      helpText=\"You can request this money now or at any time during your program. Click below for examples of what qualifies.\"\n      [error]=\"validationError\"\n      [required]=\"true\"\n      mb=\"m\">\n      <goab-radio-group \n        name=\"additional\" \n        formControlName=\"additional\"\n        [error]=\"!!validationError\">\n        <goab-radio-item \n          label=\"Yes, I have additional education expenses\" \n          value=\"yes\" \n          name=\"additional\">\n        </goab-radio-item>\n        <goab-radio-item \n          label=\"No, I do not have additional education expenses\" \n          value=\"no\" \n          name=\"additional\">\n        </goab-radio-item>\n      </goab-radio-group>\n    </goab-form-item>\n\n    <goab-details \n      heading=\"What is considered an additional education expense?\" \n      (onToggle)=\"handleDetailsToggle($event)\">\n      <goab-block gap=\"l\" mt=\"m\">\n        <div class=\"expense-category\">\n          <h4>Examples of eligible education expenses</h4>\n          <ul class=\"expense-list included-list\">\n            <li class=\"expense-item\" *ngFor=\"let expense of expenseCategories.included\">\n              <strong class=\"expense-name\">{{ expense.item }}</strong>\n              <span class=\"expense-description\">{{ expense.description }}</span>\n            </li>\n          </ul>\n        </div>\n        \n        <div class=\"expense-category\">\n          <h4>Do not include these items</h4>\n          <ul class=\"expense-list excluded-list\">\n            <li class=\"expense-item\" *ngFor=\"let expense of expenseCategories.excluded\">\n              <strong class=\"expense-name\">{{ expense.item }}</strong>\n              <span class=\"expense-reason\">{{ expense.reason }}</span>\n            </li>\n          </ul>\n        </div>\n        \n        <div class=\"additional-info\">\n          <goab-callout type=\"information\" heading=\"Important Note\">\n            <p>\n              Only submit expenses that are directly related to your education or training program. \n              All expenses must be supported by receipts or documentation.\n            </p>\n          </goab-callout>\n        </div>\n      </goab-block>\n    </goab-details>\n\n    <div class=\"selection-summary\" *ngIf=\"additionalExpenses\">\n      <h3>Your Selection</h3>\n      <p class=\"summary-text\">{{ getSelectionSummary() }}</p>\n      <p class=\"next-steps\">{{ getNextStepsMessage() }}</p>\n    </div>\n\n    <div class=\"form-actions\">\n      <goab-button \n        type=\"primary\" \n        (onClick)=\"handleSubmit()\"\n        [disabled]=\"isSubmitDisabled()\">\n        {{ getSubmitButtonText() }}\n      </goab-button>\n      \n      <goab-button \n        type=\"secondary\" \n        (onClick)=\"handleReset()\"\n        [disabled]=\"isResetDisabled()\"\n        *ngIf=\"!isSubmitted\">\n        Reset\n      </goab-button>\n    </div>\n  </form>\n\n  <div class=\"completion-message\" role=\"alert\" *ngIf=\"isSubmitted\">\n    <goab-callout type=\"success\" heading=\"Response Recorded\">\n      <p>\n        Your response has been saved. {{ additionalExpenses === 'yes' \n          ? 'You will be directed to the expense documentation section next.'\n          : 'You can continue with the rest of your application.' }}\n      </p>\n    </goab-callout>\n  </div>\n</div>"
    }
  },
  "tags": [
    "form-help",
    "expandable-details",
    "contextual-guidance",
    "question-support",
    "example-lists",
    "progressive-disclosure",
    "form-pattern",
    "user-assistance",
    "information-design",
    "decision-support"
  ]
}