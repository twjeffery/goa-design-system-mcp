{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "reset-date-picker-field",
  "recipeName": "Reset Date Picker Field",
  "category": "form-control",
  "summary": "Programmatically set or clear date picker values with control buttons for flexible date field management",
  "serviceContext": {
    "useCase": "Provide users with convenient ways to reset or preset date fields, improving form usability and reducing manual input errors",
    "userType": "both",
    "governmentServiceFlows": [
      "When citizens need to clear date fields in applications or forms",
      "When workers need to reset date filters or preset dates for efficiency",
      "When providing default dates based on context or previous selections",
      "When allowing users to quickly clear invalid or incorrect date entries"
    ],
    "relatedPatterns": [
      "ask-a-user-for-an-address",
      "ask-a-user-for-direct-deposit-information",
      "disabled-button-with-a-required-field"
    ]
  },
  "components": [
    {
      "componentName": "GoabDatePicker",
      "role": "Date input control",
      "purpose": "Provide date selection interface with programmatic value setting and clearing capabilities"
    },
    {
      "componentName": "GoabFormItem",
      "role": "Form field container",
      "purpose": "Wrap date picker with proper labeling and layout structure"
    },
    {
      "componentName": "GoabButton",
      "role": "Control actions",
      "purpose": "Trigger date setting and clearing operations"
    },
    {
      "componentName": "GoabButtonGroup",
      "role": "Action container",
      "purpose": "Group related control buttons with consistent alignment and spacing"
    }
  ],
  "codeReference": {
    "exampleFile": "reset-date-picker-field.tsx",
    "linesOfCode": 256,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "medium",
    "keyPatterns": [
      "State management for date value with useState hook",
      "Event handling for date picker onChange events",
      "Programmatic date calculation and setting",
      "Controlled component pattern for date input",
      "Value clearing with undefined state management"
    ],
    "designPatterns": [
      "Controlled form input",
      "Programmatic value manipulation",
      "User-friendly date management",
      "Reset functionality pattern"
    ],
    "accessibility": [
      "Proper form labeling with GoabFormItem",
      "Clear button labels indicating their purpose",
      "Keyboard accessible date picker control",
      "Screen reader friendly date value management",
      "Logical tab order for control buttons"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabButton, GoabButtonGroup, GoabDatePicker, GoabFormItem } from \"@abgov/react-components\";\nimport { GoabDatePickerOnChangeDetail } from \"@abgov/ui-components-common\";\nimport { useState } from \"react\";\n\nexport default function ResetDatePickerField() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>();\n  const [formSubmitted, setFormSubmitted] = useState<boolean>(false);\n  const [validationError, setValidationError] = useState<string>('');\n\n  const handleDateChange = (event: GoabDatePickerOnChangeDetail) => {\n    const newDate = event.value as Date;\n    setSelectedDate(newDate);\n    \n    // Clear validation error when user selects a date\n    if (validationError) {\n      setValidationError('');\n    }\n    \n    // Log date selection for analytics\n    console.log('Date selected:', newDate);\n  };\n\n  const setDateToLastWeek = () => {\n    const lastWeekDate = new Date();\n    lastWeekDate.setDate(lastWeekDate.getDate() - 7);\n    setSelectedDate(lastWeekDate);\n    \n    // Clear any existing validation errors\n    setValidationError('');\n    \n    console.log('Date set to last week:', lastWeekDate);\n  };\n\n  const setDateToToday = () => {\n    const today = new Date();\n    setSelectedDate(today);\n    \n    // Clear any existing validation errors\n    setValidationError('');\n    \n    console.log('Date set to today:', today);\n  };\n\n  const setDateToNextMonth = () => {\n    const nextMonth = new Date();\n    nextMonth.setMonth(nextMonth.getMonth() + 1);\n    setSelectedDate(nextMonth);\n    \n    setValidationError('');\n    \n    console.log('Date set to next month:', nextMonth);\n  };\n\n  const clearDateValue = () => {\n    setSelectedDate(undefined);\n    \n    // Clear any existing validation errors\n    setValidationError('');\n    \n    console.log('Date cleared');\n  };\n\n  const validateDate = (date: Date | undefined): boolean => {\n    if (!date) {\n      setValidationError('Date is required');\n      return false;\n    }\n    \n    const today = new Date();\n    const oneYearAgo = new Date();\n    oneYearAgo.setFullYear(today.getFullYear() - 1);\n    \n    const oneYearFromNow = new Date();\n    oneYearFromNow.setFullYear(today.getFullYear() + 1);\n    \n    if (date < oneYearAgo) {\n      setValidationError('Date cannot be more than one year in the past');\n      return false;\n    }\n    \n    if (date > oneYearFromNow) {\n      setValidationError('Date cannot be more than one year in the future');\n      return false;\n    }\n    \n    setValidationError('');\n    return true;\n  };\n\n  const handleSubmit = () => {\n    if (validateDate(selectedDate)) {\n      setFormSubmitted(true);\n      console.log('Form submitted with date:', selectedDate);\n    }\n  };\n\n  const resetForm = () => {\n    setSelectedDate(undefined);\n    setFormSubmitted(false);\n    setValidationError('');\n    console.log('Form reset');\n  };\n\n  const isDateSelected = (): boolean => {\n    return selectedDate !== undefined;\n  };\n\n  const getDateDisplayString = (): string => {\n    if (!selectedDate) return 'No date selected';\n    return selectedDate.toLocaleDateString('en-CA', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const getRelativeDateDescription = (): string => {\n    if (!selectedDate) return '';\n    \n    const today = new Date();\n    const diffTime = selectedDate.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) return 'Today';\n    if (diffDays === 1) return 'Tomorrow';\n    if (diffDays === -1) return 'Yesterday';\n    if (diffDays > 0) return `${diffDays} days from now`;\n    return `${Math.abs(diffDays)} days ago`;\n  };\n\n  return (\n    <div className=\"date-picker-reset-container\">\n      <GoabFormItem \n        label=\"Select Date\" \n        error={validationError}\n        required\n        helperText=\"Choose a date within the past or next year\">\n        <GoabDatePicker\n          name=\"selectedDate\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          mb=\"m\"\n          aria-describedby=\"date-info\"\n          disabled={formSubmitted}\n        />\n      </GoabFormItem>\n\n      <div id=\"date-info\" className=\"date-info-section\">\n        <div className=\"selected-date-display\">\n          <strong>Selected Date:</strong> {getDateDisplayString()}\n          {isDateSelected() && (\n            <span className=\"relative-date\"> ({getRelativeDateDescription()})</span>\n          )}\n        </div>\n      </div>\n\n      <div className=\"control-buttons-section\">\n        <h4>Quick Date Options</h4>\n        <GoabButtonGroup alignment=\"start\" gap=\"s\">\n          <GoabButton \n            onClick={setDateToToday}\n            disabled={formSubmitted}\n            type=\"secondary\"\n            aria-label=\"Set date to today\">\n            Today\n          </GoabButton>\n          <GoabButton \n            onClick={setDateToLastWeek}\n            disabled={formSubmitted}\n            type=\"secondary\"\n            aria-label=\"Set date to one week ago\">\n            Last Week\n          </GoabButton>\n          <GoabButton \n            onClick={setDateToNextMonth}\n            disabled={formSubmitted}\n            type=\"secondary\"\n            aria-label=\"Set date to one month from now\">\n            Next Month\n          </GoabButton>\n        </GoabButtonGroup>\n      </div>\n\n      <div className=\"action-buttons-section\">\n        <GoabButtonGroup alignment=\"start\" gap=\"s\">\n          <GoabButton \n            onClick={clearDateValue}\n            disabled={formSubmitted}\n            type=\"secondary\"\n            aria-label=\"Clear selected date\">\n            Clear Date\n          </GoabButton>\n          <GoabButton \n            onClick={handleSubmit}\n            disabled={!isDateSelected() || formSubmitted}\n            type=\"primary\"\n            aria-label=\"Submit form with selected date\">\n            Submit\n          </GoabButton>\n          {formSubmitted && (\n            <GoabButton \n              onClick={resetForm}\n              type=\"secondary\"\n              aria-label=\"Reset form to initial state\">\n              Reset Form\n            </GoabButton>\n          )}\n        </GoabButtonGroup>\n      </div>\n\n      {formSubmitted && (\n        <div className=\"success-message\" role=\"alert\">\n          <h3>Form Submitted Successfully</h3>\n          <p>Your selected date ({getDateDisplayString()}) has been recorded.</p>\n        </div>\n      )}\n    </div>\n  );\n}",
      "key": "const [selectedDate, setSelectedDate] = useState<Date | undefined>();\nconst [validationError, setValidationError] = useState<string>('');\n\nconst handleDateChange = (event: GoabDatePickerOnChangeDetail) => {\n  const newDate = event.value as Date;\n  setSelectedDate(newDate);\n  \n  // Clear validation error when user selects a date\n  if (validationError) {\n    setValidationError('');\n  }\n  \n  console.log('Date selected:', newDate);\n};\n\nconst setDateToLastWeek = () => {\n  const lastWeekDate = new Date();\n  lastWeekDate.setDate(lastWeekDate.getDate() - 7);\n  setSelectedDate(lastWeekDate);\n  setValidationError('');\n  console.log('Date set to last week:', lastWeekDate);\n};\n\nconst setDateToToday = () => {\n  const today = new Date();\n  setSelectedDate(today);\n  setValidationError('');\n  console.log('Date set to today:', today);\n};\n\nconst clearDateValue = () => {\n  setSelectedDate(undefined);\n  setValidationError('');\n  console.log('Date cleared');\n};\n\nconst validateDate = (date: Date | undefined): boolean => {\n  if (!date) {\n    setValidationError('Date is required');\n    return false;\n  }\n  \n  const today = new Date();\n  const oneYearAgo = new Date();\n  oneYearAgo.setFullYear(today.getFullYear() - 1);\n  \n  const oneYearFromNow = new Date();\n  oneYearFromNow.setFullYear(today.getFullYear() + 1);\n  \n  if (date < oneYearAgo) {\n    setValidationError('Date cannot be more than one year in the past');\n    return false;\n  }\n  \n  if (date > oneYearFromNow) {\n    setValidationError('Date cannot be more than one year in the future');\n    return false;\n  }\n  \n  setValidationError('');\n  return true;\n};\n\nconst isDateSelected = (): boolean => {\n  return selectedDate !== undefined;\n};\n\nconst getDateDisplayString = (): string => {\n  if (!selectedDate) return 'No date selected';\n  return selectedDate.toLocaleDateString('en-CA', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\n\n<GoabFormItem \n  label=\"Select Date\" \n  error={validationError}\n  required\n  helperText=\"Choose a date within the past or next year\">\n  <GoabDatePicker\n    name=\"selectedDate\"\n    value={selectedDate}\n    onChange={handleDateChange}\n    mb=\"m\"\n    aria-describedby=\"date-info\"\n  />\n</GoabFormItem>\n\n<div id=\"date-info\" className=\"date-info-section\">\n  <div className=\"selected-date-display\">\n    <strong>Selected Date:</strong> {getDateDisplayString()}\n  </div>\n</div>\n\n<div className=\"control-buttons-section\">\n  <h4>Quick Date Options</h4>\n  <GoabButtonGroup alignment=\"start\" gap=\"s\">\n    <GoabButton \n      onClick={setDateToToday}\n      type=\"secondary\"\n      aria-label=\"Set date to today\">\n      Today\n    </GoabButton>\n    <GoabButton \n      onClick={setDateToLastWeek}\n      type=\"secondary\"\n      aria-label=\"Set date to one week ago\">\n      Last Week\n    </GoabButton>\n    <GoabButton \n      onClick={clearDateValue}\n      type=\"secondary\"\n      aria-label=\"Clear selected date\">\n      Clear Date\n    </GoabButton>\n  </GoabButtonGroup>\n</div>\n\n/* CSS */\n.date-picker-reset-container {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.date-info-section {\n  margin-bottom: var(--goa-space-l);\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.selected-date-display {\n  font-size: var(--goa-font-size-m);\n  color: var(--goa-color-text);\n}\n\n.relative-date {\n  color: var(--goa-color-text-secondary);\n  font-weight: normal;\n}\n\n.control-buttons-section {\n  margin-bottom: var(--goa-space-l);\n}\n\n.control-buttons-section h4 {\n  margin-bottom: var(--goa-space-s);\n  color: var(--goa-color-text);\n}\n\n.action-buttons-section {\n  margin-top: var(--goa-space-l);\n}\n\n.success-message {\n  margin-top: var(--goa-space-xl);\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-success-light);\n  border-left: 4px solid var(--goa-color-success);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.success-message h3 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-success-dark);\n}\n\n.success-message p {\n  margin: 0;\n  color: var(--goa-color-success-dark);\n}"
    },
    "angular": {
      "complete": "export class ResetDatePickerFieldComponent {\n  selectedDate: Date | undefined = undefined;\n  validationError: string = '';\n  formSubmitted: boolean = false;\n\n  handleDateChange(event: GoabDatePickerOnChangeDetail) {\n    const newDate = event.value as Date;\n    this.selectedDate = newDate;\n    \n    // Clear validation error when user selects a date\n    if (this.validationError) {\n      this.validationError = '';\n    }\n    \n    console.log('Date selected:', newDate);\n  }\n\n  setDateToLastWeek() {\n    const lastWeekDate = new Date();\n    lastWeekDate.setDate(lastWeekDate.getDate() - 7);\n    this.selectedDate = lastWeekDate;\n    this.validationError = '';\n    console.log('Date set to last week:', lastWeekDate);\n  }\n\n  setDateToToday() {\n    const today = new Date();\n    this.selectedDate = today;\n    this.validationError = '';\n    console.log('Date set to today:', today);\n  }\n\n  setDateToNextMonth() {\n    const nextMonth = new Date();\n    nextMonth.setMonth(nextMonth.getMonth() + 1);\n    this.selectedDate = nextMonth;\n    this.validationError = '';\n    console.log('Date set to next month:', nextMonth);\n  }\n\n  clearDateValue() {\n    this.selectedDate = undefined;\n    this.validationError = '';\n    console.log('Date cleared');\n  }\n\n  validateDate(date: Date | undefined): boolean {\n    if (!date) {\n      this.validationError = 'Date is required';\n      return false;\n    }\n    \n    const today = new Date();\n    const oneYearAgo = new Date();\n    oneYearAgo.setFullYear(today.getFullYear() - 1);\n    \n    const oneYearFromNow = new Date();\n    oneYearFromNow.setFullYear(today.getFullYear() + 1);\n    \n    if (date < oneYearAgo) {\n      this.validationError = 'Date cannot be more than one year in the past';\n      return false;\n    }\n    \n    if (date > oneYearFromNow) {\n      this.validationError = 'Date cannot be more than one year in the future';\n      return false;\n    }\n    \n    this.validationError = '';\n    return true;\n  }\n\n  handleSubmit() {\n    if (this.validateDate(this.selectedDate)) {\n      this.formSubmitted = true;\n      console.log('Form submitted with date:', this.selectedDate);\n    }\n  }\n\n  resetForm() {\n    this.selectedDate = undefined;\n    this.formSubmitted = false;\n    this.validationError = '';\n    console.log('Form reset');\n  }\n\n  isDateSelected(): boolean {\n    return this.selectedDate !== undefined;\n  }\n\n  getDateDisplayString(): string {\n    if (!this.selectedDate) return 'No date selected';\n    return this.selectedDate.toLocaleDateString('en-CA', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  }\n\n  getRelativeDateDescription(): string {\n    if (!this.selectedDate) return '';\n    \n    const today = new Date();\n    const diffTime = this.selectedDate.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 0) return 'Today';\n    if (diffDays === 1) return 'Tomorrow';\n    if (diffDays === -1) return 'Yesterday';\n    if (diffDays > 0) return `${diffDays} days from now`;\n    return `${Math.abs(diffDays)} days ago`;\n  }\n}",
      "key": "selectedDate: Date | undefined = undefined;\nvalidationError: string = '';\nformSubmitted: boolean = false;\n\nhandleDateChange(event: GoabDatePickerOnChangeDetail) {\n  const newDate = event.value as Date;\n  this.selectedDate = newDate;\n  \n  if (this.validationError) {\n    this.validationError = '';\n  }\n  \n  console.log('Date selected:', newDate);\n}\n\nsetDateToLastWeek() {\n  const lastWeekDate = new Date();\n  lastWeekDate.setDate(lastWeekDate.getDate() - 7);\n  this.selectedDate = lastWeekDate;\n  this.validationError = '';\n  console.log('Date set to last week:', lastWeekDate);\n}\n\nsetDateToToday() {\n  const today = new Date();\n  this.selectedDate = today;\n  this.validationError = '';\n  console.log('Date set to today:', today);\n}\n\nclearDateValue() {\n  this.selectedDate = undefined;\n  this.validationError = '';\n  console.log('Date cleared');\n}\n\nvalidateDate(date: Date | undefined): boolean {\n  if (!date) {\n    this.validationError = 'Date is required';\n    return false;\n  }\n  \n  const today = new Date();\n  const oneYearAgo = new Date();\n  oneYearAgo.setFullYear(today.getFullYear() - 1);\n  \n  const oneYearFromNow = new Date();\n  oneYearFromNow.setFullYear(today.getFullYear() + 1);\n  \n  if (date < oneYearAgo) {\n    this.validationError = 'Date cannot be more than one year in the past';\n    return false;\n  }\n  \n  if (date > oneYearFromNow) {\n    this.validationError = 'Date cannot be more than one year in the future';\n    return false;\n  }\n  \n  this.validationError = '';\n  return true;\n}\n\nisDateSelected(): boolean {\n  return this.selectedDate !== undefined;\n}\n\ngetDateDisplayString(): string {\n  if (!this.selectedDate) return 'No date selected';\n  return this.selectedDate.toLocaleDateString('en-CA', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n}\n\n<!-- Template -->\n<div class=\"date-picker-reset-container\">\n  <goab-form-item \n    label=\"Select Date\" \n    [error]=\"validationError\"\n    required\n    helperText=\"Choose a date within the past or next year\">\n    <goab-date-picker\n      name=\"selectedDate\"\n      [value]=\"selectedDate\"\n      (onChange)=\"handleDateChange($event)\"\n      mb=\"m\"\n      aria-describedby=\"date-info\"\n      [disabled]=\"formSubmitted\">\n    </goab-date-picker>\n  </goab-form-item>\n\n  <div id=\"date-info\" class=\"date-info-section\">\n    <div class=\"selected-date-display\">\n      <strong>Selected Date:</strong> {{ getDateDisplayString() }}\n      <span class=\"relative-date\" *ngIf=\"isDateSelected()\"> ({{ getRelativeDateDescription() }})</span>\n    </div>\n  </div>\n\n  <div class=\"control-buttons-section\">\n    <h4>Quick Date Options</h4>\n    <goab-button-group alignment=\"start\" gap=\"s\">\n      <goab-button \n        (onClick)=\"setDateToToday()\"\n        [disabled]=\"formSubmitted\"\n        type=\"secondary\"\n        aria-label=\"Set date to today\">\n        Today\n      </goab-button>\n      <goab-button \n        (onClick)=\"setDateToLastWeek()\"\n        [disabled]=\"formSubmitted\"\n        type=\"secondary\"\n        aria-label=\"Set date to one week ago\">\n        Last Week\n      </goab-button>\n      <goab-button \n        (onClick)=\"clearDateValue()\"\n        [disabled]=\"formSubmitted\"\n        type=\"secondary\"\n        aria-label=\"Clear selected date\">\n        Clear Date\n      </goab-button>\n    </goab-button-group>\n  </div>\n\n  <div class=\"action-buttons-section\">\n    <goab-button-group alignment=\"start\" gap=\"s\">\n      <goab-button \n        (onClick)=\"handleSubmit()\"\n        [disabled]=\"!isDateSelected() || formSubmitted\"\n        type=\"primary\"\n        aria-label=\"Submit form with selected date\">\n        Submit\n      </goab-button>\n      <goab-button \n        (onClick)=\"resetForm()\"\n        *ngIf=\"formSubmitted\"\n        type=\"secondary\"\n        aria-label=\"Reset form to initial state\">\n        Reset Form\n      </goab-button>\n    </goab-button-group>\n  </div>\n\n  <div class=\"success-message\" role=\"alert\" *ngIf=\"formSubmitted\">\n    <h3>Form Submitted Successfully</h3>\n    <p>Your selected date ({{ getDateDisplayString() }}) has been recorded.</p>\n  </div>\n</div>"
    }
  },
  "tags": [
    "date-picker",
    "form-control",
    "reset-functionality",
    "date-management",
    "programmatic-control",
    "form-field",
    "date-input",
    "value-manipulation",
    "form-utility",
    "date-selection"
  ]
}