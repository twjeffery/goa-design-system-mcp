{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "show-a-section-title-on-a-question-page",
  "recipeName": "Show a Section Title on a Question Page",
  "category": "form-pattern",
  "summary": "Display clear section titles and navigation context on question pages to help users understand their progress and current location within multi-section forms",
  "serviceContext": {
    "useCase": "Provide clear context and navigation structure for users completing multi-section government forms, helping them understand which part of the process they're in and how to navigate between sections",
    "userType": "citizen",
    "governmentServiceFlows": [
      "When citizens complete lengthy applications with multiple distinct sections like personal information, employment history, or family details",
      "When forms require users to understand which category of information they're currently providing",
      "When navigation between form sections needs to be clear and accessible",
      "When users need context about their current location within a larger application process"
    ],
    "relatedPatterns": [
      "show-a-simple-progress-indicator-on-a-question-page",
      "ask-a-user-one-question-at-a-time",
      "question-page",
      "form-stepper-with-controlled-navigation"
    ]
  },
  "components": [
    {
      "componentName": "Back Link",
      "role": "Navigation element",
      "purpose": "Allow users to return to previous pages or sections with clear visual indication"
    },
    {
      "componentName": "Section Title (h3)",
      "role": "Section identifier",
      "purpose": "Clearly indicate which section of the form the user is currently completing"
    },
    {
      "componentName": "GoabFormItem",
      "role": "Question container",
      "purpose": "Present individual questions with proper labeling and form structure"
    },
    {
      "componentName": "GoabRadioGroup",
      "role": "Response selection control",
      "purpose": "Provide answer options for form questions"
    },
    {
      "componentName": "GoabButton",
      "role": "Form progression control",
      "purpose": "Allow users to save their responses and continue to the next step"
    }
  ],
  "codeReference": {
    "exampleFile": "show-a-section-title-on-a-question-page.tsx",
    "linesOfCode": 75,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "low",
    "keyPatterns": [
      "Back navigation link with custom styling and icon",
      "Section title with secondary color treatment",
      "Proper heading hierarchy for accessibility",
      "Form question with large label size for prominence",
      "Progressive form structure with save and continue action"
    ],
    "designPatterns": [
      "Clear information hierarchy",
      "Contextual navigation",
      "Section-based form organization",
      "Progressive disclosure",
      "User-centered form design"
    ],
    "accessibility": [
      "Proper heading structure maintains document outline",
      "Back link includes clear text and visual indication",
      "Form items properly labeled for screen readers",
      "Radio group has accessible name via aria-label",
      "Button clearly indicates next action"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabButton, GoabFormItem, GoabRadioGroup, GoabRadioItem, GoabInput, GoabTextArea, GoabCallout } from \"@abgov/react-components\";\nimport { GoabRadioGroupOnChangeDetail, GoabInputOnChangeDetail } from \"@abgov/ui-components-common\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function ShowASectionTitleOnAQuestionPage() {\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState<any>({\n    livesInCanada: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    address: '',\n    additionalInfo: ''\n  });\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [currentSection, setCurrentSection] = useState<string>('personal-information');\n  const [sectionProgress, setSectionProgress] = useState<any>({\n    'personal-information': { completed: false, visited: true },\n    'contact-details': { completed: false, visited: false },\n    'additional-information': { completed: false, visited: false }\n  });\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n\n  const sectionConfig = {\n    'personal-information': {\n      title: 'Personal Information',\n      description: 'Basic details about yourself',\n      backLink: '/application/start',\n      backText: 'Back to start',\n      nextSection: 'contact-details'\n    },\n    'contact-details': {\n      title: 'Contact Details',\n      description: 'How we can reach you',\n      backLink: '/application/personal-information',\n      backText: 'Back to Personal Information',\n      nextSection: 'additional-information'\n    },\n    'additional-information': {\n      title: 'Additional Information',\n      description: 'Any extra details you\\'d like to provide',\n      backLink: '/application/contact-details',\n      backText: 'Back to Contact Details',\n      nextSection: 'review'\n    }\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // Clear validation errors for this field\n    if (validationErrors[field]) {\n      setValidationErrors(prev => {\n        const updated = { ...prev };\n        delete updated[field];\n        return updated;\n      });\n    }\n    \n    console.log(`Field ${field} updated:`, value);\n  };\n\n  const handleRadioChange = (event: GoabRadioGroupOnChangeDetail) => {\n    handleInputChange('livesInCanada', event.value);\n  };\n\n  const validateCurrentSection = (): boolean => {\n    const errors: any = {};\n    let isValid = true;\n\n    switch (currentSection) {\n      case 'personal-information':\n        if (!formData.livesInCanada) {\n          errors.livesInCanada = 'Please select whether you currently live in Canada';\n          isValid = false;\n        }\n        if (!formData.firstName.trim()) {\n          errors.firstName = 'First name is required';\n          isValid = false;\n        }\n        if (!formData.lastName.trim()) {\n          errors.lastName = 'Last name is required';\n          isValid = false;\n        }\n        break;\n        \n      case 'contact-details':\n        if (!formData.email.trim()) {\n          errors.email = 'Email address is required';\n          isValid = false;\n        } else if (!isValidEmail(formData.email)) {\n          errors.email = 'Please enter a valid email address';\n          isValid = false;\n        }\n        if (!formData.address.trim()) {\n          errors.address = 'Address is required';\n          isValid = false;\n        }\n        break;\n        \n      case 'additional-information':\n        // This section has no required fields\n        break;\n    }\n\n    setValidationErrors(errors);\n    return isValid;\n  };\n\n  const isValidEmail = (email: string): boolean => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const handleSaveAndContinue = () => {\n    if (!validateCurrentSection()) {\n      console.log('Validation failed for section:', currentSection);\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    // Simulate save operation\n    setTimeout(() => {\n      // Mark current section as completed\n      const updatedProgress = {\n        ...sectionProgress,\n        [currentSection]: { completed: true, visited: true }\n      };\n      \n      const nextSection = sectionConfig[currentSection as keyof typeof sectionConfig].nextSection;\n      \n      if (nextSection && nextSection !== 'review') {\n        // Mark next section as visited\n        updatedProgress[nextSection] = { completed: false, visited: true };\n        setSectionProgress(updatedProgress);\n        setCurrentSection(nextSection);\n      } else {\n        // Navigate to review page\n        setSectionProgress(updatedProgress);\n        console.log('Navigating to review page');\n        // navigate('/application/review');\n      }\n      \n      // Track section completion\n      trackSectionCompletion(currentSection);\n      \n      setIsSubmitting(false);\n      console.log('Section saved:', currentSection, formData);\n    }, 1000);\n  };\n\n  const handleBackNavigation = () => {\n    const config = sectionConfig[currentSection as keyof typeof sectionConfig];\n    \n    // Track navigation analytics\n    trackNavigationAction('back', currentSection);\n    \n    console.log('Navigating back from:', currentSection);\n    // navigate(config.backLink);\n    \n    // For demo purposes, navigate to previous section\n    const sections = Object.keys(sectionConfig);\n    const currentIndex = sections.indexOf(currentSection);\n    if (currentIndex > 0) {\n      setCurrentSection(sections[currentIndex - 1]);\n    }\n  };\n\n  const trackSectionCompletion = (section: string) => {\n    console.log('Section completion analytics:', {\n      section,\n      timestamp: new Date().toISOString(),\n      formData: formData,\n      validationErrors: Object.keys(validationErrors).length\n    });\n  };\n\n  const trackNavigationAction = (action: string, fromSection: string) => {\n    console.log('Navigation analytics:', {\n      action,\n      fromSection,\n      timestamp: new Date().toISOString(),\n      sectionProgress\n    });\n  };\n\n  const getCurrentSectionConfig = () => {\n    return sectionConfig[currentSection as keyof typeof sectionConfig];\n  };\n\n  const getSectionCompletionRate = (): number => {\n    const completedSections = Object.values(sectionProgress).filter(section => section.completed).length;\n    const totalSections = Object.keys(sectionProgress).length;\n    return Math.round((completedSections / totalSections) * 100);\n  };\n\n  const renderPersonalInformationSection = () => (\n    <div className=\"section-content\">\n      <GoabFormItem \n        mt=\"xs\" \n        label=\"Do you currently live in Canada?\" \n        labelSize=\"large\"\n        error={validationErrors.livesInCanada}\n        required>\n        <GoabRadioGroup\n          name=\"canada\"\n          value={formData.livesInCanada}\n          ariaLabel=\"Do you currently live in Canada?\"\n          onChange={handleRadioChange}\n          error={!!validationErrors.livesInCanada}>\n          <GoabRadioItem value=\"yes\" label=\"Yes\" />\n          <GoabRadioItem value=\"no\" label=\"No\" />\n        </GoabRadioGroup>\n      </GoabFormItem>\n      \n      <GoabFormItem \n        label=\"First Name\" \n        error={validationErrors.firstName}\n        required>\n        <GoabInput\n          name=\"firstName\"\n          value={formData.firstName}\n          onChange={(e: GoabInputOnChangeDetail) => handleInputChange('firstName', e.value)}\n          placeholder=\"Enter your first name\"\n        />\n      </GoabFormItem>\n      \n      <GoabFormItem \n        label=\"Last Name\" \n        error={validationErrors.lastName}\n        required>\n        <GoabInput\n          name=\"lastName\"\n          value={formData.lastName}\n          onChange={(e: GoabInputOnChangeDetail) => handleInputChange('lastName', e.value)}\n          placeholder=\"Enter your last name\"\n        />\n      </GoabFormItem>\n    </div>\n  );\n\n  const renderContactDetailsSection = () => (\n    <div className=\"section-content\">\n      <GoabFormItem \n        label=\"Email Address\" \n        error={validationErrors.email}\n        required>\n        <GoabInput\n          type=\"email\"\n          name=\"email\"\n          value={formData.email}\n          onChange={(e: GoabInputOnChangeDetail) => handleInputChange('email', e.value)}\n          placeholder=\"Enter your email address\"\n        />\n      </GoabFormItem>\n      \n      <GoabFormItem label=\"Phone Number\">\n        <GoabInput\n          type=\"tel\"\n          name=\"phone\"\n          value={formData.phone}\n          onChange={(e: GoabInputOnChangeDetail) => handleInputChange('phone', e.value)}\n          placeholder=\"Enter your phone number (optional)\"\n        />\n      </GoabFormItem>\n      \n      <GoabFormItem \n        label=\"Address\" \n        error={validationErrors.address}\n        required>\n        <GoabTextArea\n          name=\"address\"\n          value={formData.address}\n          onChange={(e: GoabInputOnChangeDetail) => handleInputChange('address', e.value)}\n          placeholder=\"Enter your full address\"\n          rows={3}\n        />\n      </GoabFormItem>\n    </div>\n  );\n\n  const renderAdditionalInformationSection = () => (\n    <div className=\"section-content\">\n      <GoabFormItem \n        label=\"Additional Information\"\n        helperText=\"Is there anything else you'd like us to know? (Optional)\">\n        <GoabTextArea\n          name=\"additionalInfo\"\n          value={formData.additionalInfo}\n          onChange={(e: GoabInputOnChangeDetail) => handleInputChange('additionalInfo', e.value)}\n          placeholder=\"Enter any additional information...\"\n          rows={4}\n        />\n      </GoabFormItem>\n    </div>\n  );\n\n  const renderCurrentSection = () => {\n    switch (currentSection) {\n      case 'personal-information':\n        return renderPersonalInformationSection();\n      case 'contact-details':\n        return renderContactDetailsSection();\n      case 'additional-information':\n        return renderAdditionalInformationSection();\n      default:\n        return renderPersonalInformationSection();\n    }\n  };\n\n  const config = getCurrentSectionConfig();\n\n  return (\n    <div className=\"question-page-example\">\n      <div className=\"page-header\">\n        <div className=\"progress-indicator\">\n          <span className=\"progress-text\">\n            Section {Object.keys(sectionConfig).indexOf(currentSection) + 1} of {Object.keys(sectionConfig).length}\n          </span>\n          <span className=\"completion-rate\">\n            {getSectionCompletionRate()}% complete\n          </span>\n        </div>\n      </div>\n\n      <div className=\"question-page-content\">\n        <button \n          type=\"button\"\n          className=\"back-link\" \n          onClick={handleBackNavigation}\n          aria-label={config.backText}>\n          {config.backText}\n        </button>\n        \n        <h3 className=\"section-title\">{config.title}</h3>\n        \n        {config.description && (\n          <p className=\"section-description\">{config.description}</p>\n        )}\n        \n        <form className=\"section-form\">\n          {renderCurrentSection()}\n          \n          <GoabButton \n            type=\"primary\" \n            mt=\"2xl\"\n            onClick={handleSaveAndContinue}\n            disabled={isSubmitting}>\n            {isSubmitting ? 'Saving...' : 'Save and continue'}\n          </GoabButton>\n        </form>\n        \n        {Object.keys(validationErrors).length > 0 && (\n          <GoabCallout type=\"emergency\" heading=\"Please fix the following errors:\">\n            <ul className=\"error-list\">\n              {Object.values(validationErrors).map((error, index) => (\n                <li key={index}>{error as string}</li>\n              ))}\n            </ul>\n          </GoabCallout>\n        )}\n      </div>\n\n      <div className=\"section-navigation-guide\">\n        <h2>Section Navigation Best Practices</h2>\n        <ul className=\"guide-list\">\n          <li>\n            <strong>Clear section titles:</strong> Use descriptive titles that clearly indicate the type of information being collected\n          </li>\n          <li>\n            <strong>Consistent back navigation:</strong> Always provide a way to return to the previous step\n          </li>\n          <li>\n            <strong>Progress indication:</strong> Show users where they are in the overall process\n          </li>\n          <li>\n            <strong>Section descriptions:</strong> Provide brief context about what information is needed\n          </li>\n          <li>\n            <strong>Save functionality:</strong> Allow users to save progress before moving between sections\n          </li>\n        </ul>\n      </div>\n\n      {/* CSS included inline for demo purposes */}\n      <style jsx>{`\n        .question-page-example {\n          max-width: 800px;\n          margin: 0 auto;\n          padding: var(--goa-space-l);\n        }\n        \n        .page-header {\n          margin-bottom: var(--goa-space-xl);\n          padding-bottom: var(--goa-space-m);\n          border-bottom: 1px solid var(--goa-color-border);\n        }\n        \n        .progress-indicator {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          color: var(--goa-color-text-secondary);\n          font-size: var(--goa-font-size-s);\n        }\n        \n        .question-page-content {\n          margin-bottom: var(--goa-space-2xl);\n        }\n        \n        .back-link {\n          display: inline-flex;\n          align-items: center;\n          background: none;\n          border: none;\n          color: var(--goa-color-interactive);\n          text-decoration: underline;\n          cursor: pointer;\n          font-size: var(--goa-font-size-m);\n          margin-top: var(--goa-space-m);\n          padding: 0;\n        }\n        \n        .back-link::before {\n          content: \"\";\n          display: inline-block;\n          width: 20px;\n          height: 20px;\n          margin-right: var(--goa-space-xs);\n          background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 2 22 22\" fill=\"none\" stroke=\"%230070C4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>') center center no-repeat;\n        }\n        \n        .back-link:hover,\n        .back-link:focus {\n          color: var(--goa-color-interactive-hover);\n        }\n        \n        .back-link:hover::before,\n        .back-link:focus::before {\n          background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 2 22 22\" fill=\"none\" stroke=\"%23004f84\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>') center center no-repeat;\n        }\n        \n        .section-title {\n          margin: var(--goa-space-2xl) 0 var(--goa-space-s) 0;\n          color: var(--goa-color-text-secondary);\n          font-size: var(--goa-font-size-xl);\n          font-weight: 600;\n        }\n        \n        .section-description {\n          margin: 0 0 var(--goa-space-l) 0;\n          color: var(--goa-color-text-secondary);\n          font-size: var(--goa-font-size-l);\n        }\n        \n        .section-form {\n          margin-top: var(--goa-space-l);\n        }\n        \n        .section-content {\n          display: flex;\n          flex-direction: column;\n          gap: var(--goa-space-l);\n        }\n        \n        .error-list {\n          margin: 0;\n          padding-left: var(--goa-space-l);\n        }\n        \n        .error-list li {\n          margin-bottom: var(--goa-space-xs);\n        }\n        \n        .section-navigation-guide {\n          margin-top: var(--goa-space-2xl);\n          padding: var(--goa-space-l);\n          background-color: var(--goa-color-background-light);\n          border-radius: var(--goa-border-radius-s);\n          border-left: 4px solid var(--goa-color-interactive);\n        }\n        \n        .section-navigation-guide h2 {\n          margin: 0 0 var(--goa-space-m) 0;\n          color: var(--goa-color-text);\n        }\n        \n        .guide-list {\n          margin: 0;\n          padding-left: var(--goa-space-l);\n        }\n        \n        .guide-list li {\n          margin-bottom: var(--goa-space-s);\n          line-height: 1.5;\n        }\n        \n        .guide-list strong {\n          color: var(--goa-color-text);\n        }\n      `}</style>\n    </div>\n  );\n}",
      "key": "const [formData, setFormData] = useState<any>({\n  livesInCanada: '',\n  firstName: '',\n  lastName: '',\n  email: '',\n  phone: '',\n  address: ''\n});\nconst [validationErrors, setValidationErrors] = useState<any>({});\nconst [currentSection, setCurrentSection] = useState<string>('personal-information');\nconst [sectionProgress, setSectionProgress] = useState<any>({\n  'personal-information': { completed: false, visited: true },\n  'contact-details': { completed: false, visited: false },\n  'additional-information': { completed: false, visited: false }\n});\n\nconst sectionConfig = {\n  'personal-information': {\n    title: 'Personal Information',\n    description: 'Basic details about yourself',\n    backLink: '/application/start',\n    backText: 'Back to start',\n    nextSection: 'contact-details'\n  },\n  'contact-details': {\n    title: 'Contact Details',\n    description: 'How we can reach you',\n    backLink: '/application/personal-information',\n    backText: 'Back to Personal Information',\n    nextSection: 'additional-information'\n  },\n  'additional-information': {\n    title: 'Additional Information',\n    description: 'Any extra details you\\'d like to provide',\n    backLink: '/application/contact-details',\n    backText: 'Back to Contact Details',\n    nextSection: 'review'\n  }\n};\n\nconst handleInputChange = (field: string, value: string) => {\n  setFormData(prev => ({\n    ...prev,\n    [field]: value\n  }));\n  \n  if (validationErrors[field]) {\n    setValidationErrors(prev => {\n      const updated = { ...prev };\n      delete updated[field];\n      return updated;\n    });\n  }\n};\n\nconst handleRadioChange = (event: GoabRadioGroupOnChangeDetail) => {\n  handleInputChange('livesInCanada', event.value);\n};\n\nconst validateCurrentSection = (): boolean => {\n  const errors: any = {};\n  let isValid = true;\n\n  switch (currentSection) {\n    case 'personal-information':\n      if (!formData.livesInCanada) {\n        errors.livesInCanada = 'Please select whether you currently live in Canada';\n        isValid = false;\n      }\n      if (!formData.firstName.trim()) {\n        errors.firstName = 'First name is required';\n        isValid = false;\n      }\n      if (!formData.lastName.trim()) {\n        errors.lastName = 'Last name is required';\n        isValid = false;\n      }\n      break;\n  }\n\n  setValidationErrors(errors);\n  return isValid;\n};\n\nconst handleSaveAndContinue = () => {\n  if (!validateCurrentSection()) {\n    return;\n  }\n\n  // Mark current section as completed and navigate to next\n  const nextSection = sectionConfig[currentSection].nextSection;\n  \n  if (nextSection && nextSection !== 'review') {\n    setCurrentSection(nextSection);\n  }\n  \n  console.log('Section saved:', currentSection, formData);\n};\n\nconst handleBackNavigation = () => {\n  const sections = Object.keys(sectionConfig);\n  const currentIndex = sections.indexOf(currentSection);\n  if (currentIndex > 0) {\n    setCurrentSection(sections[currentIndex - 1]);\n  }\n};\n\nconst getCurrentSectionConfig = () => {\n  return sectionConfig[currentSection];\n};\n\nconst config = getCurrentSectionConfig();\n\n<div className=\"question-page-example\">\n  <div className=\"page-header\">\n    <div className=\"progress-indicator\">\n      <span className=\"progress-text\">\n        Section {Object.keys(sectionConfig).indexOf(currentSection) + 1} of {Object.keys(sectionConfig).length}\n      </span>\n    </div>\n  </div>\n\n  <div className=\"question-page-content\">\n    <button \n      type=\"button\"\n      className=\"back-link\" \n      onClick={handleBackNavigation}\n      aria-label={config.backText}>\n      {config.backText}\n    </button>\n    \n    <h3 className=\"section-title\">{config.title}</h3>\n    \n    {config.description && (\n      <p className=\"section-description\">{config.description}</p>\n    )}\n    \n    <form className=\"section-form\">\n      <GoabFormItem \n        mt=\"xs\" \n        label=\"Do you currently live in Canada?\" \n        labelSize=\"large\"\n        error={validationErrors.livesInCanada}\n        required>\n        <GoabRadioGroup\n          name=\"canada\"\n          value={formData.livesInCanada}\n          ariaLabel=\"Do you currently live in Canada?\"\n          onChange={handleRadioChange}\n          error={!!validationErrors.livesInCanada}>\n          <GoabRadioItem value=\"yes\" label=\"Yes\" />\n          <GoabRadioItem value=\"no\" label=\"No\" />\n        </GoabRadioGroup>\n      </GoabFormItem>\n      \n      <GoabButton \n        type=\"primary\" \n        mt=\"2xl\"\n        onClick={handleSaveAndContinue}>\n        Save and continue\n      </GoabButton>\n    </form>\n  </div>\n</div>\n\n/* CSS */\n.question-page-example {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.page-header {\n  margin-bottom: var(--goa-space-xl);\n  padding-bottom: var(--goa-space-m);\n  border-bottom: 1px solid var(--goa-color-border);\n}\n\n.progress-indicator {\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-s);\n}\n\n.back-link {\n  display: inline-flex;\n  align-items: center;\n  background: none;\n  border: none;\n  color: var(--goa-color-interactive);\n  text-decoration: underline;\n  cursor: pointer;\n  font-size: var(--goa-font-size-m);\n  margin-top: var(--goa-space-m);\n  padding: 0;\n}\n\n.back-link::before {\n  content: \"\";\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  margin-right: var(--goa-space-xs);\n  background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 2 22 22\" fill=\"none\" stroke=\"%230070C4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>') center center no-repeat;\n}\n\n.back-link:hover::before {\n  background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 2 22 22\" fill=\"none\" stroke=\"%23004f84\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>') center center no-repeat;\n}\n\n.section-title {\n  margin: var(--goa-space-2xl) 0 var(--goa-space-s) 0;\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-xl);\n  font-weight: 600;\n}\n\n.section-description {\n  margin: 0 0 var(--goa-space-l) 0;\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-l);\n}\n\n.section-form {\n  margin-top: var(--goa-space-l);\n}\n\n.section-content {\n  display: flex;\n  flex-direction: column;\n  gap: var(--goa-space-l);\n}"
    },
    "angular": {
      "complete": "export class ShowASectionTitleOnAQuestionPageComponent {\n  formData = {\n    livesInCanada: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    address: '',\n    additionalInfo: ''\n  };\n  \n  validationErrors: any = {};\n  currentSection: string = 'personal-information';\n  isSubmitting: boolean = false;\n  \n  sectionProgress = {\n    'personal-information': { completed: false, visited: true },\n    'contact-details': { completed: false, visited: false },\n    'additional-information': { completed: false, visited: false }\n  };\n\n  sectionConfig = {\n    'personal-information': {\n      title: 'Personal Information',\n      description: 'Basic details about yourself',\n      backLink: '/application/start',\n      backText: 'Back to start',\n      nextSection: 'contact-details'\n    },\n    'contact-details': {\n      title: 'Contact Details',\n      description: 'How we can reach you',\n      backLink: '/application/personal-information',\n      backText: 'Back to Personal Information',\n      nextSection: 'additional-information'\n    },\n    'additional-information': {\n      title: 'Additional Information',\n      description: 'Any extra details you\\'d like to provide',\n      backLink: '/application/contact-details',\n      backText: 'Back to Contact Details',\n      nextSection: 'review'\n    }\n  };\n\n  handleInputChange(field: string, value: string) {\n    this.formData = {\n      ...this.formData,\n      [field]: value\n    };\n    \n    if (this.validationErrors[field]) {\n      delete this.validationErrors[field];\n    }\n    \n    console.log(`Field ${field} updated:`, value);\n  }\n\n  handleRadioChange(event: any) {\n    this.handleInputChange('livesInCanada', event.value);\n  }\n\n  validateCurrentSection(): boolean {\n    const errors: any = {};\n    let isValid = true;\n\n    switch (this.currentSection) {\n      case 'personal-information':\n        if (!this.formData.livesInCanada) {\n          errors.livesInCanada = 'Please select whether you currently live in Canada';\n          isValid = false;\n        }\n        if (!this.formData.firstName.trim()) {\n          errors.firstName = 'First name is required';\n          isValid = false;\n        }\n        if (!this.formData.lastName.trim()) {\n          errors.lastName = 'Last name is required';\n          isValid = false;\n        }\n        break;\n        \n      case 'contact-details':\n        if (!this.formData.email.trim()) {\n          errors.email = 'Email address is required';\n          isValid = false;\n        }\n        if (!this.formData.address.trim()) {\n          errors.address = 'Address is required';\n          isValid = false;\n        }\n        break;\n    }\n\n    this.validationErrors = errors;\n    return isValid;\n  }\n\n  handleSaveAndContinue() {\n    if (!this.validateCurrentSection()) {\n      console.log('Validation failed for section:', this.currentSection);\n      return;\n    }\n\n    this.isSubmitting = true;\n    \n    setTimeout(() => {\n      const config = this.getCurrentSectionConfig();\n      const nextSection = config.nextSection;\n      \n      if (nextSection && nextSection !== 'review') {\n        this.currentSection = nextSection;\n      }\n      \n      this.isSubmitting = false;\n      console.log('Section saved:', this.currentSection, this.formData);\n    }, 1000);\n  }\n\n  handleBackNavigation() {\n    const sections = Object.keys(this.sectionConfig);\n    const currentIndex = sections.indexOf(this.currentSection);\n    if (currentIndex > 0) {\n      this.currentSection = sections[currentIndex - 1];\n    }\n    \n    console.log('Navigating back from:', this.currentSection);\n  }\n\n  getCurrentSectionConfig() {\n    return this.sectionConfig[this.currentSection as keyof typeof this.sectionConfig];\n  }\n\n  getSectionNumber(): number {\n    return Object.keys(this.sectionConfig).indexOf(this.currentSection) + 1;\n  }\n\n  getTotalSections(): number {\n    return Object.keys(this.sectionConfig).length;\n  }\n\n  getSectionCompletionRate(): number {\n    const completedSections = Object.values(this.sectionProgress).filter(section => section.completed).length;\n    const totalSections = Object.keys(this.sectionProgress).length;\n    return Math.round((completedSections / totalSections) * 100);\n  }\n\n  getValidationErrorCount(): number {\n    return Object.keys(this.validationErrors).length;\n  }\n\n  getValidationErrorList(): string[] {\n    return Object.values(this.validationErrors);\n  }\n\n  getSubmitButtonText(): string {\n    return this.isSubmitting ? 'Saving...' : 'Save and continue';\n  }\n}",
      "key": "formData = {\n  livesInCanada: '',\n  firstName: '',\n  lastName: '',\n  email: '',\n  phone: '',\n  address: '',\n  additionalInfo: ''\n};\n\nvalidationErrors: any = {};\ncurrentSection: string = 'personal-information';\nisSubmitting: boolean = false;\n\nsectionConfig = {\n  'personal-information': {\n    title: 'Personal Information',\n    description: 'Basic details about yourself',\n    backText: 'Back to start',\n    nextSection: 'contact-details'\n  },\n  'contact-details': {\n    title: 'Contact Details',\n    description: 'How we can reach you',\n    backText: 'Back to Personal Information',\n    nextSection: 'additional-information'\n  }\n};\n\nhandleInputChange(field: string, value: string) {\n  this.formData = {\n    ...this.formData,\n    [field]: value\n  };\n  \n  if (this.validationErrors[field]) {\n    delete this.validationErrors[field];\n  }\n}\n\nhandleRadioChange(event: any) {\n  this.handleInputChange('livesInCanada', event.value);\n}\n\nvalidateCurrentSection(): boolean {\n  const errors: any = {};\n  let isValid = true;\n\n  if (!this.formData.livesInCanada) {\n    errors.livesInCanada = 'Please select whether you currently live in Canada';\n    isValid = false;\n  }\n\n  this.validationErrors = errors;\n  return isValid;\n}\n\nhandleSaveAndContinue() {\n  if (!this.validateCurrentSection()) {\n    return;\n  }\n\n  this.isSubmitting = true;\n  \n  setTimeout(() => {\n    const config = this.getCurrentSectionConfig();\n    const nextSection = config.nextSection;\n    \n    if (nextSection && nextSection !== 'review') {\n      this.currentSection = nextSection;\n    }\n    \n    this.isSubmitting = false;\n  }, 1000);\n}\n\nhandleBackNavigation() {\n  const sections = Object.keys(this.sectionConfig);\n  const currentIndex = sections.indexOf(this.currentSection);\n  if (currentIndex > 0) {\n    this.currentSection = sections[currentIndex - 1];\n  }\n}\n\ngetCurrentSectionConfig() {\n  return this.sectionConfig[this.currentSection];\n}\n\n<!-- Template -->\n<div class=\"question-page-example\">\n  <div class=\"page-header\">\n    <div class=\"progress-indicator\">\n      <span class=\"progress-text\">\n        Section {{ getSectionNumber() }} of {{ getTotalSections() }}\n      </span>\n      <span class=\"completion-rate\">\n        {{ getSectionCompletionRate() }}% complete\n      </span>\n    </div>\n  </div>\n\n  <div class=\"question-page-content\">\n    <button \n      type=\"button\"\n      class=\"back-link\" \n      (click)=\"handleBackNavigation()\"\n      [attr.aria-label]=\"getCurrentSectionConfig().backText\">\n      {{ getCurrentSectionConfig().backText }}\n    </button>\n    \n    <h3 class=\"section-title\">{{ getCurrentSectionConfig().title }}</h3>\n    \n    <p class=\"section-description\" *ngIf=\"getCurrentSectionConfig().description\">\n      {{ getCurrentSectionConfig().description }}\n    </p>\n    \n    <form class=\"section-form\">\n      <goab-form-item \n        mt=\"xs\" \n        label=\"Do you currently live in Canada?\" \n        labelSize=\"large\"\n        [error]=\"validationErrors.livesInCanada\"\n        [required]=\"true\">\n        <goab-radio-group\n          name=\"canada\"\n          [value]=\"formData.livesInCanada\"\n          ariaLabel=\"Do you currently live in Canada?\"\n          (onChange)=\"handleRadioChange($event)\"\n          [error]=\"!!validationErrors.livesInCanada\">\n          <goab-radio-item value=\"yes\" label=\"Yes\"></goab-radio-item>\n          <goab-radio-item value=\"no\" label=\"No\"></goab-radio-item>\n        </goab-radio-group>\n      </goab-form-item>\n      \n      <goab-button \n        type=\"primary\" \n        mt=\"2xl\"\n        (onClick)=\"handleSaveAndContinue()\"\n        [disabled]=\"isSubmitting\">\n        {{ getSubmitButtonText() }}\n      </goab-button>\n    </form>\n    \n    <goab-callout \n      type=\"emergency\" \n      heading=\"Please fix the following errors:\"\n      *ngIf=\"getValidationErrorCount() > 0\">\n      <ul class=\"error-list\">\n        <li *ngFor=\"let error of getValidationErrorList()\">{{ error }}</li>\n      </ul>\n    </goab-callout>\n  </div>\n</div>"
    }
  },
  "tags": [
    "section-title",
    "question-page",
    "form-navigation",
    "back-link",
    "form-pattern",
    "page-structure",
    "section-organization",
    "user-guidance",
    "navigation-context",
    "form-progression"
  ]
}