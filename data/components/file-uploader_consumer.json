{
  "metadataSchemaVersion": "2.1.0-ai-context",
  "audience": "ai-systems-helping-consumer-developers",
  "lastUpdated": "2025-07-02",

  "customElement": {
    "tagName": "goa-file-upload-input",
    "className": "GoaFileUploadInput",
    "note": "File uploader consists of two components: goa-file-upload-input and goa-file-upload-card"
  },

  "playgroundExamples": [
    {
      "title": "Basic File Upload Variants",
      "description": "Demonstrates both button and drag-drop variants with different configurations",
      "interactiveProps": [
        {
          "name": "variant",
          "options": ["button", "dragdrop"],
          "default": "dragdrop"
        },
        {
          "name": "maxFileSize",
          "options": ["5MB", "10MB", "50MB", "100MB"],
          "default": "10MB"
        },
        {
          "name": "accept",
          "options": ["*", ".pdf,.doc,.docx", "image/*", ".jpg,.png,.gif"],
          "default": "*"
        }
      ],
      "code": "<GoabBlock gap=\"xl\" mb=\"xl\" direction=\"column\">\n  <GoabFormItem label=\"Button Variant Upload\">\n    <GoabFileUploadInput\n      variant=\"button\"\n      maxFileSize=\"100MB\"\n      accept=\".pdf,.doc,.docx\"\n      onSelectFile={(event) => {\n        console.log('File selected:', event.file.name);\n        alert(`Selected: ${event.file.name} (${event.file.size} bytes)`);\n      }}\n    />\n  </GoabFormItem>\n\n  <GoabFormItem label=\"Drag & Drop Upload\">\n    <GoabFileUploadInput\n      variant=\"dragdrop\"\n      maxFileSize=\"100MB\"\n      accept=\"image/*\"\n      onSelectFile={(event) => {\n        console.log('File selected:', event.file.name);\n        alert(`Selected: ${event.file.name} (${event.file.size} bytes)`);\n      }}\n    />\n  </GoabFormItem>\n</GoabBlock>",
      "usageNotes": [
        "Button variant is more compact and accessible",
        "Drag-drop variant provides better user experience for larger upload areas",
        "File type restrictions are enforced by the browser's file picker",
        "maxFileSize is for display purposes - implement actual validation in onSelectFile"
      ]
    },
    {
      "title": "Single File Upload with Progress",
      "description": "Complete file upload flow with progress tracking and file card display",
      "interactiveProps": [
        {
          "name": "variant",
          "options": ["button", "dragdrop"],
          "default": "dragdrop"
        },
        {
          "name": "showProgress",
          "type": "boolean",
          "default": true
        }
      ],
      "code": "function SingleFileUpload() {\n  const [selectedFile, setSelectedFile] = React.useState(null);\n  const [uploadProgress, setUploadProgress] = React.useState(0);\n  const [uploadError, setUploadError] = React.useState(null);\n\n  const simulateUpload = (file) => {\n    setUploadProgress(0);\n    setUploadError(null);\n    \n    const interval = setInterval(() => {\n      setUploadProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          return 100;\n        }\n        return prev + 10;\n      });\n    }, 200);\n  };\n\n  const handleFileSelect = (event) => {\n    const file = event.file;\n    \n    // Validate file size (example: 5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      setUploadError('File size must be less than 5MB');\n      return;\n    }\n    \n    setSelectedFile(file);\n    simulateUpload(file);\n  };\n\n  const handleDelete = () => {\n    setSelectedFile(null);\n    setUploadProgress(0);\n    setUploadError(null);\n  };\n\n  return (\n    <GoabBlock gap=\"m\" direction=\"column\">\n      <GoabFormItem label=\"Upload Document\" error={uploadError}>\n        <GoabFileUploadInput\n          variant=\"dragdrop\"\n          maxFileSize=\"5MB\"\n          accept=\".pdf,.doc,.docx\"\n          onSelectFile={handleFileSelect}\n        />\n      </GoabFormItem>\n      \n      {selectedFile && (\n        <GoabFileUploadCard\n          filename={selectedFile.name}\n          type={selectedFile.type}\n          size={selectedFile.size}\n          progress={uploadProgress}\n          error={uploadError}\n          onDelete={handleDelete}\n          onCancel={handleDelete}\n        />\n      )}\n    </GoabBlock>\n  );\n}",
      "usageNotes": [
        "Progress updates should be driven by your actual upload implementation",
        "File validation should be performed in the onSelectFile handler",
        "Error state can be displayed both in FormItem and FileUploadCard",
        "Progress of 100+ indicates upload completion"
      ]
    },
    {
      "title": "Multiple File Upload Manager",
      "description": "Advanced example handling multiple file uploads with individual progress tracking",
      "interactiveProps": [
        {
          "name": "maxFiles",
          "options": [1, 3, 5, 10],
          "default": 5
        },
        {
          "name": "allowedTypes",
          "options": ["All Files", "Documents", "Images", "PDFs Only"],
          "default": "All Files"
        }
      ],
      "code": "function MultiFileUpload() {\n  const [uploads, setUploads] = React.useState([]);\n  const [progressList, setProgressList] = React.useState({});\n  const maxFiles = 3;\n\n  const getAcceptType = (typeFilter) => {\n    const types = {\n      'All Files': '*',\n      'Documents': '.pdf,.doc,.docx,.txt',\n      'Images': 'image/*',\n      'PDFs Only': '.pdf'\n    };\n    return types[typeFilter] || '*';\n  };\n\n  const simulateUpload = (uploadId) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 20;\n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n      }\n      setProgressList(prev => ({ ...prev, [uploadId]: Math.floor(progress) }));\n    }, 300);\n  };\n\n  const handleFileSelect = (event) => {\n    const file = event.file;\n    \n    // Check file limit\n    if (uploads.length >= maxFiles) {\n      alert(`Maximum ${maxFiles} files allowed`);\n      return;\n    }\n    \n    // Check for duplicates\n    const isDuplicate = uploads.some(upload => \n      upload.file.name === file.name && upload.file.size === file.size\n    );\n    if (isDuplicate) {\n      alert('File already selected');\n      return;\n    }\n    \n    const uploadId = `${file.name}-${Date.now()}`;\n    \n    // Add to uploads list\n    setUploads(prev => [...prev, { id: uploadId, file }]);\n    \n    // Start simulated upload\n    simulateUpload(uploadId);\n  };\n\n  const removeUpload = (uploadId) => {\n    setUploads(prev => prev.filter(upload => upload.id !== uploadId));\n    setProgressList(prev => {\n      const newProgress = { ...prev };\n      delete newProgress[uploadId];\n      return newProgress;\n    });\n  };\n\n  return (\n    <GoabBlock gap=\"m\" direction=\"column\">\n      <GoabFormItem label={`Upload Files (${uploads.length}/${maxFiles})`}>\n        <GoabFileUploadInput\n          variant=\"dragdrop\"\n          maxFileSize=\"10MB\"\n          accept={getAcceptType('Documents')}\n          onSelectFile={handleFileSelect}\n        />\n      </GoabFormItem>\n      \n      {uploads.length > 0 && (\n        <GoabBlock gap=\"s\" direction=\"column\">\n          <GoabText size=\"s\" color=\"secondary\">\n            Uploaded Files:\n          </GoabText>\n          {uploads.map(upload => (\n            <GoabFileUploadCard\n              key={upload.id}\n              filename={upload.file.name}\n              type={upload.file.type}\n              size={upload.file.size}\n              progress={progressList[upload.id] || 0}\n              onDelete={() => removeUpload(upload.id)}\n              onCancel={() => removeUpload(upload.id)}\n            />\n          ))}\n        </GoabBlock>\n      )}\n      \n      {uploads.length > 0 && (\n        <GoabButton\n          type=\"primary\"\n          disabled={Object.values(progressList).some(p => p < 100)}\n        >\n          Submit ({uploads.length} files)\n        </GoabButton>\n      )}\n    </GoabBlock>\n  );\n}",
      "usageNotes": [
        "Implement file limits and duplicate checking for better UX",
        "Track progress individually for each file upload",
        "Disable submission until all uploads complete",
        "Provide clear feedback about file limits and restrictions"
      ]
    },
    {
      "title": "Form Integration Example",
      "description": "File upload integrated with form validation and submission",
      "interactiveProps": [
        {
          "name": "required",
          "type": "boolean",
          "default": true
        },
        {
          "name": "validationTiming",
          "options": ["onSubmit", "onChange", "onBlur"],
          "default": "onSubmit"
        }
      ],
      "code": "function DocumentForm() {\n  const [formData, setFormData] = React.useState({\n    name: '',\n    email: '',\n    documents: []\n  });\n  const [uploadProgress, setUploadProgress] = React.useState({});\n  const [errors, setErrors] = React.useState({});\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    }\n    \n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Email is invalid';\n    }\n    \n    if (formData.documents.length === 0) {\n      newErrors.documents = 'At least one document is required';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleFileSelect = (event) => {\n    const file = event.file;\n    const uploadId = Date.now().toString();\n    \n    // Simulate upload\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += 15;\n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Add to form data when upload completes\n        setFormData(prev => ({\n          ...prev,\n          documents: [...prev.documents, {\n            id: uploadId,\n            filename: file.name,\n            size: file.size,\n            type: file.type,\n            url: `https://example.com/files/${uploadId}`\n          }]\n        }));\n      }\n      setUploadProgress(prev => ({ ...prev, [uploadId]: progress }));\n    }, 200);\n    \n    // Clear documents error when file is selected\n    if (errors.documents) {\n      setErrors(prev => ({ ...prev, documents: null }));\n    }\n  };\n\n  const removeDocument = (docId) => {\n    setFormData(prev => ({\n      ...prev,\n      documents: prev.documents.filter(doc => doc.id !== docId)\n    }));\n    setUploadProgress(prev => {\n      const newProgress = { ...prev };\n      delete newProgress[docId];\n      return newProgress;\n    });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n    \n    // Check if any uploads are still in progress\n    const uploadsInProgress = Object.values(uploadProgress).some(p => p < 100);\n    if (uploadsInProgress) {\n      alert('Please wait for all uploads to complete');\n      return;\n    }\n    \n    console.log('Submitting form:', formData);\n    alert('Form submitted successfully!');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <GoabBlock gap=\"l\" direction=\"column\">\n        <GoabFormItem label=\"Name\" error={errors.name}>\n          <GoabInput\n            value={formData.name}\n            onChange={(name, value) => setFormData(prev => ({ ...prev, name: value }))}\n            placeholder=\"Enter your name\"\n          />\n        </GoabFormItem>\n        \n        <GoabFormItem label=\"Email\" error={errors.email}>\n          <GoabInput\n            type=\"email\"\n            value={formData.email}\n            onChange={(name, value) => setFormData(prev => ({ ...prev, email: value }))}\n            placeholder=\"Enter your email\"\n          />\n        </GoabFormItem>\n        \n        <GoabFormItem label=\"Required Documents\" error={errors.documents}>\n          <GoabFileUploadInput\n            variant=\"dragdrop\"\n            maxFileSize=\"10MB\"\n            accept=\".pdf,.doc,.docx\"\n            onSelectFile={handleFileSelect}\n          />\n          \n          {formData.documents.map(doc => (\n            <GoabFileUploadCard\n              key={doc.id}\n              filename={doc.filename}\n              size={doc.size}\n              progress={uploadProgress[doc.id] || 100}\n              onDelete={() => removeDocument(doc.id)}\n            />\n          ))}\n        </GoabFormItem>\n        \n        <GoabButtonGroup alignment=\"end\">\n          <GoabButton type=\"secondary\" onClick={() => setFormData({ name: '', email: '', documents: [] })}>\n            Reset\n          </GoabButton>\n          <GoabButton \n            type=\"primary\" \n            submit\n            disabled={Object.values(uploadProgress).some(p => p < 100)}\n          >\n            Submit Application\n          </GoabButton>\n        </GoabButtonGroup>\n      </GoabBlock>\n    </form>\n  );\n}",
      "usageNotes": [
        "Integrate file upload state with overall form validation",
        "Prevent form submission while uploads are in progress",
        "Clear file-related errors when new files are selected",
        "Store file references in form data for submission"
      ]
    },
    {
      "title": "Image Upload with Preview",
      "description": "Specialized image upload with thumbnail previews and image-specific validation",
      "interactiveProps": [
        {
          "name": "maxImages",
          "options": [1, 3, 5, 10],
          "default": 3
        },
        {
          "name": "showPreviews",
          "type": "boolean",
          "default": true
        },
        {
          "name": "imageQuality",
          "options": ["thumbnail", "medium", "full"],
          "default": "medium"
        }
      ],
      "code": "function ImageUploadWithPreview() {\n  const [images, setImages] = React.useState([]);\n  const [previews, setPreviews] = React.useState({});\n  const [uploadProgress, setUploadProgress] = React.useState({});\n  const maxImages = 3;\n\n  const createImagePreview = (file, imageId) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      setPreviews(prev => ({ ...prev, [imageId]: e.target.result }));\n    };\n    reader.readAsDataURL(file);\n  };\n\n  const validateImage = (file) => {\n    // Check file type\n    if (!file.type.startsWith('image/')) {\n      return 'File must be an image';\n    }\n    \n    // Check file size (5MB limit)\n    if (file.size > 5 * 1024 * 1024) {\n      return 'Image must be less than 5MB';\n    }\n    \n    return null;\n  };\n\n  const handleImageSelect = (event) => {\n    const file = event.file;\n    \n    // Validate image\n    const validationError = validateImage(file);\n    if (validationError) {\n      alert(validationError);\n      return;\n    }\n    \n    // Check image limit\n    if (images.length >= maxImages) {\n      alert(`Maximum ${maxImages} images allowed`);\n      return;\n    }\n    \n    const imageId = `${file.name}-${Date.now()}`;\n    \n    // Add to images list\n    setImages(prev => [...prev, { id: imageId, file }]);\n    \n    // Create preview\n    createImagePreview(file, imageId);\n    \n    // Simulate upload\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += 12;\n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n      }\n      setUploadProgress(prev => ({ ...prev, [imageId]: progress }));\n    }, 150);\n  };\n\n  const removeImage = (imageId) => {\n    setImages(prev => prev.filter(img => img.id !== imageId));\n    setPreviews(prev => {\n      const newPreviews = { ...prev };\n      delete newPreviews[imageId];\n      return newPreviews;\n    });\n    setUploadProgress(prev => {\n      const newProgress = { ...prev };\n      delete newProgress[imageId];\n      return newProgress;\n    });\n  };\n\n  return (\n    <GoabBlock gap=\"l\" direction=\"column\">\n      <GoabFormItem label={`Upload Images (${images.length}/${maxImages})`}>\n        <GoabFileUploadInput\n          variant=\"dragdrop\"\n          maxFileSize=\"5MB\"\n          accept=\"image/*\"\n          onSelectFile={handleImageSelect}\n        />\n      </GoabFormItem>\n      \n      {images.length > 0 && (\n        <GoabBlock gap=\"m\" direction=\"column\">\n          <GoabText size=\"s\" color=\"secondary\">\n            Selected Images:\n          </GoabText>\n          \n          <div style={{ \n            display: 'grid', \n            gap: '1rem', \n            gridTemplateColumns: 'repeat(auto-fill, minmax(250px, 1fr))' \n          }}>\n            {images.map(image => (\n              <GoabBlock key={image.id} gap=\"s\" direction=\"column\">\n                {previews[image.id] && (\n                  <div style={{\n                    width: '100%',\n                    height: '150px',\n                    backgroundColor: '#f5f5f5',\n                    borderRadius: '4px',\n                    overflow: 'hidden',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center'\n                  }}>\n                    <img\n                      src={previews[image.id]}\n                      alt={image.file.name}\n                      style={{\n                        maxWidth: '100%',\n                        maxHeight: '100%',\n                        objectFit: 'cover'\n                      }}\n                    />\n                  </div>\n                )}\n                \n                <GoabFileUploadCard\n                  filename={image.file.name}\n                  type={image.file.type}\n                  size={image.file.size}\n                  progress={uploadProgress[image.id] || 0}\n                  onDelete={() => removeImage(image.id)}\n                  onCancel={() => removeImage(image.id)}\n                />\n              </GoabBlock>\n            ))}\n          </div>\n        </GoabBlock>\n      )}\n      \n      {images.length > 0 && (\n        <GoabCallout type=\"information\">\n          <GoabText size=\"s\">\n            Images will be automatically resized and optimized for web display.\n            Original files are preserved for download.\n          </GoabText>\n        </GoabCallout>\n      )}\n    </GoabBlock>\n  );\n}",
      "usageNotes": [
        "Use FileReader API to create image previews",
        "Implement image-specific validation (type, size, dimensions)",
        "Consider image optimization for web display",
        "Provide visual feedback with thumbnail previews"
      ]
    },
    {
      "title": "File Type Restrictions Demo",
      "description": "Demonstrates different file type restrictions and validation approaches",
      "interactiveProps": [
        {
          "name": "fileTypeFilter",
          "options": ["All Files", "Documents", "Images", "Archives", "Custom"],
          "default": "Documents"
        },
        {
          "name": "strictValidation",
          "type": "boolean",
          "default": false
        }
      ],
      "code": "function FileTypeDemo() {\n  const [selectedFilter, setSelectedFilter] = React.useState('Documents');\n  const [strictValidation, setStrictValidation] = React.useState(false);\n  const [selectedFiles, setSelectedFiles] = React.useState([]);\n  const [validationErrors, setValidationErrors] = React.useState([]);\n\n  const fileTypeConfigs = {\n    'All Files': {\n      accept: '*',\n      description: 'Any file type',\n      extensions: ['*'],\n      mimeTypes: ['*']\n    },\n    'Documents': {\n      accept: '.pdf,.doc,.docx,.txt,.rtf',\n      description: 'PDF, Word, and text documents',\n      extensions: ['.pdf', '.doc', '.docx', '.txt', '.rtf'],\n      mimeTypes: [\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'text/plain',\n        'application/rtf'\n      ]\n    },\n    'Images': {\n      accept: 'image/*',\n      description: 'JPEG, PNG, GIF, WebP images',\n      extensions: ['.jpg', '.jpeg', '.png', '.gif', '.webp'],\n      mimeTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp']\n    },\n    'Archives': {\n      accept: '.zip,.rar,.7z,.tar,.gz',\n      description: 'Compressed archive files',\n      extensions: ['.zip', '.rar', '.7z', '.tar', '.gz'],\n      mimeTypes: [\n        'application/zip',\n        'application/x-rar-compressed',\n        'application/x-7z-compressed',\n        'application/x-tar',\n        'application/gzip'\n      ]\n    },\n    'Custom': {\n      accept: '.json,.xml,.csv',\n      description: 'Data files (JSON, XML, CSV)',\n      extensions: ['.json', '.xml', '.csv'],\n      mimeTypes: ['application/json', 'application/xml', 'text/csv']\n    }\n  };\n\n  const validateFileType = (file, config) => {\n    if (!strictValidation || config.accept === '*') return null;\n    \n    const fileName = file.name.toLowerCase();\n    const fileType = file.type.toLowerCase();\n    \n    // Check file extension\n    const hasValidExtension = config.extensions.some(ext => \n      ext === '*' || fileName.endsWith(ext.toLowerCase())\n    );\n    \n    // Check MIME type\n    const hasValidMimeType = config.mimeTypes.some(mime => \n      mime === '*' || fileType === mime || fileType.startsWith(mime.split('/')[0] + '/')\n    );\n    \n    if (!hasValidExtension && !hasValidMimeType) {\n      return `File type not allowed. Expected: ${config.description}`;\n    }\n    \n    return null;\n  };\n\n  const handleFileSelect = (event) => {\n    const file = event.file;\n    const config = fileTypeConfigs[selectedFilter];\n    \n    // Validate file type\n    const validationError = validateFileType(file, config);\n    if (validationError) {\n      setValidationErrors(prev => [...prev, {\n        filename: file.name,\n        error: validationError,\n        timestamp: Date.now()\n      }]);\n      return;\n    }\n    \n    // Add file to selected list\n    setSelectedFiles(prev => [...prev, {\n      id: Date.now().toString(),\n      file,\n      addedAt: new Date().toLocaleTimeString()\n    }]);\n    \n    // Clear any previous validation errors for this file\n    setValidationErrors(prev => \n      prev.filter(err => err.filename !== file.name)\n    );\n  };\n\n  const removeFile = (fileId) => {\n    setSelectedFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n\n  const clearErrors = () => {\n    setValidationErrors([]);\n  };\n\n  const currentConfig = fileTypeConfigs[selectedFilter];\n\n  return (\n    <GoabBlock gap=\"l\" direction=\"column\">\n      <GoabBlock gap=\"m\" direction=\"column\">\n        <GoabText size=\"m\" weight=\"bold\">\n          File Type Configuration\n        </GoabText>\n        \n        <GoabFormItem label=\"File Type Filter\">\n          <GoabDropdown\n            value={selectedFilter}\n            onChange={(name, value) => {\n              setSelectedFilter(value);\n              setValidationErrors([]);\n            }}\n          >\n            {Object.keys(fileTypeConfigs).map(type => (\n              <GoabDropdownItem key={type} value={type}>\n                {type}\n              </GoabDropdownItem>\n            ))}\n          </GoabDropdown>\n        </GoabFormItem>\n        \n        <GoabFormItem>\n          <GoabCheckbox\n            checked={strictValidation}\n            onChange={(name, checked) => setStrictValidation(checked)}\n          >\n            Enable strict validation (server-side style)\n          </GoabCheckbox>\n        </GoabFormItem>\n        \n        <GoabCallout type=\"information\">\n          <GoabBlock gap=\"xs\" direction=\"column\">\n            <GoabText size=\"s\" weight=\"bold\">\n              Current Configuration:\n            </GoabText>\n            <GoabText size=\"s\">\n              <strong>Accept:</strong> {currentConfig.accept}\n            </GoabText>\n            <GoabText size=\"s\">\n              <strong>Description:</strong> {currentConfig.description}\n            </GoabText>\n            <GoabText size=\"s\">\n              <strong>Extensions:</strong> {currentConfig.extensions.join(', ')}\n            </GoabText>\n            <GoabText size=\"s\">\n              <strong>Strict Validation:</strong> {strictValidation ? 'Enabled' : 'Disabled'}\n            </GoabText>\n          </GoabBlock>\n        </GoabCallout>\n      </GoabBlock>\n      \n      <GoabFormItem label=\"Upload Files\">\n        <GoabFileUploadInput\n          variant=\"dragdrop\"\n          maxFileSize=\"10MB\"\n          accept={currentConfig.accept}\n          onSelectFile={handleFileSelect}\n        />\n      </GoabFormItem>\n      \n      {validationErrors.length > 0 && (\n        <GoabBlock gap=\"s\" direction=\"column\">\n          <GoabBlock gap=\"xs\" direction=\"row\" alignment=\"center\">\n            <GoabText size=\"s\" color=\"error\" weight=\"bold\">\n              Validation Errors:\n            </GoabText>\n            <GoabButton type=\"tertiary\" size=\"compact\" onClick={clearErrors}>\n              Clear All\n            </GoabButton>\n          </GoabBlock>\n          \n          {validationErrors.map(error => (\n            <GoabCallout key={error.timestamp} type=\"error\">\n              <GoabText size=\"s\">\n                <strong>{error.filename}:</strong> {error.error}\n              </GoabText>\n            </GoabCallout>\n          ))}\n        </GoabBlock>\n      )}\n      \n      {selectedFiles.length > 0 && (\n        <GoabBlock gap=\"s\" direction=\"column\">\n          <GoabText size=\"s\" color=\"secondary\">\n            Successfully Selected Files:\n          </GoabText>\n          \n          {selectedFiles.map(fileInfo => (\n            <GoabBlock key={fileInfo.id} gap=\"xs\" direction=\"row\" alignment=\"center\">\n              <GoabText size=\"s\">\n                📄 {fileInfo.file.name} ({(fileInfo.file.size / 1024).toFixed(1)}KB)\n              </GoabText>\n              <GoabText size=\"xs\" color=\"secondary\">\n                Added: {fileInfo.addedAt}\n              </GoabText>\n              <GoabButton \n                type=\"tertiary\" \n                size=\"compact\" \n                onClick={() => removeFile(fileInfo.id)}\n              >\n                Remove\n              </GoabButton>\n            </GoabBlock>\n          ))}\n        </GoabBlock>\n      )}\n    </GoabBlock>\n  );\n}",
      "usageNotes": [
        "Browser file picker respects accept attribute automatically",
        "Implement additional server-side validation for security",
        "MIME type validation is more reliable than extension checking",
        "Consider both user experience and security requirements"
      ]
    }
  ],

  "systemRequirements": {
    "setupReference": "See system-setup.json for complete installation instructions", 
    "dependencies": ["Design token system", "@abgov/web-components", "File handling utilities"]
  },

  "componentInfo": {
    "name": "File Uploader",
    "purpose": "Help users select and upload files with validation and progress tracking",
    "category": "form",
    "consists": ["FileUploadInput (goa-file-upload-input)", "FileUploadCard (goa-file-upload-card)"]
  },

  "installation": {
    "react": {
      "import": "import { GoabFileUploadInput, GoabFileUploadCard } from '@abgov/react-components'",
      "quickExample": "// Complete file upload with progress tracking\nconst [uploads, setUploads] = useState([]);\nconst [progress, setProgress] = useState({});\n\nfunction handleFileSelect(event) {\n  const file = event.file;\n  setUploads(prev => [...prev, { file, id: Date.now() }]);\n  // Start upload process\n}\n\n<GoabFileUploadInput \n  variant=\"dragdrop\"\n  onSelectFile={handleFileSelect}\n  maxFileSize=\"10MB\"\n  accept=\".pdf,.doc,.docx\"\n/>\n{uploads.map(upload => (\n  <GoabFileUploadCard\n    key={upload.id}\n    filename={upload.file.name}\n    size={upload.file.size}\n    progress={progress[upload.id]}\n    onDelete={() => removeFile(upload.id)}\n  />\n))}"
    },
    "angular": {
      "import": "import { AngularComponentsModule } from '@abgov/angular-components'",
      "quickExample": "// Complete file upload component\nexport class FileUploadComponent {\n  uploads: any[] = [];\n  progress: Record<string, number> = {};\n\n  handleFileSelect(event: any) {\n    const file = event.file;\n    this.uploads.push({ file, id: Date.now() });\n    // Start upload process\n  }\n\n  removeFile(uploadId: string) {\n    this.uploads = this.uploads.filter(u => u.id !== uploadId);\n  }\n}\n\n<goa-file-upload-input \n  variant=\"dragdrop\"\n  (onSelectFile)=\"handleFileSelect($event)\"\n  maxfilesize=\"10MB\"\n  accept=\".pdf,.doc,.docx\">\n</goa-file-upload-input>\n<goa-file-upload-card\n  *ngFor=\"let upload of uploads\"\n  [filename]=\"upload.file.name\"\n  [size]=\"upload.file.size\"\n  [progress]=\"progress[upload.id]\"\n  (onDelete)=\"removeFile(upload.id)\">\n</goa-file-upload-card>"
    },
    "webComponent": {
      "import": "import '@abgov/web-components'",
      "quickExample": "// Basic file upload setup\n<goa-file-upload-input \n  variant=\"dragdrop\"\n  maxfilesize=\"10MB\"\n  accept=\".pdf,.doc,.docx\">\n</goa-file-upload-input>\n\n<goa-file-upload-card\n  filename=\"document.pdf\"\n  size=\"1024000\"\n  progress=\"75\">\n</goa-file-upload-card>\n\n<script>\ndocument.querySelector('goa-file-upload-input').addEventListener('_selectFile', (e) => {\n  console.log('File selected:', e.detail.file);\n});\n</script>"
    }
  },

  "api": {
    "fileUploadInput": {
      "props": [
        {
          "name": "variant",
          "type": "\"dragdrop\" | \"button\"",
          "default": "\"dragdrop\"",
          "required": true,
          "description": "Upload interface type",
          "usage": "Use 'dragdrop' for main upload areas, 'button' for compact spaces or better accessibility"
        },
        {
          "name": "accept",
          "type": "string",
          "default": "\"*\"",
          "required": false,
          "description": "File types to accept",
          "usage": "Use MIME types ('image/*') or extensions ('.pdf,.doc,.docx')"
        },
        {
          "name": "maxFileSize",
          "type": "string",
          "required": false,
          "description": "Maximum file size with units",
          "usage": "Examples: '10MB', '500KB', '1GB' - provides user feedback only"
        },
        {
          "name": "testId",
          "type": "string", 
          "required": false,
          "description": "Test identifier for automation",
          "usage": "Use for QA testing and automation scripts"
        }
      ],
      "events": [
        {
          "name": "onSelectFile",
          "type": "(event: {file: File}) => void",
          "description": "Fired when user selects a file",
          "usage": "Handle file selection and start upload process"
        }
      ]
    },
    "fileUploadCard": {
      "props": [
        {
          "name": "filename",
          "type": "string",
          "required": true,
          "description": "Display name of the file",
          "usage": "Usually file.name from File object"
        },
        {
          "name": "type",
          "type": "string",
          "required": false,
          "description": "MIME type for icon display",
          "usage": "Use file.type from File object for appropriate icons"
        },
        {
          "name": "size",
          "type": "number",
          "required": false,
          "description": "File size in bytes",
          "usage": "Use file.size from File object - automatically formatted for display"
        },
        {
          "name": "progress",
          "type": "number",
          "required": false,
          "description": "Upload progress (0-100)",
          "usage": "0-99 shows uploading state, 100+ shows completed state"
        },
        {
          "name": "error",
          "type": "string",
          "required": false,
          "description": "Error message to display",
          "usage": "Show when upload fails or validation errors occur"
        },
        {
          "name": "testId",
          "type": "string",
          "required": false,
          "description": "Test identifier for automation",
          "usage": "Use for QA testing and automation scripts"
        }
      ],
      "events": [
        {
          "name": "onDelete",
          "type": "(event: {filename: string}) => void",
          "description": "Fired when delete button is clicked",
          "usage": "Remove file from upload list"
        },
        {
          "name": "onCancel",
          "type": "(event: {filename: string}) => void", 
          "description": "Fired when cancel button is clicked during upload",
          "usage": "Stop upload process and remove from list"
        }
      ]
    }
  },

  "usage": {
    "basicExamples": {
      "react": [
        {
          "title": "Simple Single File Upload",
          "code": "function SimpleUpload() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  const handleFileSelect = (event) => {\n    const file = event.file;\n    setSelectedFile(file);\n    \n    // Simulate upload progress\n    const uploader = simulateUpload(file);\n    uploader.onProgress = (progress) => setUploadProgress(progress);\n  };\n\n  const handleDelete = () => {\n    setSelectedFile(null);\n    setUploadProgress(0);\n  };\n\n  return (\n    <GoabFormItem label=\"Upload Document\">\n      <GoabFileUploadInput \n        variant=\"dragdrop\"\n        accept=\".pdf,.doc,.docx\"\n        maxFileSize=\"10MB\"\n        onSelectFile={handleFileSelect}\n      />\n      {selectedFile && (\n        <GoabFileUploadCard\n          filename={selectedFile.name}\n          type={selectedFile.type}\n          size={selectedFile.size}\n          progress={uploadProgress}\n          onDelete={handleDelete}\n          onCancel={handleDelete}\n        />\n      )}\n    </GoabFormItem>\n  );\n}"
        },
        {
          "title": "Multiple File Upload with State Management",
          "code": "function MultiFileUpload() {\n  const [uploads, setUploads] = useState([]);\n  const [progressList, setProgressList] = useState({});\n\n  const handleFileSelect = (event) => {\n    const file = event.file;\n    const uploadId = `${file.name}-${Date.now()}`;\n    \n    // Add to uploads list\n    setUploads(prev => [...prev, { id: uploadId, file }]);\n    \n    // Start upload with progress tracking\n    const uploader = new FileUploader(file);\n    uploader.onProgress = (progress) => {\n      setProgressList(prev => ({ ...prev, [uploadId]: progress }));\n    };\n    uploader.onComplete = () => {\n      setProgressList(prev => ({ ...prev, [uploadId]: 100 }));\n    };\n    uploader.onError = (error) => {\n      setUploads(prev => prev.map(upload => \n        upload.id === uploadId \n          ? { ...upload, error: error.message }\n          : upload\n      ));\n    };\n    \n    uploader.start();\n  };\n\n  const removeUpload = (uploadId) => {\n    setUploads(prev => prev.filter(upload => upload.id !== uploadId));\n    setProgressList(prev => {\n      const newProgress = { ...prev };\n      delete newProgress[uploadId];\n      return newProgress;\n    });\n  };\n\n  return (\n    <GoabFormItem label=\"Upload Multiple Files\">\n      <GoabFileUploadInput \n        variant=\"dragdrop\"\n        accept=\"image/*,.pdf\"\n        maxFileSize=\"5MB\"\n        onSelectFile={handleFileSelect}\n      />\n      {uploads.map(upload => (\n        <GoabFileUploadCard\n          key={upload.id}\n          filename={upload.file.name}\n          type={upload.file.type}\n          size={upload.file.size}\n          progress={progressList[upload.id] || 0}\n          error={upload.error}\n          onDelete={() => removeUpload(upload.id)}\n          onCancel={() => removeUpload(upload.id)}\n        />\n      ))}\n    </GoabFormItem>\n  );\n}"
        }
      ],
      "angular": [
        {
          "title": "Component Class Implementation", 
          "code": "export class FileUploadComponent {\n  uploads: Array<{id: string, file: File, error?: string}> = [];\n  progressList: Record<string, number> = {};\n\n  handleFileSelect(event: any) {\n    const file = event.file;\n    const uploadId = `${file.name}-${Date.now()}`;\n    \n    this.uploads.push({ id: uploadId, file });\n    \n    // Start upload process\n    const uploader = new FileUploader(file);\n    uploader.onProgress = (progress: number) => {\n      this.progressList[uploadId] = progress;\n    };\n    uploader.start();\n  }\n\n  removeUpload(uploadId: string) {\n    this.uploads = this.uploads.filter(upload => upload.id !== uploadId);\n    delete this.progressList[uploadId];\n  }\n}\n\n<!-- Template -->\n<goa-form-item label=\"Upload Files\">\n  <goa-file-upload-input \n    variant=\"dragdrop\"\n    accept=\".pdf,.jpg,.png\"\n    maxFileSize=\"10MB\"\n    (onSelectFile)=\"handleFileSelect($event)\">\n  </goa-file-upload-input>\n  \n  <goa-file-upload-card\n    *ngFor=\"let upload of uploads\"\n    [filename]=\"upload.file.name\"\n    [type]=\"upload.file.type\"\n    [size]=\"upload.file.size\"\n    [progress]=\"progressList[upload.id] || 0\"\n    [error]=\"upload.error\"\n    (onDelete)=\"removeUpload(upload.id)\"\n    (onCancel)=\"removeUpload(upload.id)\">\n  </goa-file-upload-card>\n</goa-form-item>"
        }
      ]
    },
    "commonPatterns": [
      {
        "name": "Form Integration",
        "description": "Integrate file upload with form validation and submission",
        "code": "// React form integration example\nfunction DocumentForm() {\n  const [formData, setFormData] = useState({ documents: [] });\n  const [uploadProgress, setUploadProgress] = useState({});\n\n  const handleFileSelect = async (event) => {\n    const file = event.file;\n    const uploadId = Date.now().toString();\n    \n    try {\n      // Upload file to server\n      const uploadedFile = await uploadFileToServer(file, (progress) => {\n        setUploadProgress(prev => ({ ...prev, [uploadId]: progress }));\n      });\n      \n      // Add to form data\n      setFormData(prev => ({\n        ...prev,\n        documents: [...prev.documents, { id: uploadId, ...uploadedFile }]\n      }));\n    } catch (error) {\n      console.error('Upload failed:', error);\n    }\n  };\n\n  const handleSubmit = () => {\n    // Submit form with document references\n    submitForm({ ...formData, documents: formData.documents });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <GoabFormItem label=\"Required Documents\">\n        <GoabFileUploadInput \n          variant=\"dragdrop\"\n          accept=\".pdf\"\n          maxFileSize=\"10MB\"\n          onSelectFile={handleFileSelect}\n        />\n        {formData.documents.map(doc => (\n          <GoabFileUploadCard\n            key={doc.id}\n            filename={doc.filename}\n            progress={uploadProgress[doc.id] || 100}\n            onDelete={() => removeDocument(doc.id)}\n          />\n        ))}\n      </GoabFormItem>\n      <GoabButton type=\"primary\" disabled={formData.documents.length === 0}>\n        Submit Application\n      </GoabButton>\n    </form>\n  );\n}"
      },
      {
        "name": "Image Upload with Preview",
        "description": "Handle image uploads with preview functionality",
        "code": "function ImageUpload() {\n  const [images, setImages] = useState([]);\n  const [previews, setPreviews] = useState({});\n\n  const handleImageSelect = (event) => {\n    const file = event.file;\n    const imageId = Date.now().toString();\n    \n    // Create preview\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      setPreviews(prev => ({ ...prev, [imageId]: e.target.result }));\n    };\n    reader.readAsDataURL(file);\n    \n    // Add to images list\n    setImages(prev => [...prev, { id: imageId, file }]);\n  };\n\n  return (\n    <div>\n      <GoabFileUploadInput \n        variant=\"dragdrop\"\n        accept=\"image/*\"\n        maxFileSize=\"5MB\"\n        onSelectFile={handleImageSelect}\n      />\n      \n      <div style={{ display: 'grid', gap: '1rem', gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))' }}>\n        {images.map(image => (\n          <div key={image.id}>\n            {previews[image.id] && (\n              <img \n                src={previews[image.id]} \n                alt={image.file.name}\n                style={{ width: '100%', height: '150px', objectFit: 'cover' }}\n              />\n            )}\n            <GoabFileUploadCard\n              filename={image.file.name}\n              size={image.file.size}\n              progress={100} // Assume immediate preview\n              onDelete={() => removeImage(image.id)}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}"
      }
    ]
  },

  "designGuidance": {
    "whenToUse": [
      "Users need to upload documents, images, or other files",
      "File attachment is required for form completion",
      "Multiple files need to be uploaded in sequence",
      "Progress feedback is important for large files"
    ],
    "whenNotToUse": [
      "For simple text input - use Input or TextArea instead",
      "For selecting from predefined options - use Dropdown or Radio buttons",
      "For immediate file processing without upload - consider alternative approaches"
    ],
    "bestPractices": [
      "Always provide clear file type and size restrictions",
      "Use dragdrop variant for primary upload areas",
      "Use button variant when space is limited or for better accessibility",
      "Provide immediate feedback on file selection and validation",
      "Show progress for uploads that take longer than 2-3 seconds",
      "Include error handling and clear error messages",
      "Allow users to remove files before and after upload"
    ],
    "contentGuidelines": [
      "Use clear, action-oriented instructions (e.g., 'Drag and drop your file here')",
      "Specify accepted file types and size limits clearly",
      "Provide helpful context about what the file will be used for",
      "Use concise error messages that explain how to fix the problem"
    ]
  },

  "accessibility": {
    "keyboardNavigation": [
      "Tab - Navigate to file input button",
      "Enter/Space - Open file picker dialog",
      "Escape - Close file picker dialog"
    ],
    "screenReader": [
      "File input announced with purpose and restrictions",
      "Upload progress announced via live regions",
      "File names and sizes announced when selected",
      "Error messages announced immediately"
    ],
    "focusManagement": [
      "Focus returns to upload area after file selection",
      "Clear focus indicators on all interactive elements",
      "Logical tab order through upload cards"
    ]
  },

  "troubleshooting": {
    "common": [
      {
        "issue": "Files not uploading despite selection",
        "cause": "No upload implementation provided",
        "solution": "FileUpload components only handle UI - implement actual upload logic in your onSelectFile handler using your preferred upload service"
      },
      {
        "issue": "Drag and drop not working",
        "cause": "Browser compatibility or JavaScript disabled",
        "solution": "Use button variant as fallback, ensure drag events are properly handled, check browser support"
      },
      {
        "issue": "File size validation not working",
        "cause": "maxFileSize is for display only",
        "solution": "Implement actual file size validation in your onSelectFile handler: if (file.size > maxSizeInBytes) { showError(); return; }"
      },
      {
        "issue": "Progress not updating",
        "cause": "Progress state not managed correctly",
        "solution": "Ensure progress prop is updated during upload process, use state management to track progress for each file"
      },
      {
        "issue": "Multiple files overriding each other",
        "cause": "Insufficient state management for multiple uploads",
        "solution": "Use unique IDs for each upload, maintain separate progress tracking for each file"
      }
    ],
    "integration": [
      {
        "issue": "FormItem validation not working with file uploads",
        "cause": "File validation handled separately from form validation",
        "solution": "Integrate file upload state with your form validation library, validate files in form submission handler"
      },
      {
        "issue": "Upload cards not displaying properly",
        "cause": "Missing required props or incorrect progress values",
        "solution": "Ensure filename is provided, progress is between 0-100, check for required File object properties"
      }
    ]
  },

  "relatedComponents": [
    {
      "name": "GoabFormItem",
      "usage": "Wrap file upload for form integration with labels and validation",
      "example": "<GoabFormItem label=\"Upload Resume\" error={fileError}>\n  <GoabFileUploadInput onSelectFile={handleFile} />\n</GoabFormItem>"
    },
    {
      "name": "GoabButton",
      "usage": "Trigger file selection in button variant or for custom upload triggers",
      "example": "Used internally in button variant for file selection"
    },
    {
      "name": "GoabProgressIndicator",
      "usage": "Additional progress visualization for complex upload scenarios",
      "example": "Use alongside FileUploadCard for detailed progress display"
    }
  ],

  "commonMistakes": [
    {
      "mistake": "Expecting built-in upload functionality",
      "why": "Components only provide UI - no upload implementation included",
      "instead": "Implement upload logic in onSelectFile handler using your preferred upload service",
      "example": "// ❌ Wrong - expecting automatic upload\n<GoabFileUploadInput variant=\"dragdrop\" />\n\n// ✅ Correct - handling upload yourself\n<GoabFileUploadInput \n  variant=\"dragdrop\"\n  onSelectFile={(event) => {\n    const file = event.file;\n    uploadToServer(file).then(result => {\n      // Handle upload result\n    });\n  }}\n/>"
    },
    {
      "mistake": "Using maxFileSize for actual validation",
      "why": "maxFileSize is for display/UI feedback only, not enforcement",
      "instead": "Validate file size in your onSelectFile handler",
      "example": "// ❌ Wrong - assuming maxFileSize prevents large files\n<GoabFileUploadInput maxFileSize=\"10MB\" />\n\n// ✅ Correct - validating in handler\n<GoabFileUploadInput \n  maxFileSize=\"10MB\"\n  onSelectFile={(event) => {\n    const file = event.file;\n    if (file.size > 10 * 1024 * 1024) {\n      setError('File too large');\n      return;\n    }\n    uploadFile(file);\n  }}\n/>"
    },
    {
      "mistake": "Not managing upload state properly",
      "why": "Components don't manage upload state internally",
      "instead": "Use React state to track uploads and progress",
      "example": "// ❌ Wrong - no state management\n<GoabFileUploadCard filename=\"doc.pdf\" />\n\n// ✅ Correct - managing state\nconst [uploads, setUploads] = useState([]);\nconst [progress, setProgress] = useState({});\n\n<GoabFileUploadCard\n  filename={upload.file.name}\n  progress={progress[upload.id] || 0}\n  onDelete={() => removeUpload(upload.id)}\n/>"
    },
    {
      "mistake": "Missing progress prop updates",
      "why": "Progress cards won't show upload status without progress updates",
      "instead": "Update progress prop during upload process",
      "example": "// ❌ Wrong - static progress\n<GoabFileUploadCard filename=\"file.pdf\" progress={0} />\n\n// ✅ Correct - dynamic progress\nuploader.onProgress = (percent) => {\n  setProgress(prev => ({ ...prev, [fileId]: percent }));\n};\n\n<GoabFileUploadCard\n  filename={file.name}\n  progress={progress[fileId] || 0}\n/>"
    }
  ],

  "frameworkNotes": {
    "propCasing": {
      "react": "Use camelCase: onSelectFile, maxFileSize, testId",
      "webComponent": "Use lowercase: onselectfile, maxfilesize, testid",
      "angular": "Use camelCase in templates: [maxFileSize], (onSelectFile)"
    },
    "slotHandling": {
      "react": "File upload components don't use slots - they're self-contained",
      "webComponent": "No slot content needed",
      "angular": "No content projection needed"
    },
    "constraints": {
      "fileObject": "All frameworks receive standard File objects from browser",
      "eventHandling": "Event details vary by framework - React gets synthetic events, web components get custom events",
      "validation": "File validation must be implemented by consuming application"
    },
    "responsiveBehavior": {
      "dragDrop": "Drag-drop variant automatically adjusts for mobile touch interactions",
      "button": "Button variant provides better mobile accessibility",
      "cards": "Upload cards stack vertically on mobile devices"
    }
  },

  "tags": ["form", "upload", "file", "drag-drop", "validation", "progress"],
  "category": "form",
  "status": "stable",
  "lastUpdated": "2025-07-02",
  "derivedFrom": {
    "maintainerVersion": "../maintainer/file-uploader.json",
    "note": "See maintainer version for implementation details and development information"
  }
}