{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "link-to-an-external-page",
  "recipeName": "Link to an External Page",
  "category": "navigation-pattern",
  "summary": "Create links to external websites with proper visual indicators and accessibility considerations",
  "serviceContext": {
    "useCase": "Provide users with clear visual indicators when links will navigate to external websites, ensuring they understand they are leaving the current government service",
    "userType": "both",
    "governmentServiceFlows": [
      "When citizens need to access related services or information on external government websites",
      "When workers need to reference external resources, documentation, or partner systems",
      "When users need to be directed to third-party services or verification systems",
      "When providing links to supporting documentation or resources hosted outside the current domain"
    ],
    "relatedPatterns": [
      "link-the-user-to-give-feedback-to-the-service",
      "include-a-link-in-the-helper-text-of-an-option",
      "show-links-to-navigation-items"
    ]
  },
  "components": [
    {
      "componentName": "GoabLink",
      "role": "External link container",
      "purpose": "Provide styled link wrapper with external link indicator and proper accessibility attributes"
    }
  ],
  "codeReference": {
    "exampleFile": "link-to-an-external-page.tsx",
    "linesOfCode": 16,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "low",
    "keyPatterns": [
      "GoabLink component with trailing icon for external link indication",
      "Open icon to visually indicate external navigation",
      "Proper anchor tag structure for external URL navigation",
      "Accessibility considerations for external link indication",
      "Consistent styling for external link patterns"
    ],
    "designPatterns": [
      "External link indication pattern",
      "Visual cue for navigation context",
      "Accessibility-first external linking",
      "Consistent government service navigation"
    ],
    "accessibility": [
      "External link icon provides visual indication for sighted users",
      "Screen readers should announce external navigation context",
      "Proper ARIA attributes for external link behavior",
      "Keyboard navigation maintains focus management across domains",
      "Clear link text describes destination or purpose"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabLink } from \"@abgov/react-components\";\nimport { useState } from \"react\";\n\nexport default function LinkToAnExternalPage() {\n  const [clickCount, setClickCount] = useState(0);\n\n  const handleExternalLinkClick = (url: string, linkText: string) => {\n    setClickCount(prev => prev + 1);\n    console.log(`External link clicked: ${linkText} -> ${url}`);\n    \n    // Track external link clicks for analytics\n    // analytics.track('external_link_clicked', { url, linkText });\n    \n    // Optional: Show confirmation dialog for external navigation\n    // const confirmed = window.confirm(\n    //   `You are about to leave this government service and go to an external website: ${url}. Continue?`\n    // );\n    // if (!confirmed) {\n    //   event.preventDefault();\n    // }\n  };\n\n  const externalLinks = [\n    {\n      url: \"https://www.alberta.ca\",\n      text: \"Alberta.ca homepage\",\n      description: \"Main Government of Alberta website\"\n    },\n    {\n      url: \"https://www.canada.ca\",\n      text: \"Canada.ca\",\n      description: \"Government of Canada services and information\"\n    },\n    {\n      url: \"https://www.servicealberta.ca\",\n      text: \"Service Alberta\",\n      description: \"Business and personal services\"\n    },\n    {\n      url: \"https://www.alberta.ca/health\",\n      text: \"Alberta Health Services\",\n      description: \"Health information and services\"\n    }\n  ];\n\n  const handleClick = (url: string, text: string) => {\n    return (event: React.MouseEvent<HTMLAnchorElement>) => {\n      handleExternalLinkClick(url, text);\n      // Let the browser handle the navigation\n    };\n  };\n\n  return (\n    <div className=\"external-links-example\">\n      <h2>External Resources</h2>\n      <p>The following links will take you to external websites:</p>\n      \n      <div className=\"links-grid\">\n        {externalLinks.map((link, index) => (\n          <div key={index} className=\"link-item\">\n            <GoabLink trailingIcon=\"open\">\n              <a \n                href={link.url} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                onClick={handleClick(link.url, link.text)}\n                aria-label={`${link.text} (opens in new tab)`}>\n                {link.text}\n              </a>\n            </GoabLink>\n            <p className=\"link-description\">{link.description}</p>\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"single-link-example\">\n        <h3>Individual External Link</h3>\n        <p>For more information about government services, visit:</p>\n        <GoabLink trailingIcon=\"open\">\n          <a \n            href=\"https://www.alberta.ca/services\" \n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n            onClick={handleClick(\"https://www.alberta.ca/services\", \"Alberta Services\")}\n            aria-label=\"Alberta Services (opens in new tab)\">\n            Alberta Services\n          </a>\n        </GoabLink>\n      </div>\n      \n      {clickCount > 0 && (\n        <div className=\"click-stats\">\n          <p>External links clicked: {clickCount}</p>\n        </div>\n      )}\n    </div>\n  );\n}",
      "key": "const [externalClickCount, setExternalClickCount] = useState(0);\nconst [confirmExternalNavigation, setConfirmExternalNavigation] = useState(true);\n\nconst externalLinkConfig = {\n  trackClicks: true,\n  openInNewTab: true,\n  showConfirmation: false,\n  securityHeaders: {\n    rel: 'noopener noreferrer',\n    target: '_blank'\n  }\n};\n\nconst handleExternalLinkClick = (url: string, linkText: string, event?: React.MouseEvent) => {\n  if (externalLinkConfig.trackClicks) {\n    setExternalClickCount(prev => prev + 1);\n    console.log(`External link clicked: ${linkText} -> ${url}`);\n    // Track for analytics\n    // analytics.track('external_link_clicked', { url, linkText, timestamp: new Date().toISOString() });\n  }\n  \n  if (externalLinkConfig.showConfirmation && event) {\n    const confirmed = window.confirm(\n      `You are about to leave this government service and go to an external website: ${url}. Continue?`\n    );\n    if (!confirmed) {\n      event.preventDefault();\n      return false;\n    }\n  }\n  \n  return true;\n};\n\nconst createExternalLink = (url: string, text: string, description?: string) => {\n  const linkProps = {\n    href: url,\n    ...(externalLinkConfig.openInNewTab && externalLinkConfig.securityHeaders),\n    'aria-label': `${text} (opens in new tab)`,\n    onClick: (event: React.MouseEvent<HTMLAnchorElement>) => handleExternalLinkClick(url, text, event)\n  };\n  \n  return (\n    <div className=\"external-link-wrapper\">\n      <GoabLink trailingIcon=\"open\">\n        <a {...linkProps}>{text}</a>\n      </GoabLink>\n      {description && <p className=\"link-description\">{description}</p>}\n    </div>\n  );\n};\n\nconst isExternalUrl = (url: string): boolean => {\n  try {\n    const urlObj = new URL(url);\n    return urlObj.hostname !== window.location.hostname;\n  } catch {\n    return false;\n  }\n};\n\nconst validateExternalLink = (url: string): { isValid: boolean; message?: string } => {\n  if (!url) {\n    return { isValid: false, message: 'URL is required' };\n  }\n  \n  if (!isExternalUrl(url)) {\n    return { isValid: false, message: 'URL must be external' };\n  }\n  \n  // Check if URL is from allowed domains (optional)\n  const allowedDomains = ['alberta.ca', 'canada.ca', 'servicealberta.ca'];\n  const urlObj = new URL(url);\n  const isAllowedDomain = allowedDomains.some(domain => urlObj.hostname.endsWith(domain));\n  \n  if (!isAllowedDomain) {\n    console.warn(`External link to non-government domain: ${urlObj.hostname}`);\n  }\n  \n  return { isValid: true };\n};\n\n<div className=\"external-links-example\">\n  <h2>External Resources</h2>\n  <p>The following links will take you to external websites:</p>\n  \n  <GoabLink trailingIcon=\"open\">\n    <a \n      href=\"https://www.alberta.ca\" \n      target=\"_blank\" \n      rel=\"noopener noreferrer\"\n      onClick={(e) => handleExternalLinkClick(\"https://www.alberta.ca\", \"Alberta.ca\", e)}\n      aria-label=\"Alberta.ca homepage (opens in new tab)\">\n      Alberta.ca homepage\n    </a>\n  </GoabLink>\n  \n  <GoabLink trailingIcon=\"open\">\n    <a \n      href=\"https://www.canada.ca\" \n      target=\"_blank\" \n      rel=\"noopener noreferrer\"\n      onClick={(e) => handleExternalLinkClick(\"https://www.canada.ca\", \"Canada.ca\", e)}\n      aria-label=\"Canada.ca (opens in new tab)\">\n      Canada.ca\n    </a>\n  </GoabLink>\n  \n  {externalClickCount > 0 && (\n    <div className=\"click-stats\">\n      <p>External links clicked: {externalClickCount}</p>\n    </div>\n  )}\n</div>\n\n/* CSS */\n.external-links-example {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.links-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: var(--goa-space-l);\n  margin-bottom: var(--goa-space-xl);\n}\n\n.link-item {\n  border: 1px solid var(--goa-color-border);\n  border-radius: var(--goa-border-radius-s);\n  padding: var(--goa-space-m);\n}\n\n.link-description {\n  margin-top: var(--goa-space-s);\n  font-size: var(--goa-font-size-s);\n  color: var(--goa-color-text-secondary);\n}\n\n.single-link-example {\n  margin-top: var(--goa-space-xl);\n  padding: var(--goa-space-l);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.click-stats {\n  margin-top: var(--goa-space-l);\n  padding: var(--goa-space-s);\n  background-color: var(--goa-color-info-light);\n  border-radius: var(--goa-border-radius-s);\n  font-size: var(--goa-font-size-s);\n}\n\n.external-link-wrapper {\n  margin-bottom: var(--goa-space-m);\n}\n\n.external-link-wrapper:last-child {\n  margin-bottom: 0;\n}"
    },
    "angular": {
      "complete": "export class LinkToAnExternalPageComponent {\n  clickCount = 0;\n  confirmExternalNavigation = true;\n  \n  externalLinks = [\n    {\n      url: \"https://www.alberta.ca\",\n      text: \"Alberta.ca homepage\",\n      description: \"Main Government of Alberta website\"\n    },\n    {\n      url: \"https://www.canada.ca\",\n      text: \"Canada.ca\",\n      description: \"Government of Canada services and information\"\n    },\n    {\n      url: \"https://www.servicealberta.ca\",\n      text: \"Service Alberta\",\n      description: \"Business and personal services\"\n    },\n    {\n      url: \"https://www.alberta.ca/health\",\n      text: \"Alberta Health Services\",\n      description: \"Health information and services\"\n    }\n  ];\n  \n  externalLinkConfig = {\n    trackClicks: true,\n    openInNewTab: true,\n    showConfirmation: false,\n    securityHeaders: {\n      rel: 'noopener noreferrer',\n      target: '_blank'\n    }\n  };\n\n  handleExternalLinkClick(url: string, linkText: string, event?: Event): boolean {\n    if (this.externalLinkConfig.trackClicks) {\n      this.clickCount++;\n      console.log(`External link clicked: ${linkText} -> ${url}`);\n      // Track for analytics\n      // this.analytics.track('external_link_clicked', { url, linkText, timestamp: new Date().toISOString() });\n    }\n    \n    if (this.externalLinkConfig.showConfirmation && event) {\n      const confirmed = window.confirm(\n        `You are about to leave this government service and go to an external website: ${url}. Continue?`\n      );\n      if (!confirmed) {\n        event.preventDefault();\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n  isExternalUrl(url: string): boolean {\n    try {\n      const urlObj = new URL(url);\n      return urlObj.hostname !== window.location.hostname;\n    } catch {\n      return false;\n    }\n  }\n\n  validateExternalLink(url: string): { isValid: boolean; message?: string } {\n    if (!url) {\n      return { isValid: false, message: 'URL is required' };\n    }\n    \n    if (!this.isExternalUrl(url)) {\n      return { isValid: false, message: 'URL must be external' };\n    }\n    \n    // Check if URL is from allowed domains (optional)\n    const allowedDomains = ['alberta.ca', 'canada.ca', 'servicealberta.ca'];\n    const urlObj = new URL(url);\n    const isAllowedDomain = allowedDomains.some(domain => urlObj.hostname.endsWith(domain));\n    \n    if (!isAllowedDomain) {\n      console.warn(`External link to non-government domain: ${urlObj.hostname}`);\n    }\n    \n    return { isValid: true };\n  }\n\n  getAriaLabel(text: string): string {\n    return `${text} (opens in new tab)`;\n  }\n\n  onLinkClick(url: string, text: string, event: Event) {\n    this.handleExternalLinkClick(url, text, event);\n  }\n}",
      "key": "clickCount = 0;\nconfirmExternalNavigation = true;\n\nexternalLinks = [\n  {\n    url: \"https://www.alberta.ca\",\n    text: \"Alberta.ca homepage\",\n    description: \"Main Government of Alberta website\"\n  },\n  {\n    url: \"https://www.canada.ca\",\n    text: \"Canada.ca\",\n    description: \"Government of Canada services and information\"\n  },\n  {\n    url: \"https://www.servicealberta.ca\",\n    text: \"Service Alberta\",\n    description: \"Business and personal services\"\n  }\n];\n\nexternalLinkConfig = {\n  trackClicks: true,\n  openInNewTab: true,\n  showConfirmation: false,\n  securityHeaders: {\n    rel: 'noopener noreferrer',\n    target: '_blank'\n  }\n};\n\nhandleExternalLinkClick(url: string, linkText: string, event?: Event): boolean {\n  if (this.externalLinkConfig.trackClicks) {\n    this.clickCount++;\n    console.log(`External link clicked: ${linkText} -> ${url}`);\n    // Track for analytics\n  }\n  \n  if (this.externalLinkConfig.showConfirmation && event) {\n    const confirmed = window.confirm(\n      `You are about to leave this government service and go to an external website: ${url}. Continue?`\n    );\n    if (!confirmed) {\n      event.preventDefault();\n      return false;\n    }\n  }\n  \n  return true;\n}\n\nisExternalUrl(url: string): boolean {\n  try {\n    const urlObj = new URL(url);\n    return urlObj.hostname !== window.location.hostname;\n  } catch {\n    return false;\n  }\n}\n\ngetAriaLabel(text: string): string {\n  return `${text} (opens in new tab)`;\n}\n\nonLinkClick(url: string, text: string, event: Event) {\n  this.handleExternalLinkClick(url, text, event);\n}\n\n<!-- Template -->\n<div class=\"external-links-example\">\n  <h2>External Resources</h2>\n  <p>The following links will take you to external websites:</p>\n  \n  <div class=\"links-grid\">\n    <div class=\"link-item\" *ngFor=\"let link of externalLinks\">\n      <goab-link trailingIcon=\"open\">\n        <a \n          [href]=\"link.url\" \n          target=\"_blank\" \n          rel=\"noopener noreferrer\"\n          [attr.aria-label]=\"getAriaLabel(link.text)\"\n          (click)=\"onLinkClick(link.url, link.text, $event)\">\n          {{ link.text }}\n        </a>\n      </goab-link>\n      <p class=\"link-description\">{{ link.description }}</p>\n    </div>\n  </div>\n  \n  <div class=\"single-link-example\">\n    <h3>Individual External Link</h3>\n    <p>For more information about government services, visit:</p>\n    <goab-link trailingIcon=\"open\">\n      <a \n        href=\"https://www.alberta.ca/services\" \n        target=\"_blank\" \n        rel=\"noopener noreferrer\"\n        [attr.aria-label]=\"getAriaLabel('Alberta Services')\"\n        (click)=\"onLinkClick('https://www.alberta.ca/services', 'Alberta Services', $event)\">\n        Alberta Services\n      </a>\n    </goab-link>\n  </div>\n  \n  <div class=\"click-stats\" *ngIf=\"clickCount > 0\">\n    <p>External links clicked: {{ clickCount }}</p>\n  </div>\n</div>"
    }
  },
  "tags": [
    "external-link",
    "navigation",
    "link-component",
    "external-indicator",
    "security",
    "accessibility",
    "government-links",
    "new-tab",
    "link-tracking",
    "user-guidance"
  ]
}