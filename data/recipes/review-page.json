{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "review-page",
  "recipeName": "Review Page",
  "category": "form-pattern",
  "summary": "Allow users to review and verify their submitted information before final submission, with options to change answers and clear indication of what will be submitted",
  "serviceContext": {
    "useCase": "Provide users with opportunity to review, verify, and modify their form responses before final submission, ensuring accuracy and user confidence",
    "userType": "both",
    "governmentServiceFlows": [
      "When citizens complete multi-step applications that require verification before submission",
      "When workers process complex forms with multiple sections requiring review",
      "When users need to confirm all information is correct before irreversible submission",
      "When forms contain critical information that must be verified for accuracy"
    ],
    "relatedPatterns": [
      "public-form",
      "question-page",
      "result-page",
      "confirm-a-change"
    ]
  },
  "components": [
    {
      "componentName": "GoabTab",
      "role": "Content organization",
      "purpose": "Organize review page documentation into code examples and design guidelines"
    },
    {
      "componentName": "GoabTabs",
      "role": "Navigation container",
      "purpose": "Provide tabbed interface for accessing different aspects of review page guidance"
    },
    {
      "componentName": "GoabText",
      "role": "Content display",
      "purpose": "Present structured text content with consistent typography and spacing"
    }
  ],
  "codeReference": {
    "exampleFile": "review-page.tsx",
    "linesOfCode": 72,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "high",
    "keyPatterns": [
      "Comprehensive review of all form sections with clear organization",
      "Change links with accessible labels for individual form sections",
      "Clear indication of skipped or optional questions as 'Not provided'",
      "Accessible change links with hidden context for screen readers",
      "Section-based organization for large forms with multiple parts",
      "Final submission confirmation with clear understanding of next steps"
    ],
    "designPatterns": [
      "Information verification workflow",
      "Error prevention through review",
      "Accessible change functionality",
      "Form completion confirmation",
      "User confidence building"
    ],
    "accessibility": [
      "Change links include hidden question context for screen readers",
      "Clear indication of provided vs missing information",
      "Logical review order matching original form flow",
      "Accessible links with proper labeling and context",
      "Clear submission confirmation and next steps"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabTab, GoabTabs, GoabText, GoabButton, GoabButtonGroup, GoabCallout } from \"@abgov/react-components\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function ReviewPage() {\n  const [activeTab, setActiveTab] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submissionError, setSubmissionError] = useState<string>('');\n\n  const navigate = useNavigate();\n\n  const formData = {\n    personalInfo: {\n      section: 'Personal Information',\n      questions: [\n        {\n          id: 'full-name',\n          question: 'What is your full name?',\n          answer: 'John Michael Smith',\n          provided: true\n        },\n        {\n          id: 'date-of-birth',\n          question: 'What is your date of birth?',\n          answer: 'March 15, 1985',\n          provided: true\n        },\n        {\n          id: 'phone-number',\n          question: 'What is your phone number?',\n          answer: 'Not provided',\n          provided: false\n        }\n      ]\n    },\n    addressInfo: {\n      section: 'Address Information',\n      questions: [\n        {\n          id: 'home-address',\n          question: 'What is your home address?',\n          answer: '123 Main Street, Calgary, AB T2P 1A1',\n          provided: true\n        },\n        {\n          id: 'mailing-address',\n          question: 'Is your mailing address different?',\n          answer: 'No',\n          provided: true\n        }\n      ]\n    },\n    employmentInfo: {\n      section: 'Employment Information',\n      questions: [\n        {\n          id: 'employment-status',\n          question: 'What is your employment status?',\n          answer: 'Employed full-time',\n          provided: true\n        },\n        {\n          id: 'employer-name',\n          question: 'Who is your employer?',\n          answer: 'Alberta Government',\n          provided: true\n        },\n        {\n          id: 'annual-income',\n          question: 'What is your annual income?',\n          answer: 'Not provided',\n          provided: false\n        }\n      ]\n    }\n  };\n\n  const handleTabChange = (tabIndex: number) => {\n    setActiveTab(tabIndex);\n  };\n\n  const handleChangeAnswer = (sectionKey: string, questionId: string) => {\n    console.log('Navigating to change answer:', { sectionKey, questionId });\n    \n    // Track analytics for changes\n    trackAnalytics('change_answer_clicked', {\n      section: sectionKey,\n      question: questionId,\n      fromReviewPage: true\n    });\n    \n    // Navigate to specific question with return context\n    navigate(`/form/${sectionKey}/${questionId}?return=review`);\n  };\n\n  const handleBackToForm = () => {\n    navigate('/form/employment-info');\n  };\n\n  const validateFormCompletion = (): { isValid: boolean; missingRequired: string[] } => {\n    const missingRequired: string[] = [];\n    \n    Object.values(formData).forEach(section => {\n      section.questions.forEach(question => {\n        // Check if required questions are missing (this would be configured elsewhere)\n        if (isRequiredQuestion(question.id) && !question.provided) {\n          missingRequired.push(`${section.section}: ${question.question}`);\n        }\n      });\n    });\n    \n    return {\n      isValid: missingRequired.length === 0,\n      missingRequired\n    };\n  };\n\n  const isRequiredQuestion = (questionId: string): boolean => {\n    const requiredQuestions = ['full-name', 'date-of-birth', 'home-address', 'employment-status'];\n    return requiredQuestions.includes(questionId);\n  };\n\n  const handleSubmit = async () => {\n    const validation = validateFormCompletion();\n    \n    if (!validation.isValid) {\n      setSubmissionError(`Please complete the following required fields: ${validation.missingRequired.join(', ')}`);\n      return;\n    }\n    \n    setIsSubmitting(true);\n    setSubmissionError('');\n    \n    try {\n      // Simulate API submission\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Track successful submission\n      trackAnalytics('form_submitted', {\n        sections: Object.keys(formData),\n        totalQuestions: getTotalQuestionCount(),\n        completedQuestions: getCompletedQuestionCount()\n      });\n      \n      console.log('Form submitted successfully:', formData);\n      \n      // Navigate to success page\n      navigate('/form/success');\n      \n    } catch (error) {\n      console.error('Submission error:', error);\n      setSubmissionError('There was an error submitting your form. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const trackAnalytics = (event: string, data: any) => {\n    console.log('Analytics:', event, data);\n  };\n\n  const getTotalQuestionCount = (): number => {\n    return Object.values(formData).reduce((total, section) => {\n      return total + section.questions.length;\n    }, 0);\n  };\n\n  const getCompletedQuestionCount = (): number => {\n    return Object.values(formData).reduce((total, section) => {\n      return total + section.questions.filter(q => q.provided).length;\n    }, 0);\n  };\n\n  const getSubmitButtonText = (): string => {\n    if (isSubmitting) return 'Submitting application...';\n    return 'Submit application';\n  };\n\n  const renderQuestionReview = (section: any, sectionKey: string) => {\n    return (\n      <div key={sectionKey} className=\"review-section\">\n        <h3 className=\"section-title\">{section.section}</h3>\n        \n        <dl className=\"question-list\">\n          {section.questions.map((question: any) => (\n            <div key={question.id} className=\"question-item\">\n              <dt className=\"question-label\">{question.question}</dt>\n              <dd className=\"question-answer\">\n                <div className=\"answer-content\">\n                  <span className={`answer-text ${!question.provided ? 'not-provided' : ''}`}>\n                    {question.answer}\n                  </span>\n                  <button\n                    type=\"button\"\n                    className=\"change-link\"\n                    onClick={() => handleChangeAnswer(sectionKey, question.id)}\n                    aria-label={`Change ${question.question}`}>\n                    Change\n                    <span className=\"visually-hidden\"> {question.question}</span>\n                  </button>\n                </div>\n              </dd>\n            </div>\n          ))}\n        </dl>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"review-page-container\">\n      <GoabTabs initialTab={activeTab} onChange={handleTabChange}>\n        <GoabTab heading=\"Code examples\">\n          <div className=\"code-examples-section\">\n            <h3>Review Page Implementation</h3>\n            <p>Code examples for implementing review pages would be displayed here...</p>\n          </div>\n        </GoabTab>\n\n        <GoabTab heading=\"Design guidelines\">\n          <div className=\"design-guidelines-section\">\n            <div className=\"review-page-overview\">\n              <img\n                alt=\"review page overview\"\n                src=\"/images/patterns/form-pattern_review-page.png\"\n              />\n            </div>\n\n            <section className=\"review-content\">\n              <div className=\"page-header\">\n                <h1>Review your application</h1>\n                <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n                  Please review your answers before submitting your application. \n                  You can change any answer by clicking the 'Change' link next to each section.\n                </GoabText>\n              </div>\n\n              <div className=\"form-review\">\n                {Object.entries(formData).map(([sectionKey, section]) => \n                  renderQuestionReview(section, sectionKey)\n                )}\n              </div>\n\n              <div className=\"completion-summary\">\n                <GoabCallout type=\"information\" heading=\"Application Summary\">\n                  <p>\n                    You have completed {getCompletedQuestionCount()} of {getTotalQuestionCount()} questions.\n                    {getCompletedQuestionCount() < getTotalQuestionCount() && \n                      ' Some optional questions were not answered, which is okay.'}\n                  </p>\n                </GoabCallout>\n              </div>\n\n              {submissionError && (\n                <div className=\"submission-error\" role=\"alert\">\n                  <h3>Please review the following:</h3>\n                  <p>{submissionError}</p>\n                </div>\n              )}\n\n              <div className=\"review-actions\">\n                <GoabButtonGroup alignment=\"start\" gap=\"m\">\n                  <GoabButton\n                    type=\"primary\"\n                    onClick={handleSubmit}\n                    disabled={isSubmitting}>\n                    {getSubmitButtonText()}\n                  </GoabButton>\n                  <GoabButton\n                    type=\"secondary\"\n                    onClick={handleBackToForm}\n                    disabled={isSubmitting}>\n                    Back to form\n                  </GoabButton>\n                </GoabButtonGroup>\n              </div>\n            </section>\n          </div>\n        </GoabTab>\n      </GoabTabs>\n    </div>\n  );\n}",
      "key": "const [isSubmitting, setIsSubmitting] = useState(false);\nconst [submissionError, setSubmissionError] = useState<string>('');\n\nconst formData = {\n  personalInfo: {\n    section: 'Personal Information',\n    questions: [\n      {\n        id: 'full-name',\n        question: 'What is your full name?',\n        answer: 'John Michael Smith',\n        provided: true\n      },\n      {\n        id: 'phone-number',\n        question: 'What is your phone number?',\n        answer: 'Not provided',\n        provided: false\n      }\n    ]\n  }\n};\n\nconst handleChangeAnswer = (sectionKey: string, questionId: string) => {\n  console.log('Navigating to change answer:', { sectionKey, questionId });\n  \n  // Track analytics for changes\n  trackAnalytics('change_answer_clicked', {\n    section: sectionKey,\n    question: questionId,\n    fromReviewPage: true\n  });\n  \n  // Navigate to specific question with return context\n  navigate(`/form/${sectionKey}/${questionId}?return=review`);\n};\n\nconst validateFormCompletion = (): { isValid: boolean; missingRequired: string[] } => {\n  const missingRequired: string[] = [];\n  \n  Object.values(formData).forEach(section => {\n    section.questions.forEach(question => {\n      if (isRequiredQuestion(question.id) && !question.provided) {\n        missingRequired.push(`${section.section}: ${question.question}`);\n      }\n    });\n  });\n  \n  return {\n    isValid: missingRequired.length === 0,\n    missingRequired\n  };\n};\n\nconst handleSubmit = async () => {\n  const validation = validateFormCompletion();\n  \n  if (!validation.isValid) {\n    setSubmissionError(`Please complete the following required fields: ${validation.missingRequired.join(', ')}`);\n    return;\n  }\n  \n  setIsSubmitting(true);\n  setSubmissionError('');\n  \n  try {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    trackAnalytics('form_submitted', {\n      sections: Object.keys(formData),\n      totalQuestions: getTotalQuestionCount(),\n      completedQuestions: getCompletedQuestionCount()\n    });\n    \n    console.log('Form submitted successfully:', formData);\n    navigate('/form/success');\n    \n  } catch (error) {\n    console.error('Submission error:', error);\n    setSubmissionError('There was an error submitting your form. Please try again.');\n  } finally {\n    setIsSubmitting(false);\n  }\n};\n\nconst isRequiredQuestion = (questionId: string): boolean => {\n  const requiredQuestions = ['full-name', 'date-of-birth', 'home-address', 'employment-status'];\n  return requiredQuestions.includes(questionId);\n};\n\nconst getTotalQuestionCount = (): number => {\n  return Object.values(formData).reduce((total, section) => {\n    return total + section.questions.length;\n  }, 0);\n};\n\nconst getCompletedQuestionCount = (): number => {\n  return Object.values(formData).reduce((total, section) => {\n    return total + section.questions.filter(q => q.provided).length;\n  }, 0);\n};\n\nconst renderQuestionReview = (section: any, sectionKey: string) => {\n  return (\n    <div key={sectionKey} className=\"review-section\">\n      <h3 className=\"section-title\">{section.section}</h3>\n      \n      <dl className=\"question-list\">\n        {section.questions.map((question: any) => (\n          <div key={question.id} className=\"question-item\">\n            <dt className=\"question-label\">{question.question}</dt>\n            <dd className=\"question-answer\">\n              <div className=\"answer-content\">\n                <span className={`answer-text ${!question.provided ? 'not-provided' : ''}`}>\n                  {question.answer}\n                </span>\n                <button\n                  type=\"button\"\n                  className=\"change-link\"\n                  onClick={() => handleChangeAnswer(sectionKey, question.id)}\n                  aria-label={`Change ${question.question}`}>\n                  Change\n                  <span className=\"visually-hidden\"> {question.question}</span>\n                </button>\n              </div>\n            </dd>\n          </div>\n        ))}\n      </dl>\n    </div>\n  );\n};\n\n<div className=\"review-page-container\">\n  <section className=\"review-content\">\n    <div className=\"page-header\">\n      <h1>Review your application</h1>\n      <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n        Please review your answers before submitting your application. \n        You can change any answer by clicking the 'Change' link next to each section.\n      </GoabText>\n    </div>\n\n    <div className=\"form-review\">\n      {Object.entries(formData).map(([sectionKey, section]) => \n        renderQuestionReview(section, sectionKey)\n      )}\n    </div>\n\n    {submissionError && (\n      <div className=\"submission-error\" role=\"alert\">\n        <h3>Please review the following:</h3>\n        <p>{submissionError}</p>\n      </div>\n    )}\n\n    <div className=\"review-actions\">\n      <GoabButtonGroup alignment=\"start\" gap=\"m\">\n        <GoabButton\n          type=\"primary\"\n          onClick={handleSubmit}\n          disabled={isSubmitting}>\n          {isSubmitting ? 'Submitting application...' : 'Submit application'}\n        </GoabButton>\n        <GoabButton\n          type=\"secondary\"\n          onClick={() => navigate('/form/employment-info')}\n          disabled={isSubmitting}>\n          Back to form\n        </GoabButton>\n      </GoabButtonGroup>\n    </div>\n  </section>\n</div>\n\n/* CSS */\n.review-page-container {\n  max-width: 1000px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.review-section {\n  margin-bottom: var(--goa-space-2xl);\n  border-bottom: 1px solid var(--goa-color-border);\n  padding-bottom: var(--goa-space-xl);\n}\n\n.review-section:last-child {\n  border-bottom: none;\n}\n\n.section-title {\n  margin-bottom: var(--goa-space-l);\n  color: var(--goa-color-text);\n}\n\n.question-list {\n  margin: 0;\n}\n\n.question-item {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  gap: var(--goa-space-m);\n  margin-bottom: var(--goa-space-l);\n  align-items: start;\n}\n\n@media (max-width: 768px) {\n  .question-item {\n    grid-template-columns: 1fr;\n    gap: var(--goa-space-s);\n  }\n}\n\n.question-label {\n  font-weight: 600;\n  color: var(--goa-color-text);\n  margin: 0;\n}\n\n.question-answer {\n  margin: 0;\n}\n\n.answer-content {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  gap: var(--goa-space-m);\n}\n\n.answer-text {\n  flex: 1;\n  color: var(--goa-color-text);\n}\n\n.answer-text.not-provided {\n  color: var(--goa-color-text-secondary);\n  font-style: italic;\n}\n\n.change-link {\n  background: none;\n  border: none;\n  color: var(--goa-color-interactive);\n  text-decoration: underline;\n  cursor: pointer;\n  font-size: var(--goa-font-size-m);\n  white-space: nowrap;\n}\n\n.change-link:hover {\n  color: var(--goa-color-interactive-hover);\n}\n\n.visually-hidden {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n.completion-summary {\n  margin: var(--goa-space-xl) 0;\n}\n\n.submission-error {\n  background-color: var(--goa-color-emergency-light);\n  border-left: 4px solid var(--goa-color-emergency);\n  padding: var(--goa-space-m);\n  margin: var(--goa-space-l) 0;\n  border-radius: var(--goa-border-radius-s);\n}\n\n.submission-error h3 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-emergency-dark);\n}\n\n.submission-error p {\n  margin: 0;\n  color: var(--goa-color-emergency-dark);\n}\n\n.review-actions {\n  margin-top: var(--goa-space-2xl);\n  padding-top: var(--goa-space-l);\n  border-top: 1px solid var(--goa-color-border);\n}"
    },
    "angular": {
      "complete": "export class ReviewPageComponent {\n  isSubmitting: boolean = false;\n  submissionError: string = '';\n\n  formData = {\n    personalInfo: {\n      section: 'Personal Information',\n      questions: [\n        {\n          id: 'full-name',\n          question: 'What is your full name?',\n          answer: 'John Michael Smith',\n          provided: true\n        },\n        {\n          id: 'phone-number',\n          question: 'What is your phone number?',\n          answer: 'Not provided',\n          provided: false\n        }\n      ]\n    }\n  };\n\n  handleChangeAnswer(sectionKey: string, questionId: string) {\n    console.log('Navigating to change answer:', { sectionKey, questionId });\n    \n    this.trackAnalytics('change_answer_clicked', {\n      section: sectionKey,\n      question: questionId,\n      fromReviewPage: true\n    });\n    \n    // Navigate to specific question with return context\n    // this.router.navigate(['/form', sectionKey, questionId], { queryParams: { return: 'review' } });\n  }\n\n  validateFormCompletion(): { isValid: boolean; missingRequired: string[] } {\n    const missingRequired: string[] = [];\n    \n    Object.values(this.formData).forEach(section => {\n      section.questions.forEach(question => {\n        if (this.isRequiredQuestion(question.id) && !question.provided) {\n          missingRequired.push(`${section.section}: ${question.question}`);\n        }\n      });\n    });\n    \n    return {\n      isValid: missingRequired.length === 0,\n      missingRequired\n    };\n  }\n\n  async handleSubmit() {\n    const validation = this.validateFormCompletion();\n    \n    if (!validation.isValid) {\n      this.submissionError = `Please complete the following required fields: ${validation.missingRequired.join(', ')}`;\n      return;\n    }\n    \n    this.isSubmitting = true;\n    this.submissionError = '';\n    \n    try {\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      this.trackAnalytics('form_submitted', {\n        sections: Object.keys(this.formData),\n        totalQuestions: this.getTotalQuestionCount(),\n        completedQuestions: this.getCompletedQuestionCount()\n      });\n      \n      console.log('Form submitted successfully:', this.formData);\n      // this.router.navigate(['/form/success']);\n      \n    } catch (error) {\n      console.error('Submission error:', error);\n      this.submissionError = 'There was an error submitting your form. Please try again.';\n    } finally {\n      this.isSubmitting = false;\n    }\n  }\n\n  trackAnalytics(event: string, data: any) {\n    console.log('Analytics:', event, data);\n  }\n\n  isRequiredQuestion(questionId: string): boolean {\n    const requiredQuestions = ['full-name', 'date-of-birth', 'home-address', 'employment-status'];\n    return requiredQuestions.includes(questionId);\n  }\n\n  getTotalQuestionCount(): number {\n    return Object.values(this.formData).reduce((total, section) => {\n      return total + section.questions.length;\n    }, 0);\n  }\n\n  getCompletedQuestionCount(): number {\n    return Object.values(this.formData).reduce((total, section) => {\n      return total + section.questions.filter(q => q.provided).length;\n    }, 0);\n  }\n\n  getSubmitButtonText(): string {\n    if (this.isSubmitting) return 'Submitting application...';\n    return 'Submit application';\n  }\n\n  getFormDataEntries() {\n    return Object.entries(this.formData);\n  }\n}",
      "key": "isSubmitting: boolean = false;\nsubmissionError: string = '';\n\nformData = {\n  personalInfo: {\n    section: 'Personal Information',\n    questions: [\n      {\n        id: 'full-name',\n        question: 'What is your full name?',\n        answer: 'John Michael Smith',\n        provided: true\n      },\n      {\n        id: 'phone-number',\n        question: 'What is your phone number?',\n        answer: 'Not provided',\n        provided: false\n      }\n    ]\n  }\n};\n\nhandleChangeAnswer(sectionKey: string, questionId: string) {\n  console.log('Navigating to change answer:', { sectionKey, questionId });\n  \n  this.trackAnalytics('change_answer_clicked', {\n    section: sectionKey,\n    question: questionId,\n    fromReviewPage: true\n  });\n}\n\nvalidateFormCompletion(): { isValid: boolean; missingRequired: string[] } {\n  const missingRequired: string[] = [];\n  \n  Object.values(this.formData).forEach(section => {\n    section.questions.forEach(question => {\n      if (this.isRequiredQuestion(question.id) && !question.provided) {\n        missingRequired.push(`${section.section}: ${question.question}`);\n      }\n    });\n  });\n  \n  return {\n    isValid: missingRequired.length === 0,\n    missingRequired\n  };\n}\n\nasync handleSubmit() {\n  const validation = this.validateFormCompletion();\n  \n  if (!validation.isValid) {\n    this.submissionError = `Please complete the following required fields: ${validation.missingRequired.join(', ')}`;\n    return;\n  }\n  \n  this.isSubmitting = true;\n  this.submissionError = '';\n  \n  try {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    this.trackAnalytics('form_submitted', {\n      sections: Object.keys(this.formData),\n      totalQuestions: this.getTotalQuestionCount(),\n      completedQuestions: this.getCompletedQuestionCount()\n    });\n    \n    console.log('Form submitted successfully:', this.formData);\n    \n  } catch (error) {\n    console.error('Submission error:', error);\n    this.submissionError = 'There was an error submitting your form. Please try again.';\n  } finally {\n    this.isSubmitting = false;\n  }\n}\n\nisRequiredQuestion(questionId: string): boolean {\n  const requiredQuestions = ['full-name', 'date-of-birth', 'home-address', 'employment-status'];\n  return requiredQuestions.includes(questionId);\n}\n\ngetTotalQuestionCount(): number {\n  return Object.values(this.formData).reduce((total, section) => {\n    return total + section.questions.length;\n  }, 0);\n}\n\ngetCompletedQuestionCount(): number {\n  return Object.values(this.formData).reduce((total, section) => {\n    return total + section.questions.filter(q => q.provided).length;\n  }, 0);\n}\n\ngetSubmitButtonText(): string {\n  if (this.isSubmitting) return 'Submitting application...';\n  return 'Submit application';\n}\n\ngetFormDataEntries() {\n  return Object.entries(this.formData);\n}\n\n<!-- Template -->\n<div class=\"review-page-container\">\n  <section class=\"review-content\">\n    <div class=\"page-header\">\n      <h1>Review your application</h1>\n      <goab-text size=\"body-m\" mt=\"l\" mb=\"l\">\n        Please review your answers before submitting your application. \n        You can change any answer by clicking the 'Change' link next to each section.\n      </goab-text>\n    </div>\n\n    <div class=\"form-review\">\n      <div class=\"review-section\" *ngFor=\"let section of getFormDataEntries(); let i = index\">\n        <h3 class=\"section-title\">{{ section[1].section }}</h3>\n        \n        <dl class=\"question-list\">\n          <div class=\"question-item\" *ngFor=\"let question of section[1].questions\">\n            <dt class=\"question-label\">{{ question.question }}</dt>\n            <dd class=\"question-answer\">\n              <div class=\"answer-content\">\n                <span [class]=\"'answer-text' + (!question.provided ? ' not-provided' : '')\">\n                  {{ question.answer }}\n                </span>\n                <button\n                  type=\"button\"\n                  class=\"change-link\"\n                  (click)=\"handleChangeAnswer(section[0], question.id)\"\n                  [attr.aria-label]=\"'Change ' + question.question\">\n                  Change\n                  <span class=\"visually-hidden\"> {{ question.question }}</span>\n                </button>\n              </div>\n            </dd>\n          </div>\n        </dl>\n      </div>\n    </div>\n\n    <div class=\"submission-error\" role=\"alert\" *ngIf=\"submissionError\">\n      <h3>Please review the following:</h3>\n      <p>{{ submissionError }}</p>\n    </div>\n\n    <div class=\"review-actions\">\n      <goab-button-group alignment=\"start\" gap=\"m\">\n        <goab-button\n          type=\"primary\"\n          (onClick)=\"handleSubmit()\"\n          [disabled]=\"isSubmitting\">\n          {{ getSubmitButtonText() }}\n        </goab-button>\n        <goab-button\n          type=\"secondary\"\n          [disabled]=\"isSubmitting\">\n          Back to form\n        </goab-button>\n      </goab-button-group>\n    </div>\n  </section>\n</div>"
    }
  },
  "tags": [
    "review-page",
    "form-pattern",
    "form-verification",
    "change-answers",
    "form-submission",
    "information-review",
    "form-completion",
    "user-verification",
    "form-validation",
    "submission-confirmation"
  ]
}