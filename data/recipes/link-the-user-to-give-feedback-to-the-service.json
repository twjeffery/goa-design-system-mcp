{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "link-the-user-to-give-feedback-to-the-service",
  "recipeName": "Link the User to Give Feedback to the Service",
  "category": "navigation-pattern",
  "summary": "Provide users with a direct way to give feedback about the service through integrated feedback links in the application header",
  "serviceContext": {
    "useCase": "Enable users to provide feedback about government services to help improve service quality and user experience",
    "userType": "both",
    "governmentServiceFlows": [
      "When citizens use alpha or beta government services that need user feedback for improvement",
      "When workers use internal applications where feedback helps improve workflow and usability",
      "When services need continuous improvement based on user experience feedback",
      "When government services require public input for service optimization and enhancement"
    ],
    "relatedPatterns": [
      "header-with-navigation",
      "link-to-an-external-page",
      "communicate-a-future-service-outage"
    ]
  },
  "components": [
    {
      "componentName": "GoabMicrositeHeader",
      "role": "Government service header",
      "purpose": "Provide standard government branding with integrated feedback functionality for services in development"
    }
  ],
  "codeReference": {
    "exampleFile": "link-the-user-to-give-feedback-to-the-service.tsx",
    "linesOfCode": 20,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "low",
    "keyPatterns": [
      "Microsite header with feedback click handler integration",
      "Service type specification (alpha, beta, live) for appropriate feedback context",
      "Custom feedback handling through onFeedbackClick callback",
      "Integration with government service branding standards",
      "User feedback collection for service improvement"
    ],
    "designPatterns": [
      "Integrated feedback collection",
      "Government service header pattern",
      "User experience improvement workflow",
      "Service development feedback loop"
    ],
    "accessibility": [
      "Feedback link is keyboard accessible and clearly labeled",
      "Screen readers can identify and access feedback functionality",
      "Feedback link follows government accessibility standards",
      "Clear indication of feedback purpose and destination",
      "Proper focus management for feedback interactions"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabMicrositeHeader } from \"@abgov/react-components\";\nimport { useState } from \"react\";\n\nexport default function LinkTheUserToGiveFeedbackToTheService() {\n  const [feedbackSubmitted, setFeedbackSubmitted] = useState(false);\n  const [feedbackCount, setFeedbackCount] = useState(0);\n\n  const handleFeedbackClick = () => {\n    console.log(\"Feedback clicked\");\n    setFeedbackCount(prev => prev + 1);\n    \n    // Handle feedback collection\n    // Option 1: Open external feedback form\n    // window.open('https://alberta.ca/feedback', '_blank');\n    \n    // Option 2: Open modal with feedback form\n    // setShowFeedbackModal(true);\n    \n    // Option 3: Navigate to feedback page\n    // window.location.href = '/feedback';\n    \n    // Option 4: Show confirmation\n    alert(\"Thank you for your feedback! Your input helps us improve this service.\");\n    setFeedbackSubmitted(true);\n    \n    // Reset feedback submitted state after 3 seconds\n    setTimeout(() => {\n      setFeedbackSubmitted(false);\n    }, 3000);\n  };\n\n  const getServiceType = () => {\n    // Determine service type based on environment or configuration\n    const environment = process.env.NODE_ENV;\n    if (environment === 'development') return 'alpha';\n    if (environment === 'staging') return 'beta';\n    return 'live';\n  };\n\n  const shouldShowFeedback = () => {\n    // Only show feedback for alpha and beta services\n    const serviceType = getServiceType();\n    return serviceType === 'alpha' || serviceType === 'beta';\n  };\n\n  const handleFeedbackSubmit = (feedbackData: any) => {\n    console.log('Feedback submitted:', feedbackData);\n    // Process feedback submission\n    // Send to analytics or feedback collection service\n  };\n\n  return (\n    <div className=\"feedback-service-example\">\n      <GoabMicrositeHeader \n        type={getServiceType()} \n        onFeedbackClick={shouldShowFeedback() ? handleFeedbackClick : undefined} \n      />\n      \n      <main className=\"service-content\">\n        <h1>Government Service Application</h1>\n        <p>This is an {getServiceType()} service. Your feedback helps us improve.</p>\n        \n        {feedbackSubmitted && (\n          <div className=\"feedback-confirmation\">\n            <p>âœ“ Thank you for your feedback!</p>\n          </div>\n        )}\n        \n        {feedbackCount > 0 && (\n          <div className=\"feedback-stats\">\n            <p>Feedback clicks: {feedbackCount}</p>\n          </div>\n        )}\n        \n        <div className=\"service-features\">\n          <h2>Service Features</h2>\n          <ul>\n            <li>Feature 1 - Currently in development</li>\n            <li>Feature 2 - Please provide feedback</li>\n            <li>Feature 3 - Help us improve this</li>\n          </ul>\n        </div>\n      </main>\n    </div>\n  );\n}",
      "key": "const [feedbackModal, setFeedbackModal] = useState(false);\nconst [serviceType, setServiceType] = useState<'alpha' | 'beta' | 'live'>('alpha');\nconst [feedbackData, setFeedbackData] = useState(null);\n\nconst feedbackConfig = {\n  alpha: {\n    message: 'This is an alpha service. Your feedback helps us improve.',\n    feedbackUrl: 'https://alberta.ca/feedback/alpha',\n    showFeedback: true\n  },\n  beta: {\n    message: 'This is a beta service. Please share your experience.',\n    feedbackUrl: 'https://alberta.ca/feedback/beta',\n    showFeedback: true\n  },\n  live: {\n    message: 'This is a live service.',\n    feedbackUrl: 'https://alberta.ca/feedback/general',\n    showFeedback: false\n  }\n};\n\nconst handleFeedbackClick = () => {\n  console.log('Feedback clicked for service type:', serviceType);\n  \n  const config = feedbackConfig[serviceType];\n  \n  // Track feedback interaction\n  trackFeedbackInteraction(serviceType);\n  \n  // Handle feedback based on service type\n  if (config.feedbackUrl) {\n    window.open(config.feedbackUrl, '_blank');\n  } else {\n    setFeedbackModal(true);\n  }\n};\n\nconst trackFeedbackInteraction = (type: string) => {\n  // Send analytics event\n  console.log(`Feedback interaction tracked for ${type} service`);\n  // analytics.track('feedback_clicked', { service_type: type });\n};\n\nconst handleFeedbackSubmit = (data: any) => {\n  setFeedbackData(data);\n  console.log('Feedback submitted:', data);\n  // Process feedback submission\n  // Send to feedback collection service\n};\n\nconst shouldShowFeedback = () => {\n  return feedbackConfig[serviceType].showFeedback;\n};\n\nconst getServiceMessage = () => {\n  return feedbackConfig[serviceType].message;\n};\n\n<div className=\"feedback-service-example\">\n  <GoabMicrositeHeader \n    type={serviceType} \n    onFeedbackClick={shouldShowFeedback() ? handleFeedbackClick : undefined} \n  />\n  \n  <main className=\"service-content\">\n    <div className=\"service-status\">\n      <p>{getServiceMessage()}</p>\n    </div>\n    \n    <h1>Government Service Application</h1>\n    \n    {feedbackModal && (\n      <div className=\"feedback-modal\">\n        <div className=\"modal-content\">\n          <h2>Provide Feedback</h2>\n          <form onSubmit={(e) => {\n            e.preventDefault();\n            handleFeedbackSubmit(new FormData(e.target));\n            setFeedbackModal(false);\n          }}>\n            <textarea \n              name=\"feedback\" \n              placeholder=\"Tell us about your experience...\"\n              required\n            />\n            <button type=\"submit\">Submit Feedback</button>\n            <button type=\"button\" onClick={() => setFeedbackModal(false)}>Cancel</button>\n          </form>\n        </div>\n      </div>\n    )}\n  </main>\n</div>\n\n/* CSS */\n.feedback-service-example {\n  width: 100%;\n}\n\n.service-content {\n  padding: var(--goa-space-l);\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.service-status {\n  background-color: var(--goa-color-info-light);\n  padding: var(--goa-space-m);\n  border-radius: var(--goa-border-radius-s);\n  margin-bottom: var(--goa-space-l);\n}\n\n.feedback-confirmation {\n  background-color: var(--goa-color-success-light);\n  padding: var(--goa-space-m);\n  border-radius: var(--goa-border-radius-s);\n  margin-bottom: var(--goa-space-l);\n  border-left: 4px solid var(--goa-color-success);\n}\n\n.feedback-stats {\n  font-size: var(--goa-font-size-s);\n  color: var(--goa-color-text-secondary);\n  margin-bottom: var(--goa-space-l);\n}\n\n.feedback-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background: white;\n  padding: var(--goa-space-xl);\n  border-radius: var(--goa-border-radius-m);\n  max-width: 500px;\n  width: 90%;\n}\n\n.modal-content textarea {\n  width: 100%;\n  height: 100px;\n  margin-bottom: var(--goa-space-m);\n  padding: var(--goa-space-s);\n  border: 1px solid var(--goa-color-border);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.modal-content button {\n  margin-right: var(--goa-space-s);\n  padding: var(--goa-space-s) var(--goa-space-m);\n  border: 1px solid var(--goa-color-border);\n  border-radius: var(--goa-border-radius-s);\n  background: var(--goa-color-background);\n  cursor: pointer;\n}\n\n.modal-content button[type=\"submit\"] {\n  background: var(--goa-color-interactive);\n  color: white;\n  border-color: var(--goa-color-interactive);\n}\n\n.modal-content button[type=\"submit\"]:hover {\n  background: var(--goa-color-interactive-hover);\n}"
    },
    "angular": {
      "complete": "export class LinkTheUserToGiveFeedbackToTheServiceComponent {\n  feedbackSubmitted = false;\n  feedbackCount = 0;\n  serviceType: 'alpha' | 'beta' | 'live' = 'alpha';\n  feedbackModal = false;\n  \n  feedbackConfig = {\n    alpha: {\n      message: 'This is an alpha service. Your feedback helps us improve.',\n      feedbackUrl: 'https://alberta.ca/feedback/alpha',\n      showFeedback: true\n    },\n    beta: {\n      message: 'This is a beta service. Please share your experience.',\n      feedbackUrl: 'https://alberta.ca/feedback/beta',\n      showFeedback: true\n    },\n    live: {\n      message: 'This is a live service.',\n      feedbackUrl: 'https://alberta.ca/feedback/general',\n      showFeedback: false\n    }\n  };\n\n  handleFeedbackClick() {\n    console.log('Feedback clicked for service type:', this.serviceType);\n    this.feedbackCount++;\n    \n    const config = this.feedbackConfig[this.serviceType];\n    \n    // Track feedback interaction\n    this.trackFeedbackInteraction(this.serviceType);\n    \n    // Handle feedback based on service type\n    if (config.feedbackUrl) {\n      window.open(config.feedbackUrl, '_blank');\n    } else {\n      this.feedbackModal = true;\n    }\n    \n    // Show confirmation\n    this.feedbackSubmitted = true;\n    \n    // Reset feedback submitted state after 3 seconds\n    setTimeout(() => {\n      this.feedbackSubmitted = false;\n    }, 3000);\n  }\n\n  trackFeedbackInteraction(type: string) {\n    console.log(`Feedback interaction tracked for ${type} service`);\n    // analytics.track('feedback_clicked', { service_type: type });\n  }\n\n  handleFeedbackSubmit(feedbackData: any) {\n    console.log('Feedback submitted:', feedbackData);\n    this.feedbackModal = false;\n    // Process feedback submission\n    // Send to feedback collection service\n  }\n\n  shouldShowFeedback(): boolean {\n    return this.feedbackConfig[this.serviceType].showFeedback;\n  }\n\n  getServiceMessage(): string {\n    return this.feedbackConfig[this.serviceType].message;\n  }\n\n  getServiceType(): 'alpha' | 'beta' | 'live' {\n    // Determine service type based on environment or configuration\n    const environment = (window as any).environment || 'development';\n    if (environment === 'development') return 'alpha';\n    if (environment === 'staging') return 'beta';\n    return 'live';\n  }\n\n  closeFeedbackModal() {\n    this.feedbackModal = false;\n  }\n}",
      "key": "feedbackSubmitted = false;\nfeedbackCount = 0;\nserviceType: 'alpha' | 'beta' | 'live' = 'alpha';\nfeedbackModal = false;\n\nfeedbackConfig = {\n  alpha: {\n    message: 'This is an alpha service. Your feedback helps us improve.',\n    feedbackUrl: 'https://alberta.ca/feedback/alpha',\n    showFeedback: true\n  },\n  beta: {\n    message: 'This is a beta service. Please share your experience.',\n    feedbackUrl: 'https://alberta.ca/feedback/beta',\n    showFeedback: true\n  },\n  live: {\n    message: 'This is a live service.',\n    feedbackUrl: 'https://alberta.ca/feedback/general',\n    showFeedback: false\n  }\n};\n\nhandleFeedbackClick() {\n  console.log('Feedback clicked for service type:', this.serviceType);\n  this.feedbackCount++;\n  \n  const config = this.feedbackConfig[this.serviceType];\n  \n  this.trackFeedbackInteraction(this.serviceType);\n  \n  if (config.feedbackUrl) {\n    window.open(config.feedbackUrl, '_blank');\n  } else {\n    this.feedbackModal = true;\n  }\n  \n  this.feedbackSubmitted = true;\n  \n  setTimeout(() => {\n    this.feedbackSubmitted = false;\n  }, 3000);\n}\n\ntrackFeedbackInteraction(type: string) {\n  console.log(`Feedback interaction tracked for ${type} service`);\n  // analytics.track('feedback_clicked', { service_type: type });\n}\n\nhandleFeedbackSubmit(feedbackData: any) {\n  console.log('Feedback submitted:', feedbackData);\n  this.feedbackModal = false;\n  // Process feedback submission\n}\n\nshouldShowFeedback(): boolean {\n  return this.feedbackConfig[this.serviceType].showFeedback;\n}\n\ngetServiceMessage(): string {\n  return this.feedbackConfig[this.serviceType].message;\n}\n\ngetServiceType(): 'alpha' | 'beta' | 'live' {\n  const environment = (window as any).environment || 'development';\n  if (environment === 'development') return 'alpha';\n  if (environment === 'staging') return 'beta';\n  return 'live';\n}\n\ncloseFeedbackModal() {\n  this.feedbackModal = false;\n}\n\n<!-- Template -->\n<div class=\"feedback-service-example\">\n  <goab-microsite-header \n    [type]=\"serviceType\" \n    [onFeedbackClick]=\"shouldShowFeedback() ? handleFeedbackClick : undefined\">\n  </goab-microsite-header>\n  \n  <main class=\"service-content\">\n    <div class=\"service-status\">\n      <p>{{ getServiceMessage() }}</p>\n    </div>\n    \n    <h1>Government Service Application</h1>\n    \n    <div class=\"feedback-confirmation\" *ngIf=\"feedbackSubmitted\">\n      <p>âœ“ Thank you for your feedback!</p>\n    </div>\n    \n    <div class=\"feedback-stats\" *ngIf=\"feedbackCount > 0\">\n      <p>Feedback clicks: {{ feedbackCount }}</p>\n    </div>\n    \n    <div class=\"service-features\">\n      <h2>Service Features</h2>\n      <ul>\n        <li>Feature 1 - Currently in development</li>\n        <li>Feature 2 - Please provide feedback</li>\n        <li>Feature 3 - Help us improve this</li>\n      </ul>\n    </div>\n  </main>\n  \n  <div class=\"feedback-modal\" *ngIf=\"feedbackModal\">\n    <div class=\"modal-content\">\n      <h2>Provide Feedback</h2>\n      <form (submit)=\"handleFeedbackSubmit($event); $event.preventDefault()\">\n        <textarea \n          name=\"feedback\" \n          placeholder=\"Tell us about your experience...\"\n          required>\n        </textarea>\n        <button type=\"submit\">Submit Feedback</button>\n        <button type=\"button\" (click)=\"closeFeedbackModal()\">Cancel</button>\n      </form>\n    </div>\n  </div>\n</div>"
    }
  },
  "tags": [
    "feedback",
    "microsite-header",
    "user-feedback",
    "service-improvement",
    "government-service",
    "alpha-service",
    "beta-service",
    "user-experience",
    "service-development",
    "feedback-collection"
  ]
}