{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "review-and-action",
  "recipeName": "Review and Action",
  "category": "layout-pattern",
  "summary": "Display detailed information alongside an action form, allowing users to review data and take informed decisions or actions",
  "serviceContext": {
    "useCase": "Present users with comprehensive information review capabilities paired with immediate action options, enabling informed decision-making in government workflows",
    "userType": "worker",
    "governmentServiceFlows": [
      "When workers review case details and need to make decisions or take actions",
      "When processing applications that require detailed review and approval/denial workflows",
      "When adjudicating requests that need comprehensive information analysis",
      "When workers need to see full context before making administrative decisions"
    ],
    "relatedPatterns": [
      "review-page",
      "card-view-of-case-files",
      "confirm-a-change",
      "display-user-information"
    ]
  },
  "components": [
    {
      "componentName": "GoabContainer",
      "role": "Content organization",
      "purpose": "Separate review information from action form with visual distinction and proper spacing"
    },
    {
      "componentName": "GoabGrid",
      "role": "Layout structure",
      "purpose": "Organize containers in responsive grid layout for optimal information display"
    },
    {
      "componentName": "GoabBlock",
      "role": "Information grouping",
      "purpose": "Group related data fields with consistent spacing and alignment"
    },
    {
      "componentName": "GoabFormItem",
      "role": "Form field container",
      "purpose": "Wrap action form controls with proper labeling and spacing"
    },
    {
      "componentName": "GoabRadioGroup",
      "role": "Decision selection",
      "purpose": "Allow users to make primary decision choices in action workflow"
    },
    {
      "componentName": "GoabDropdown",
      "role": "Option selection",
      "purpose": "Provide structured selection for reasons or categories"
    },
    {
      "componentName": "GoabTextarea",
      "role": "Text input",
      "purpose": "Capture detailed explanations or messages as part of action workflow"
    },
    {
      "componentName": "GoabButton",
      "role": "Action trigger",
      "purpose": "Submit the action form after review and decision-making"
    }
  ],
  "codeReference": {
    "exampleFile": "review-and-action.tsx",
    "linesOfCode": 187,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "high",
    "keyPatterns": [
      "Side-by-side layout with review information and action form",
      "Responsive grid that adapts to different screen sizes",
      "Clear visual separation between informational and interactive content",
      "Structured data display with consistent labeling patterns",
      "Form validation and state management for action workflow",
      "Nested containers for complex information hierarchy"
    ],
    "designPatterns": [
      "Information-action pairing",
      "Contextual decision making",
      "Administrative workflow support",
      "Responsive layout design",
      "Form-based action processing"
    ],
    "accessibility": [
      "Clear heading hierarchy for screen reader navigation",
      "Proper form labeling and association",
      "Logical tab order from review to action",
      "Distinct visual separation between content types",
      "Accessible form controls with appropriate ARIA attributes"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabBlock, GoabButton, GoabContainer, GoabDropdown, GoabDropdownItem, GoabFormItem, GoabGrid, GoabRadioGroup, GoabRadioItem, GoabTextarea } from \"@abgov/react-components\";\nimport { GoabRadioGroupOnChangeDetail, GoabDropdownOnChangeDetail, GoabTextAreaOnChangeDetail } from \"@abgov/ui-components-common\";\nimport { useState } from \"react\";\n\nexport default function ReviewAndAction() {\n  const [caseDecision, setCaseDecision] = useState<string>('');\n  const [denialReason, setDenialReason] = useState<string>('');\n  const [message, setMessage] = useState<string>('');\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n\n  const caseData = {\n    accusedName: \"Doe, John Scott\",\n    dateOfBirth: \"Mar 14, 2021\",\n    courtLocation: \"Calgary\",\n    appearanceDate: \"Sep 20, 2021\",\n    dockets: [\n      {\n        id: \"12345678\",\n        charges: [\n          \"CC 334(1) - Theft under $5000\",\n          \"CC 268(1) - Aggravated assault\"\n        ]\n      },\n      {\n        id: \"87654321\",\n        charges: [\n          \"CC 334(1) - Theft under $5000\",\n          \"CC 268(1) - Aggravated assault\"\n        ]\n      },\n      {\n        id: \"11223344\",\n        charges: [\n          \"CC 334(1) - Theft under $5000\",\n          \"CC 268(1) - Aggravated assault\"\n        ]\n      }\n    ]\n  };\n\n  const denialReasons = [\n    { value: \"1\", label: \"Incomplete Application\" },\n    { value: \"2\", label: \"Eligibility Criteria Not Met\" },\n    { value: \"3\", label: \"Documentation Verification Failure\" },\n    { value: \"4\", label: \"Insufficient Supporting Evidence\" },\n    { value: \"5\", label: \"Procedural Requirements Not Met\" }\n  ];\n\n  const handleCaseDecisionChange = (event: GoabRadioGroupOnChangeDetail) => {\n    setCaseDecision(event.value);\n    \n    // Clear denial reason if granting\n    if (event.value === 'grant') {\n      setDenialReason('');\n    }\n    \n    // Clear validation errors\n    if (validationErrors.caseDecision) {\n      setValidationErrors(prev => ({ ...prev, caseDecision: '' }));\n    }\n    \n    console.log('Case decision changed:', event.value);\n  };\n\n  const handleDenialReasonChange = (event: GoabDropdownOnChangeDetail) => {\n    setDenialReason(event.value);\n    \n    // Clear validation errors\n    if (validationErrors.denialReason) {\n      setValidationErrors(prev => ({ ...prev, denialReason: '' }));\n    }\n    \n    console.log('Denial reason changed:', event.value);\n  };\n\n  const handleMessageChange = (event: GoabTextAreaOnChangeDetail) => {\n    setMessage(event.value);\n    \n    // Clear validation errors\n    if (validationErrors.message) {\n      setValidationErrors(prev => ({ ...prev, message: '' }));\n    }\n    \n    console.log('Message changed:', event.value);\n  };\n\n  const validateForm = (): boolean => {\n    const errors: Record<string, string> = {};\n    \n    if (!caseDecision) {\n      errors.caseDecision = 'Please select grant or deny';\n    }\n    \n    if (caseDecision === 'deny' && !denialReason) {\n      errors.denialReason = 'Please select a reason for denial';\n    }\n    \n    if (!message.trim()) {\n      errors.message = 'Please provide a message';\n    }\n    \n    if (message.trim().length < 10) {\n      errors.message = 'Message must be at least 10 characters';\n    }\n    \n    setValidationErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async () => {\n    if (!validateForm()) {\n      return;\n    }\n    \n    setIsSubmitting(true);\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      const submissionData = {\n        caseDecision,\n        denialReason: caseDecision === 'deny' ? denialReason : null,\n        message,\n        caseId: caseData.accusedName,\n        timestamp: new Date().toISOString()\n      };\n      \n      console.log('Form submitted:', submissionData);\n      \n      // Reset form or navigate to success page\n      alert('Adjournment request processed successfully');\n      \n    } catch (error) {\n      console.error('Error submitting form:', error);\n      setValidationErrors({ submit: 'Failed to process request. Please try again.' });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const isDenialReasonRequired = (): boolean => {\n    return caseDecision === 'deny';\n  };\n\n  const getSubmitButtonText = (): string => {\n    if (isSubmitting) return 'Processing...';\n    return 'Confirm';\n  };\n\n  const isFormValid = (): boolean => {\n    return caseDecision !== '' && message.trim() !== '' && \n           (!isDenialReasonRequired() || denialReason !== '');\n  };\n\n  return (\n    <div className=\"review-and-action-container\">\n      <GoabGrid minChildWidth=\"315px\" gap=\"l\">\n        <GoabContainer accent=\"thin\" type=\"non-interactive\">\n          <h3 className=\"section-heading\">Appearance Details</h3>\n          \n          <GoabGrid minChildWidth=\"40%\" gap=\"m\">\n            <GoabBlock direction=\"column\" gap=\"xs\">\n              <label className=\"field-label\">Accused name</label>\n              <span className=\"field-content\">{caseData.accusedName}</span>\n            </GoabBlock>\n\n            <GoabBlock direction=\"column\" gap=\"xs\">\n              <label className=\"field-label\">Date of birth</label>\n              <span className=\"field-content\">{caseData.dateOfBirth}</span>\n            </GoabBlock>\n\n            <GoabBlock direction=\"column\" gap=\"xs\">\n              <label className=\"field-label\">Court location</label>\n              <span className=\"field-content\">{caseData.courtLocation}</span>\n            </GoabBlock>\n\n            <GoabBlock direction=\"column\" gap=\"xs\">\n              <label className=\"field-label\">Upcoming appearance date(s)</label>\n              <span className=\"field-content\">{caseData.appearanceDate}</span>\n            </GoabBlock>\n          </GoabGrid>\n\n          <h5 className=\"subsection-heading\">Docket number(s) & charges</h5>\n          \n          {caseData.dockets.map((docket, index) => (\n            <GoabContainer key={docket.id} type=\"non-interactive\" mt=\"m\">\n              <h6 className=\"docket-heading\">{index + 1}) {docket.id}</h6>\n              {docket.charges.map((charge, chargeIndex) => (\n                <p key={chargeIndex} className=\"charge-content\">{charge}</p>\n              ))}\n            </GoabContainer>\n          ))}\n        </GoabContainer>\n\n        <GoabContainer accent=\"thin\" width=\"content\">\n          <form onSubmit={(e) => { e.preventDefault(); handleSubmit(); }}>\n            <h3 className=\"section-heading\">Adjournment Request</h3>\n            <p className=\"form-description\">\n              Review the case details and make a decision on the adjournment request. \n              Provide clear reasoning for your decision.\n            </p>\n\n            <GoabFormItem \n              label=\"Case history and new request\" \n              error={validationErrors.caseDecision}\n              required\n              mt=\"l\">\n              <GoabRadioGroup \n                name=\"case\" \n                value={caseDecision}\n                onChange={handleCaseDecisionChange}\n                error={!!validationErrors.caseDecision}>\n                <GoabRadioItem value=\"grant\" label=\"Grant\" />\n                <GoabRadioItem value=\"deny\" label=\"Deny\" />\n              </GoabRadioGroup>\n            </GoabFormItem>\n\n            {isDenialReasonRequired() && (\n              <GoabFormItem \n                label=\"Reason to deny\" \n                error={validationErrors.denialReason}\n                required\n                mt=\"l\">\n                <GoabDropdown \n                  name=\"reason\" \n                  width=\"100%\" \n                  value={denialReason}\n                  onChange={handleDenialReasonChange}\n                  placeholder=\"Select a reason\"\n                  error={!!validationErrors.denialReason}>\n                  {denialReasons.map((reason) => (\n                    <GoabDropdownItem \n                      key={reason.value}\n                      value={reason.value} \n                      label={reason.label} \n                    />\n                  ))}\n                </GoabDropdown>\n              </GoabFormItem>\n            )}\n\n            <GoabFormItem \n              label=\"Message\" \n              error={validationErrors.message}\n              helperText=\"Provide detailed explanation for your decision\"\n              required\n              mt=\"l\">\n              <GoabTextarea \n                name=\"message\" \n                rows={5} \n                width=\"100%\" \n                value={message} \n                onChange={handleMessageChange}\n                placeholder=\"Enter your message here...\"\n                error={!!validationErrors.message}\n              />\n            </GoabFormItem>\n\n            {validationErrors.submit && (\n              <div className=\"error-message\" role=\"alert\">\n                {validationErrors.submit}\n              </div>\n            )}\n\n            <GoabButton \n              type=\"primary\"\n              onClick={handleSubmit}\n              disabled={!isFormValid() || isSubmitting}\n              mt=\"xl\">\n              {getSubmitButtonText()}\n            </GoabButton>\n          </form>\n        </GoabContainer>\n      </GoabGrid>\n    </div>\n  );\n}",
      "key": "const [caseDecision, setCaseDecision] = useState<string>('');\nconst [denialReason, setDenialReason] = useState<string>('');\nconst [message, setMessage] = useState<string>('');\nconst [isSubmitting, setIsSubmitting] = useState<boolean>(false);\nconst [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n\nconst caseData = {\n  accusedName: \"Doe, John Scott\",\n  dateOfBirth: \"Mar 14, 2021\",\n  courtLocation: \"Calgary\",\n  appearanceDate: \"Sep 20, 2021\",\n  dockets: [\n    {\n      id: \"12345678\",\n      charges: [\"CC 334(1) - Theft under $5000\", \"CC 268(1) - Aggravated assault\"]\n    }\n  ]\n};\n\nconst denialReasons = [\n  { value: \"1\", label: \"Incomplete Application\" },\n  { value: \"2\", label: \"Eligibility Criteria Not Met\" },\n  { value: \"3\", label: \"Documentation Verification Failure\" }\n];\n\nconst handleCaseDecisionChange = (event: GoabRadioGroupOnChangeDetail) => {\n  setCaseDecision(event.value);\n  \n  if (event.value === 'grant') {\n    setDenialReason('');\n  }\n  \n  if (validationErrors.caseDecision) {\n    setValidationErrors(prev => ({ ...prev, caseDecision: '' }));\n  }\n};\n\nconst handleDenialReasonChange = (event: GoabDropdownOnChangeDetail) => {\n  setDenialReason(event.value);\n  \n  if (validationErrors.denialReason) {\n    setValidationErrors(prev => ({ ...prev, denialReason: '' }));\n  }\n};\n\nconst handleMessageChange = (event: GoabTextAreaOnChangeDetail) => {\n  setMessage(event.value);\n  \n  if (validationErrors.message) {\n    setValidationErrors(prev => ({ ...prev, message: '' }));\n  }\n};\n\nconst validateForm = (): boolean => {\n  const errors: Record<string, string> = {};\n  \n  if (!caseDecision) {\n    errors.caseDecision = 'Please select grant or deny';\n  }\n  \n  if (caseDecision === 'deny' && !denialReason) {\n    errors.denialReason = 'Please select a reason for denial';\n  }\n  \n  if (!message.trim()) {\n    errors.message = 'Please provide a message';\n  }\n  \n  setValidationErrors(errors);\n  return Object.keys(errors).length === 0;\n};\n\nconst handleSubmit = async () => {\n  if (!validateForm()) {\n    return;\n  }\n  \n  setIsSubmitting(true);\n  \n  try {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    const submissionData = {\n      caseDecision,\n      denialReason: caseDecision === 'deny' ? denialReason : null,\n      message,\n      timestamp: new Date().toISOString()\n    };\n    \n    console.log('Form submitted:', submissionData);\n    \n  } catch (error) {\n    console.error('Error submitting form:', error);\n    setValidationErrors({ submit: 'Failed to process request. Please try again.' });\n  } finally {\n    setIsSubmitting(false);\n  }\n};\n\nconst isDenialReasonRequired = (): boolean => {\n  return caseDecision === 'deny';\n};\n\nconst isFormValid = (): boolean => {\n  return caseDecision !== '' && message.trim() !== '' && \n         (!isDenialReasonRequired() || denialReason !== '');\n};\n\n<div className=\"review-and-action-container\">\n  <GoabGrid minChildWidth=\"315px\" gap=\"l\">\n    <GoabContainer accent=\"thin\" type=\"non-interactive\">\n      <h3 className=\"section-heading\">Appearance Details</h3>\n      \n      <GoabGrid minChildWidth=\"40%\" gap=\"m\">\n        <GoabBlock direction=\"column\" gap=\"xs\">\n          <label className=\"field-label\">Accused name</label>\n          <span className=\"field-content\">{caseData.accusedName}</span>\n        </GoabBlock>\n        \n        <GoabBlock direction=\"column\" gap=\"xs\">\n          <label className=\"field-label\">Date of birth</label>\n          <span className=\"field-content\">{caseData.dateOfBirth}</span>\n        </GoabBlock>\n      </GoabGrid>\n      \n      <h5 className=\"subsection-heading\">Docket number(s) & charges</h5>\n      \n      {caseData.dockets.map((docket, index) => (\n        <GoabContainer key={docket.id} type=\"non-interactive\" mt=\"m\">\n          <h6 className=\"docket-heading\">{index + 1}) {docket.id}</h6>\n          {docket.charges.map((charge, chargeIndex) => (\n            <p key={chargeIndex} className=\"charge-content\">{charge}</p>\n          ))}\n        </GoabContainer>\n      ))}\n    </GoabContainer>\n\n    <GoabContainer accent=\"thin\" width=\"content\">\n      <form onSubmit={(e) => { e.preventDefault(); handleSubmit(); }}>\n        <h3 className=\"section-heading\">Adjournment Request</h3>\n        \n        <GoabFormItem \n          label=\"Case history and new request\" \n          error={validationErrors.caseDecision}\n          required\n          mt=\"l\">\n          <GoabRadioGroup \n            name=\"case\" \n            value={caseDecision}\n            onChange={handleCaseDecisionChange}\n            error={!!validationErrors.caseDecision}>\n            <GoabRadioItem value=\"grant\" label=\"Grant\" />\n            <GoabRadioItem value=\"deny\" label=\"Deny\" />\n          </GoabRadioGroup>\n        </GoabFormItem>\n\n        {isDenialReasonRequired() && (\n          <GoabFormItem \n            label=\"Reason to deny\" \n            error={validationErrors.denialReason}\n            required\n            mt=\"l\">\n            <GoabDropdown \n              name=\"reason\" \n              width=\"100%\" \n              value={denialReason}\n              onChange={handleDenialReasonChange}\n              error={!!validationErrors.denialReason}>\n              {denialReasons.map((reason) => (\n                <GoabDropdownItem \n                  key={reason.value}\n                  value={reason.value} \n                  label={reason.label} \n                />\n              ))}\n            </GoabDropdown>\n          </GoabFormItem>\n        )}\n\n        <GoabFormItem \n          label=\"Message\" \n          error={validationErrors.message}\n          required\n          mt=\"l\">\n          <GoabTextarea \n            name=\"message\" \n            rows={5} \n            width=\"100%\" \n            value={message} \n            onChange={handleMessageChange}\n            error={!!validationErrors.message}\n          />\n        </GoabFormItem>\n\n        <GoabButton \n          type=\"primary\"\n          onClick={handleSubmit}\n          disabled={!isFormValid() || isSubmitting}\n          mt=\"xl\">\n          {isSubmitting ? 'Processing...' : 'Confirm'}\n        </GoabButton>\n      </form>\n    </GoabContainer>\n  </GoabGrid>\n</div>\n\n/* CSS */\n.review-and-action-container {\n  max-width: 1400px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.section-heading {\n  margin-bottom: var(--goa-space-m);\n  color: var(--goa-color-text);\n}\n\n.field-label {\n  font: var(--goa-typography-body-s);\n  color: var(--goa-color-text-secondary);\n  font-weight: 600;\n}\n\n.field-content {\n  font: var(--goa-typography-body-m);\n  color: var(--goa-color-text);\n}\n\n.subsection-heading {\n  font: var(--goa-typography-body-m);\n  color: var(--goa-color-text-secondary);\n  margin-top: var(--goa-space-m);\n  margin-bottom: var(--goa-space-m);\n  font-weight: 600;\n}\n\n.docket-heading {\n  font: var(--goa-typography-heading-s);\n  margin-top: 0;\n  margin-bottom: var(--goa-space-xs);\n  color: var(--goa-color-text);\n}\n\n.charge-content {\n  margin-bottom: var(--goa-space-xs);\n  color: var(--goa-color-text);\n  font: var(--goa-typography-body-m);\n}\n\n.form-description {\n  font: var(--goa-typography-body-m);\n  color: var(--goa-color-text);\n  margin-bottom: var(--goa-space-l);\n}\n\n.error-message {\n  background-color: var(--goa-color-emergency-light);\n  border-left: 4px solid var(--goa-color-emergency);\n  padding: var(--goa-space-s);\n  margin-top: var(--goa-space-m);\n  color: var(--goa-color-emergency-dark);\n  border-radius: var(--goa-border-radius-s);\n}\n\n@media (max-width: 768px) {\n  .review-and-action-container {\n    padding: var(--goa-space-m);\n  }\n}"
    },
    "angular": {
      "complete": "export class ReviewAndActionComponent {\n  caseDecision: string = '';\n  denialReason: string = '';\n  message: string = '';\n  isSubmitting: boolean = false;\n  validationErrors: Record<string, string> = {};\n\n  caseData = {\n    accusedName: \"Doe, John Scott\",\n    dateOfBirth: \"Mar 14, 2021\",\n    courtLocation: \"Calgary\",\n    appearanceDate: \"Sep 20, 2021\",\n    dockets: [\n      {\n        id: \"12345678\",\n        charges: [\"CC 334(1) - Theft under $5000\", \"CC 268(1) - Aggravated assault\"]\n      }\n    ]\n  };\n\n  denialReasons = [\n    { value: \"1\", label: \"Incomplete Application\" },\n    { value: \"2\", label: \"Eligibility Criteria Not Met\" },\n    { value: \"3\", label: \"Documentation Verification Failure\" }\n  ];\n\n  handleCaseDecisionChange(event: any) {\n    this.caseDecision = event.value;\n    \n    if (event.value === 'grant') {\n      this.denialReason = '';\n    }\n    \n    if (this.validationErrors['caseDecision']) {\n      delete this.validationErrors['caseDecision'];\n    }\n  }\n\n  handleDenialReasonChange(event: any) {\n    this.denialReason = event.value;\n    \n    if (this.validationErrors['denialReason']) {\n      delete this.validationErrors['denialReason'];\n    }\n  }\n\n  handleMessageChange(event: any) {\n    this.message = event.value;\n    \n    if (this.validationErrors['message']) {\n      delete this.validationErrors['message'];\n    }\n  }\n\n  validateForm(): boolean {\n    const errors: Record<string, string> = {};\n    \n    if (!this.caseDecision) {\n      errors['caseDecision'] = 'Please select grant or deny';\n    }\n    \n    if (this.caseDecision === 'deny' && !this.denialReason) {\n      errors['denialReason'] = 'Please select a reason for denial';\n    }\n    \n    if (!this.message.trim()) {\n      errors['message'] = 'Please provide a message';\n    }\n    \n    this.validationErrors = errors;\n    return Object.keys(errors).length === 0;\n  }\n\n  async handleSubmit() {\n    if (!this.validateForm()) {\n      return;\n    }\n    \n    this.isSubmitting = true;\n    \n    try {\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      const submissionData = {\n        caseDecision: this.caseDecision,\n        denialReason: this.caseDecision === 'deny' ? this.denialReason : null,\n        message: this.message,\n        timestamp: new Date().toISOString()\n      };\n      \n      console.log('Form submitted:', submissionData);\n      \n    } catch (error) {\n      console.error('Error submitting form:', error);\n      this.validationErrors['submit'] = 'Failed to process request. Please try again.';\n    } finally {\n      this.isSubmitting = false;\n    }\n  }\n\n  isDenialReasonRequired(): boolean {\n    return this.caseDecision === 'deny';\n  }\n\n  isFormValid(): boolean {\n    return this.caseDecision !== '' && this.message.trim() !== '' && \n           (!this.isDenialReasonRequired() || this.denialReason !== '');\n  }\n\n  getSubmitButtonText(): string {\n    if (this.isSubmitting) return 'Processing...';\n    return 'Confirm';\n  }\n}",
      "key": "caseDecision: string = '';\ndenialReason: string = '';\nmessage: string = '';\nisSubmitting: boolean = false;\nvalidationErrors: Record<string, string> = {};\n\ncaseData = {\n  accusedName: \"Doe, John Scott\",\n  dateOfBirth: \"Mar 14, 2021\",\n  courtLocation: \"Calgary\",\n  appearanceDate: \"Sep 20, 2021\",\n  dockets: [\n    {\n      id: \"12345678\",\n      charges: [\"CC 334(1) - Theft under $5000\", \"CC 268(1) - Aggravated assault\"]\n    }\n  ]\n};\n\ndenialReasons = [\n  { value: \"1\", label: \"Incomplete Application\" },\n  { value: \"2\", label: \"Eligibility Criteria Not Met\" },\n  { value: \"3\", label: \"Documentation Verification Failure\" }\n];\n\nhandleCaseDecisionChange(event: any) {\n  this.caseDecision = event.value;\n  \n  if (event.value === 'grant') {\n    this.denialReason = '';\n  }\n  \n  if (this.validationErrors['caseDecision']) {\n    delete this.validationErrors['caseDecision'];\n  }\n}\n\nhandleDenialReasonChange(event: any) {\n  this.denialReason = event.value;\n  \n  if (this.validationErrors['denialReason']) {\n    delete this.validationErrors['denialReason'];\n  }\n}\n\nhandleMessageChange(event: any) {\n  this.message = event.value;\n  \n  if (this.validationErrors['message']) {\n    delete this.validationErrors['message'];\n  }\n}\n\nvalidateForm(): boolean {\n  const errors: Record<string, string> = {};\n  \n  if (!this.caseDecision) {\n    errors['caseDecision'] = 'Please select grant or deny';\n  }\n  \n  if (this.caseDecision === 'deny' && !this.denialReason) {\n    errors['denialReason'] = 'Please select a reason for denial';\n  }\n  \n  if (!this.message.trim()) {\n    errors['message'] = 'Please provide a message';\n  }\n  \n  this.validationErrors = errors;\n  return Object.keys(errors).length === 0;\n}\n\nasync handleSubmit() {\n  if (!this.validateForm()) {\n    return;\n  }\n  \n  this.isSubmitting = true;\n  \n  try {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    const submissionData = {\n      caseDecision: this.caseDecision,\n      denialReason: this.caseDecision === 'deny' ? this.denialReason : null,\n      message: this.message,\n      timestamp: new Date().toISOString()\n    };\n    \n    console.log('Form submitted:', submissionData);\n    \n  } catch (error) {\n    console.error('Error submitting form:', error);\n    this.validationErrors['submit'] = 'Failed to process request. Please try again.';\n  } finally {\n    this.isSubmitting = false;\n  }\n}\n\nisDenialReasonRequired(): boolean {\n  return this.caseDecision === 'deny';\n}\n\nisFormValid(): boolean {\n  return this.caseDecision !== '' && this.message.trim() !== '' && \n         (!this.isDenialReasonRequired() || this.denialReason !== '');\n}\n\ngetSubmitButtonText(): string {\n  if (this.isSubmitting) return 'Processing...';\n  return 'Confirm';\n}\n\n<!-- Template -->\n<div class=\"review-and-action-container\">\n  <goab-grid minChildWidth=\"315px\" gap=\"l\">\n    <goab-container accent=\"thin\" type=\"non-interactive\">\n      <h3 class=\"section-heading\">Appearance Details</h3>\n      \n      <goab-grid minChildWidth=\"40%\" gap=\"m\">\n        <goab-block direction=\"column\" gap=\"xs\">\n          <label class=\"field-label\">Accused name</label>\n          <span class=\"field-content\">{{ caseData.accusedName }}</span>\n        </goab-block>\n        \n        <goab-block direction=\"column\" gap=\"xs\">\n          <label class=\"field-label\">Date of birth</label>\n          <span class=\"field-content\">{{ caseData.dateOfBirth }}</span>\n        </goab-block>\n      </goab-grid>\n      \n      <h5 class=\"subsection-heading\">Docket number(s) & charges</h5>\n      \n      <goab-container \n        *ngFor=\"let docket of caseData.dockets; let i = index\" \n        type=\"non-interactive\" \n        mt=\"m\">\n        <h6 class=\"docket-heading\">{{ i + 1 }}) {{ docket.id }}</h6>\n        <p *ngFor=\"let charge of docket.charges\" class=\"charge-content\">{{ charge }}</p>\n      </goab-container>\n    </goab-container>\n\n    <goab-container accent=\"thin\" width=\"content\">\n      <form (ngSubmit)=\"handleSubmit()\">\n        <h3 class=\"section-heading\">Adjournment Request</h3>\n        \n        <goab-form-item \n          label=\"Case history and new request\" \n          [error]=\"validationErrors['caseDecision']\"\n          required\n          mt=\"l\">\n          <goab-radio-group \n            name=\"case\" \n            [value]=\"caseDecision\"\n            (onChange)=\"handleCaseDecisionChange($event)\"\n            [error]=\"!!validationErrors['caseDecision']\">\n            <goab-radio-item value=\"grant\" label=\"Grant\"></goab-radio-item>\n            <goab-radio-item value=\"deny\" label=\"Deny\"></goab-radio-item>\n          </goab-radio-group>\n        </goab-form-item>\n\n        <goab-form-item \n          *ngIf=\"isDenialReasonRequired()\"\n          label=\"Reason to deny\" \n          [error]=\"validationErrors['denialReason']\"\n          required\n          mt=\"l\">\n          <goab-dropdown \n            name=\"reason\" \n            width=\"100%\" \n            [value]=\"denialReason\"\n            (onChange)=\"handleDenialReasonChange($event)\"\n            [error]=\"!!validationErrors['denialReason']\">\n            <goab-dropdown-item \n              *ngFor=\"let reason of denialReasons\"\n              [value]=\"reason.value\" \n              [label]=\"reason.label\">\n            </goab-dropdown-item>\n          </goab-dropdown>\n        </goab-form-item>\n\n        <goab-form-item \n          label=\"Message\" \n          [error]=\"validationErrors['message']\"\n          required\n          mt=\"l\">\n          <goab-textarea \n            name=\"message\" \n            [rows]=\"5\" \n            width=\"100%\" \n            [value]=\"message\" \n            (onChange)=\"handleMessageChange($event)\"\n            [error]=\"!!validationErrors['message']\">\n          </goab-textarea>\n        </goab-form-item>\n\n        <goab-button \n          type=\"primary\"\n          (onClick)=\"handleSubmit()\"\n          [disabled]=\"!isFormValid() || isSubmitting\"\n          mt=\"xl\">\n          {{ getSubmitButtonText() }}\n        </goab-button>\n      </form>\n    </goab-container>\n  </goab-grid>\n</div>"
    }
  },
  "tags": [
    "review-and-action",
    "layout-pattern",
    "administrative-workflow",
    "case-management",
    "decision-making",
    "form-processing",
    "information-display",
    "worker-interface",
    "government-workflow",
    "contextual-action"
  ]
}