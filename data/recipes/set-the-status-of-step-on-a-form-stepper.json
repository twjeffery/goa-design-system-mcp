{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "set-the-status-of-step-on-a-form-stepper",
  "recipeName": "Set the Status of Step on a Form Stepper",
  "category": "form-pattern",
  "summary": "Control the visual status of individual steps in a multi-step form to indicate completion state, validation status, and user progress through the workflow",
  "serviceContext": {
    "useCase": "Provide clear visual feedback about form completion progress, validation states, and workflow advancement in multi-step government processes",
    "userType": "both",
    "governmentServiceFlows": [
      "When citizens complete multi-step applications with validation requirements at each stage",
      "When workers process applications that require verification and approval at multiple checkpoints",
      "When form completion depends on external validation or document submission",
      "When users need to revisit and update previously completed sections based on new requirements"
    ],
    "relatedPatterns": [
      "form-stepper-with-controlled-navigation",
      "show-a-simple-progress-indicator-on-a-question-page",
      "review-page",
      "confirm-before-navigating-away"
    ]
  },
  "components": [
    {
      "componentName": "GoabFormStepper",
      "role": "Step progression container",
      "purpose": "Manage overall form stepper state and coordinate step navigation with status display"
    },
    {
      "componentName": "GoabFormStep",
      "role": "Individual step with status control",
      "purpose": "Display step information with configurable status indicators for completion tracking"
    },
    {
      "componentName": "GoabPages",
      "role": "Content container for step panels",
      "purpose": "Show appropriate form content for each step with proper state management"
    },
    {
      "componentName": "GoabButton",
      "role": "Navigation control",
      "purpose": "Enable step-by-step navigation with appropriate state-aware labeling"
    }
  ],
  "codeReference": {
    "exampleFile": "set-the-status-of-step-on-a-form-stepper.tsx",
    "linesOfCode": 258,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "high",
    "keyPatterns": [
      "Step status array management with complete/incomplete/not-started states",
      "Dynamic status updates based on form validation and completion",
      "Coordinated step navigation with status tracking",
      "Page content management synchronized with step progression",
      "Form validation integration with visual status indicators"
    ],
    "designPatterns": [
      "Progressive form completion",
      "Status-driven navigation",
      "Multi-step form management",
      "Visual progress indication",
      "State-synchronized content display"
    ],
    "accessibility": [
      "Clear visual distinction between different step statuses",
      "Screen reader announcements for status changes",
      "Keyboard navigation support maintained across steps",
      "Logical tab order through stepper and form content",
      "Status information conveyed through both visual and text indicators"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabButton, GoabFormStep, GoabFormStepper, GoabPages, GoabFormItem, GoabInput, GoabTextArea, GoabCheckbox, GoabCallout } from \"@abgov/react-components\";\nimport { GoabFormStepStatus, GoabFormStepperOnChangeDetail, GoabInputOnChangeDetail } from \"@abgov/ui-components-common\";\nimport { useState, useEffect } from \"react\";\n\nexport default function SetTheStatusOfStepOnAFormStepper() {\n  const [currentStep, setCurrentStep] = useState<number>(-1);\n  const [stepStatuses, setStepStatuses] = useState<GoabFormStepStatus[]>([\"not-started\", \"not-started\", \"not-started\", \"not-started\"]);\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [formData, setFormData] = useState<any>({\n    personalDetails: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: ''\n    },\n    employmentHistory: {\n      currentEmployer: '',\n      position: '',\n      experience: '',\n      skills: ''\n    },\n    references: {\n      reference1Name: '',\n      reference1Contact: '',\n      reference2Name: '',\n      reference2Contact: '',\n      hasReferences: false\n    },\n    review: {\n      agreedToTerms: false,\n      finalComments: ''\n    }\n  });\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [stepCompletionFlags, setStepCompletionFlags] = useState<boolean[]>([false, false, false, false]);\n\n  const stepTitles = [\n    'Personal Details',\n    'Employment History',\n    'References',\n    'Review & Submit'\n  ];\n\n  const stepDescriptions = [\n    'Provide your basic personal information',\n    'Tell us about your work experience',\n    'Add professional references',\n    'Review your application before submission'\n  ];\n\n  const handleStepChange = (event: GoabFormStepperOnChangeDetail) => {\n    const newStep = event.step;\n    \n    // Validate current step before allowing navigation\n    if (newStep > currentStep) {\n      const isCurrentStepValid = validateStep(currentStep);\n      if (!isCurrentStepValid) {\n        console.log('Cannot proceed: current step has validation errors');\n        return;\n      }\n    }\n    \n    setCurrentStep(newStep);\n    \n    // Track step navigation analytics\n    trackStepNavigation(currentStep, newStep);\n    \n    console.log('Step changed from', currentStep, 'to', newStep);\n  };\n\n  const validateStep = (stepIndex: number): boolean => {\n    const errors: any = {};\n    let isValid = true;\n\n    switch (stepIndex) {\n      case 0: // Personal Details\n        if (!formData.personalDetails.firstName.trim()) {\n          errors.firstName = 'First name is required';\n          isValid = false;\n        }\n        if (!formData.personalDetails.lastName.trim()) {\n          errors.lastName = 'Last name is required';\n          isValid = false;\n        }\n        if (!formData.personalDetails.email.trim()) {\n          errors.email = 'Email is required';\n          isValid = false;\n        } else if (!isValidEmail(formData.personalDetails.email)) {\n          errors.email = 'Please enter a valid email address';\n          isValid = false;\n        }\n        break;\n        \n      case 1: // Employment History\n        if (!formData.employmentHistory.currentEmployer.trim()) {\n          errors.currentEmployer = 'Current employer is required';\n          isValid = false;\n        }\n        if (!formData.employmentHistory.position.trim()) {\n          errors.position = 'Position is required';\n          isValid = false;\n        }\n        break;\n        \n      case 2: // References\n        if (formData.references.hasReferences) {\n          if (!formData.references.reference1Name.trim()) {\n            errors.reference1Name = 'Reference name is required';\n            isValid = false;\n          }\n          if (!formData.references.reference1Contact.trim()) {\n            errors.reference1Contact = 'Reference contact is required';\n            isValid = false;\n          }\n        }\n        break;\n        \n      case 3: // Review\n        if (!formData.review.agreedToTerms) {\n          errors.agreedToTerms = 'You must agree to the terms and conditions';\n          isValid = false;\n        }\n        break;\n    }\n\n    setValidationErrors({ ...validationErrors, [stepIndex]: errors });\n    return isValid;\n  };\n\n  const isValidEmail = (email: string): boolean => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const updateStepStatus = (stepIndex: number, status: GoabFormStepStatus) => {\n    const newStatuses = [...stepStatuses];\n    newStatuses[stepIndex] = status;\n    setStepStatuses(newStatuses);\n    \n    // Update completion flags\n    const newCompletionFlags = [...stepCompletionFlags];\n    newCompletionFlags[stepIndex] = status === 'complete';\n    setStepCompletionFlags(newCompletionFlags);\n    \n    console.log(`Step ${stepIndex} status updated to: ${status}`);\n  };\n\n  const handleInputChange = (stepIndex: number, field: string, value: string) => {\n    const updatedFormData = { ...formData };\n    \n    switch (stepIndex) {\n      case 0:\n        updatedFormData.personalDetails[field] = value;\n        break;\n      case 1:\n        updatedFormData.employmentHistory[field] = value;\n        break;\n      case 2:\n        updatedFormData.references[field] = value;\n        break;\n      case 3:\n        updatedFormData.review[field] = value;\n        break;\n    }\n    \n    setFormData(updatedFormData);\n    \n    // Clear validation errors for this field\n    if (validationErrors[stepIndex]?.[field]) {\n      const updatedErrors = { ...validationErrors };\n      delete updatedErrors[stepIndex][field];\n      setValidationErrors(updatedErrors);\n    }\n    \n    // Auto-validate and update step status\n    setTimeout(() => {\n      checkStepCompletion(stepIndex);\n    }, 300);\n  };\n\n  const handleCheckboxChange = (stepIndex: number, field: string, checked: boolean) => {\n    const updatedFormData = { ...formData };\n    \n    switch (stepIndex) {\n      case 2:\n        updatedFormData.references[field] = checked;\n        break;\n      case 3:\n        updatedFormData.review[field] = checked;\n        break;\n    }\n    \n    setFormData(updatedFormData);\n    \n    setTimeout(() => {\n      checkStepCompletion(stepIndex);\n    }, 100);\n  };\n\n  const checkStepCompletion = (stepIndex: number) => {\n    const isValid = validateStep(stepIndex);\n    const isComplete = isStepComplete(stepIndex);\n    \n    if (isComplete && isValid) {\n      updateStepStatus(stepIndex, 'complete');\n    } else if (hasStepBeenStarted(stepIndex)) {\n      updateStepStatus(stepIndex, 'incomplete');\n    } else {\n      updateStepStatus(stepIndex, 'not-started');\n    }\n  };\n\n  const isStepComplete = (stepIndex: number): boolean => {\n    switch (stepIndex) {\n      case 0:\n        return formData.personalDetails.firstName && \n               formData.personalDetails.lastName && \n               formData.personalDetails.email &&\n               isValidEmail(formData.personalDetails.email);\n      case 1:\n        return formData.employmentHistory.currentEmployer && \n               formData.employmentHistory.position;\n      case 2:\n        return !formData.references.hasReferences || \n               (formData.references.reference1Name && formData.references.reference1Contact);\n      case 3:\n        return formData.review.agreedToTerms;\n      default:\n        return false;\n    }\n  };\n\n  const hasStepBeenStarted = (stepIndex: number): boolean => {\n    switch (stepIndex) {\n      case 0:\n        return formData.personalDetails.firstName || \n               formData.personalDetails.lastName || \n               formData.personalDetails.email || \n               formData.personalDetails.phone;\n      case 1:\n        return formData.employmentHistory.currentEmployer || \n               formData.employmentHistory.position || \n               formData.employmentHistory.experience ||\n               formData.employmentHistory.skills;\n      case 2:\n        return formData.references.hasReferences ||\n               formData.references.reference1Name || \n               formData.references.reference1Contact ||\n               formData.references.reference2Name ||\n               formData.references.reference2Contact;\n      case 3:\n        return formData.review.agreedToTerms || formData.review.finalComments;\n      default:\n        return false;\n    }\n  };\n\n  const navigateToStep = (targetStep: number) => {\n    if (targetStep < 0 || targetStep >= stepTitles.length) {\n      return;\n    }\n    \n    // For forward navigation, validate current step\n    if (targetStep > currentStep) {\n      const isCurrentValid = validateStep(currentStep);\n      if (!isCurrentValid) {\n        console.log('Please fix validation errors before proceeding');\n        return;\n      }\n    }\n    \n    setCurrentStep(targetStep);\n  };\n\n  const handleSubmitApplication = async () => {\n    // Validate all steps before submission\n    let allValid = true;\n    for (let i = 0; i < stepTitles.length - 1; i++) {\n      if (!validateStep(i)) {\n        allValid = false;\n      }\n    }\n    \n    if (!allValid) {\n      console.log('Please complete all required fields');\n      return;\n    }\n    \n    setIsSubmitting(true);\n    \n    try {\n      // Simulate API submission\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Mark final step as complete\n      updateStepStatus(3, 'complete');\n      \n      console.log('Application submitted successfully:', formData);\n      \n      // Track submission analytics\n      trackApplicationSubmission();\n      \n    } catch (error) {\n      console.error('Submission failed:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const trackStepNavigation = (fromStep: number, toStep: number) => {\n    console.log('Step navigation analytics:', {\n      fromStep: fromStep >= 0 ? stepTitles[fromStep] : 'Initial',\n      toStep: stepTitles[toStep],\n      timestamp: new Date().toISOString(),\n      formCompletionRate: stepCompletionFlags.filter(Boolean).length / stepTitles.length\n    });\n  };\n\n  const trackApplicationSubmission = () => {\n    console.log('Application submission analytics:', {\n      stepCompletionTime: new Date().toISOString(),\n      allStepsCompleted: stepCompletionFlags.every(Boolean),\n      formData: formData\n    });\n  };\n\n  const getStepError = (stepIndex: number): string => {\n    const stepErrors = validationErrors[stepIndex] || {};\n    const errorMessages = Object.values(stepErrors).filter(Boolean);\n    return errorMessages.length > 0 ? errorMessages[0] as string : '';\n  };\n\n  const canProceedToNextStep = (): boolean => {\n    return currentStep < stepTitles.length - 1 && validateStep(currentStep);\n  };\n\n  const canGoToPreviousStep = (): boolean => {\n    return currentStep > 0;\n  };\n\n  useEffect(() => {\n    // Check completion status for current step whenever form data changes\n    if (currentStep >= 0) {\n      checkStepCompletion(currentStep);\n    }\n  }, [formData, currentStep]);\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 0:\n        return (\n          <div className=\"step-content\">\n            <h2>Personal Details</h2>\n            <p className=\"step-description\">{stepDescriptions[0]}</p>\n            \n            <GoabFormItem \n              label=\"First Name\" \n              error={validationErrors[0]?.firstName}\n              required>\n              <GoabInput\n                name=\"firstName\"\n                value={formData.personalDetails.firstName}\n                onChange={(e: GoabInputOnChangeDetail) => handleInputChange(0, 'firstName', e.value)}\n                placeholder=\"Enter your first name\"\n              />\n            </GoabFormItem>\n            \n            <GoabFormItem \n              label=\"Last Name\" \n              error={validationErrors[0]?.lastName}\n              required>\n              <GoabInput\n                name=\"lastName\"\n                value={formData.personalDetails.lastName}\n                onChange={(e: GoabInputOnChangeDetail) => handleInputChange(0, 'lastName', e.value)}\n                placeholder=\"Enter your last name\"\n              />\n            </GoabFormItem>\n            \n            <GoabFormItem \n              label=\"Email Address\" \n              error={validationErrors[0]?.email}\n              required>\n              <GoabInput\n                type=\"email\"\n                name=\"email\"\n                value={formData.personalDetails.email}\n                onChange={(e: GoabInputOnChangeDetail) => handleInputChange(0, 'email', e.value)}\n                placeholder=\"Enter your email address\"\n              />\n            </GoabFormItem>\n            \n            <GoabFormItem label=\"Phone Number\">\n              <GoabInput\n                type=\"tel\"\n                name=\"phone\"\n                value={formData.personalDetails.phone}\n                onChange={(e: GoabInputOnChangeDetail) => handleInputChange(0, 'phone', e.value)}\n                placeholder=\"Enter your phone number (optional)\"\n              />\n            </GoabFormItem>\n          </div>\n        );\n        \n      case 1:\n        return (\n          <div className=\"step-content\">\n            <h2>Employment History</h2>\n            <p className=\"step-description\">{stepDescriptions[1]}</p>\n            \n            <GoabFormItem \n              label=\"Current Employer\" \n              error={validationErrors[1]?.currentEmployer}\n              required>\n              <GoabInput\n                name=\"currentEmployer\"\n                value={formData.employmentHistory.currentEmployer}\n                onChange={(e: GoabInputOnChangeDetail) => handleInputChange(1, 'currentEmployer', e.value)}\n                placeholder=\"Enter your current employer\"\n              />\n            </GoabFormItem>\n            \n            <GoabFormItem \n              label=\"Position/Title\" \n              error={validationErrors[1]?.position}\n              required>\n              <GoabInput\n                name=\"position\"\n                value={formData.employmentHistory.position}\n                onChange={(e: GoabInputOnChangeDetail) => handleInputChange(1, 'position', e.value)}\n                placeholder=\"Enter your job title\"\n              />\n            </GoabFormItem>\n            \n            <GoabFormItem label=\"Years of Experience\">\n              <GoabInput\n                name=\"experience\"\n                value={formData.employmentHistory.experience}\n                onChange={(e: GoabInputOnChangeDetail) => handleInputChange(1, 'experience', e.value)}\n                placeholder=\"e.g., 5 years\"\n              />\n            </GoabFormItem>\n            \n            <GoabFormItem label=\"Key Skills\">\n              <GoabTextArea\n                name=\"skills\"\n                value={formData.employmentHistory.skills}\n                onChange={(e: GoabInputOnChangeDetail) => handleInputChange(1, 'skills', e.value)}\n                placeholder=\"Describe your key skills and qualifications\"\n                rows={4}\n              />\n            </GoabFormItem>\n          </div>\n        );\n        \n      case 2:\n        return (\n          <div className=\"step-content\">\n            <h2>References</h2>\n            <p className=\"step-description\">{stepDescriptions[2]}</p>\n            \n            <GoabFormItem label=\"Do you have professional references?\">\n              <GoabCheckbox\n                checked={formData.references.hasReferences}\n                text=\"Yes, I can provide professional references\"\n                onChange={(checked) => handleCheckboxChange(2, 'hasReferences', checked)}\n              />\n            </GoabFormItem>\n            \n            {formData.references.hasReferences && (\n              <div className=\"references-section\">\n                <h3>Reference 1</h3>\n                <GoabFormItem \n                  label=\"Name\" \n                  error={validationErrors[2]?.reference1Name}\n                  required>\n                  <GoabInput\n                    name=\"reference1Name\"\n                    value={formData.references.reference1Name}\n                    onChange={(e: GoabInputOnChangeDetail) => handleInputChange(2, 'reference1Name', e.value)}\n                    placeholder=\"Enter reference name\"\n                  />\n                </GoabFormItem>\n                \n                <GoabFormItem \n                  label=\"Contact Information\" \n                  error={validationErrors[2]?.reference1Contact}\n                  required>\n                  <GoabInput\n                    name=\"reference1Contact\"\n                    value={formData.references.reference1Contact}\n                    onChange={(e: GoabInputOnChangeDetail) => handleInputChange(2, 'reference1Contact', e.value)}\n                    placeholder=\"Email or phone number\"\n                  />\n                </GoabFormItem>\n                \n                <h3>Reference 2 (Optional)</h3>\n                <GoabFormItem label=\"Name\">\n                  <GoabInput\n                    name=\"reference2Name\"\n                    value={formData.references.reference2Name}\n                    onChange={(e: GoabInputOnChangeDetail) => handleInputChange(2, 'reference2Name', e.value)}\n                    placeholder=\"Enter reference name\"\n                  />\n                </GoabFormItem>\n                \n                <GoabFormItem label=\"Contact Information\">\n                  <GoabInput\n                    name=\"reference2Contact\"\n                    value={formData.references.reference2Contact}\n                    onChange={(e: GoabInputOnChangeDetail) => handleInputChange(2, 'reference2Contact', e.value)}\n                    placeholder=\"Email or phone number\"\n                  />\n                </GoabFormItem>\n              </div>\n            )}\n          </div>\n        );\n        \n      case 3:\n        return (\n          <div className=\"step-content\">\n            <h2>Review & Submit</h2>\n            <p className=\"step-description\">{stepDescriptions[3]}</p>\n            \n            <div className=\"review-section\">\n              <h3>Personal Details</h3>\n              <div className=\"review-item\">\n                <span className=\"label\">Name:</span>\n                <span className=\"value\">{formData.personalDetails.firstName} {formData.personalDetails.lastName}</span>\n              </div>\n              <div className=\"review-item\">\n                <span className=\"label\">Email:</span>\n                <span className=\"value\">{formData.personalDetails.email}</span>\n              </div>\n              {formData.personalDetails.phone && (\n                <div className=\"review-item\">\n                  <span className=\"label\">Phone:</span>\n                  <span className=\"value\">{formData.personalDetails.phone}</span>\n                </div>\n              )}\n              \n              <h3>Employment</h3>\n              <div className=\"review-item\">\n                <span className=\"label\">Employer:</span>\n                <span className=\"value\">{formData.employmentHistory.currentEmployer}</span>\n              </div>\n              <div className=\"review-item\">\n                <span className=\"label\">Position:</span>\n                <span className=\"value\">{formData.employmentHistory.position}</span>\n              </div>\n              \n              <h3>References</h3>\n              {formData.references.hasReferences ? (\n                <div className=\"review-item\">\n                  <span className=\"label\">Reference 1:</span>\n                  <span className=\"value\">{formData.references.reference1Name} - {formData.references.reference1Contact}</span>\n                </div>\n              ) : (\n                <p>No references provided</p>\n              )}\n            </div>\n            \n            <GoabFormItem \n              error={validationErrors[3]?.agreedToTerms}\n              required>\n              <GoabCheckbox\n                checked={formData.review.agreedToTerms}\n                text=\"I agree to the terms and conditions and confirm that the information provided is accurate\"\n                onChange={(checked) => handleCheckboxChange(3, 'agreedToTerms', checked)}\n              />\n            </GoabFormItem>\n            \n            <GoabFormItem label=\"Additional Comments\">\n              <GoabTextArea\n                name=\"finalComments\"\n                value={formData.review.finalComments}\n                onChange={(e: GoabInputOnChangeDetail) => handleInputChange(3, 'finalComments', e.value)}\n                placeholder=\"Any additional information you'd like to provide (optional)\"\n                rows={3}\n              />\n            </GoabFormItem>\n          </div>\n        );\n        \n      default:\n        return (\n          <div className=\"step-content\">\n            <h2>Welcome</h2>\n            <p>Please begin by clicking \"Next\" to start your application.</p>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"form-stepper-container\">\n      <div className=\"stepper-header\">\n        <h1>Multi-Step Application Form</h1>\n        <p className=\"header-description\">\n          Complete all steps to submit your application. Your progress is automatically saved.\n        </p>\n      </div>\n\n      <GoabFormStepper \n        step={currentStep} \n        onChange={handleStepChange}\n        ariaLabel=\"Application form progress\">\n        {stepTitles.map((title, index) => (\n          <GoabFormStep \n            key={index}\n            text={title} \n            status={stepStatuses[index]} \n          />\n        ))}\n      </GoabFormStepper>\n\n      <GoabPages current={currentStep} mb=\"3xl\" mt=\"xl\" mr=\"xl\" ml=\"xl\">\n        {stepTitles.map((_, index) => (\n          <div key={index}>\n            {renderStepContent()}\n          </div>\n        ))}\n      </GoabPages>\n\n      {currentStep >= 0 && (\n        <div className=\"navigation-controls\">\n          <GoabButton \n            type=\"secondary\" \n            onClick={() => navigateToStep(currentStep - 1)}\n            disabled={!canGoToPreviousStep()}>\n            Previous\n          </GoabButton>\n          \n          {currentStep < stepTitles.length - 1 ? (\n            <GoabButton \n              type=\"primary\" \n              onClick={() => navigateToStep(currentStep + 1)}\n              disabled={!canProceedToNextStep()}>\n              Next\n            </GoabButton>\n          ) : (\n            <GoabButton \n              type=\"primary\" \n              onClick={handleSubmitApplication}\n              disabled={!formData.review.agreedToTerms || isSubmitting}>\n              {isSubmitting ? 'Submitting...' : 'Submit Application'}\n            </GoabButton>\n          )}\n        </div>\n      )}\n\n      {Object.keys(validationErrors).some(stepIndex => \n        Object.keys(validationErrors[stepIndex] || {}).length > 0\n      ) && (\n        <GoabCallout type=\"emergency\" heading=\"Validation Errors\">\n          <p>Please fix the errors in the form before proceeding to the next step.</p>\n        </GoabCallout>\n      )}\n\n      <div className=\"stepper-guide\">\n        <h2>Step Status Guide</h2>\n        <ul className=\"status-guide\">\n          <li>\n            <strong>Not Started:</strong> Step has not been accessed or no data entered\n          </li>\n          <li>\n            <strong>Incomplete:</strong> Step has been started but required fields are missing or invalid\n          </li>\n          <li>\n            <strong>Complete:</strong> All required fields are properly filled and validated\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}",
      "key": "const [currentStep, setCurrentStep] = useState<number>(-1);\nconst [stepStatuses, setStepStatuses] = useState<GoabFormStepStatus[]>([\"not-started\", \"not-started\", \"not-started\", \"not-started\"]);\nconst [isSubmitting, setIsSubmitting] = useState<boolean>(false);\nconst [formData, setFormData] = useState<any>({\n  personalDetails: {\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: ''\n  },\n  employmentHistory: {\n    currentEmployer: '',\n    position: '',\n    experience: '',\n    skills: ''\n  },\n  references: {\n    reference1Name: '',\n    reference1Contact: '',\n    hasReferences: false\n  },\n  review: {\n    agreedToTerms: false,\n    finalComments: ''\n  }\n});\nconst [validationErrors, setValidationErrors] = useState<any>({});\nconst [stepCompletionFlags, setStepCompletionFlags] = useState<boolean[]>([false, false, false, false]);\n\nconst stepTitles = [\n  'Personal Details',\n  'Employment History', \n  'References',\n  'Review & Submit'\n];\n\nconst handleStepChange = (event: GoabFormStepperOnChangeDetail) => {\n  const newStep = event.step;\n  \n  // Validate current step before allowing navigation\n  if (newStep > currentStep) {\n    const isCurrentStepValid = validateStep(currentStep);\n    if (!isCurrentStepValid) {\n      console.log('Cannot proceed: current step has validation errors');\n      return;\n    }\n  }\n  \n  setCurrentStep(newStep);\n  trackStepNavigation(currentStep, newStep);\n  console.log('Step changed from', currentStep, 'to', newStep);\n};\n\nconst validateStep = (stepIndex: number): boolean => {\n  const errors: any = {};\n  let isValid = true;\n\n  switch (stepIndex) {\n    case 0: // Personal Details\n      if (!formData.personalDetails.firstName.trim()) {\n        errors.firstName = 'First name is required';\n        isValid = false;\n      }\n      if (!formData.personalDetails.lastName.trim()) {\n        errors.lastName = 'Last name is required';\n        isValid = false;\n      }\n      if (!formData.personalDetails.email.trim()) {\n        errors.email = 'Email is required';\n        isValid = false;\n      }\n      break;\n      \n    case 1: // Employment History\n      if (!formData.employmentHistory.currentEmployer.trim()) {\n        errors.currentEmployer = 'Current employer is required';\n        isValid = false;\n      }\n      if (!formData.employmentHistory.position.trim()) {\n        errors.position = 'Position is required';\n        isValid = false;\n      }\n      break;\n      \n    case 2: // References\n      if (formData.references.hasReferences) {\n        if (!formData.references.reference1Name.trim()) {\n          errors.reference1Name = 'Reference name is required';\n          isValid = false;\n        }\n      }\n      break;\n      \n    case 3: // Review\n      if (!formData.review.agreedToTerms) {\n        errors.agreedToTerms = 'You must agree to the terms and conditions';\n        isValid = false;\n      }\n      break;\n  }\n\n  setValidationErrors({ ...validationErrors, [stepIndex]: errors });\n  return isValid;\n};\n\nconst updateStepStatus = (stepIndex: number, status: GoabFormStepStatus) => {\n  const newStatuses = [...stepStatuses];\n  newStatuses[stepIndex] = status;\n  setStepStatuses(newStatuses);\n  \n  const newCompletionFlags = [...stepCompletionFlags];\n  newCompletionFlags[stepIndex] = status === 'complete';\n  setStepCompletionFlags(newCompletionFlags);\n  \n  console.log(`Step ${stepIndex} status updated to: ${status}`);\n};\n\nconst checkStepCompletion = (stepIndex: number) => {\n  const isValid = validateStep(stepIndex);\n  const isComplete = isStepComplete(stepIndex);\n  \n  if (isComplete && isValid) {\n    updateStepStatus(stepIndex, 'complete');\n  } else if (hasStepBeenStarted(stepIndex)) {\n    updateStepStatus(stepIndex, 'incomplete');\n  } else {\n    updateStepStatus(stepIndex, 'not-started');\n  }\n};\n\nconst isStepComplete = (stepIndex: number): boolean => {\n  switch (stepIndex) {\n    case 0:\n      return formData.personalDetails.firstName && \n             formData.personalDetails.lastName && \n             formData.personalDetails.email;\n    case 1:\n      return formData.employmentHistory.currentEmployer && \n             formData.employmentHistory.position;\n    case 2:\n      return !formData.references.hasReferences || \n             (formData.references.reference1Name && formData.references.reference1Contact);\n    case 3:\n      return formData.review.agreedToTerms;\n    default:\n      return false;\n  }\n};\n\nconst navigateToStep = (targetStep: number) => {\n  if (targetStep < 0 || targetStep >= stepTitles.length) {\n    return;\n  }\n  \n  // For forward navigation, validate current step\n  if (targetStep > currentStep) {\n    const isCurrentValid = validateStep(currentStep);\n    if (!isCurrentValid) {\n      console.log('Please fix validation errors before proceeding');\n      return;\n    }\n  }\n  \n  setCurrentStep(targetStep);\n};\n\nconst handleSubmitApplication = async () => {\n  // Validate all steps before submission\n  let allValid = true;\n  for (let i = 0; i < stepTitles.length - 1; i++) {\n    if (!validateStep(i)) {\n      allValid = false;\n    }\n  }\n  \n  if (!allValid) {\n    console.log('Please complete all required fields');\n    return;\n  }\n  \n  setIsSubmitting(true);\n  \n  try {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    updateStepStatus(3, 'complete');\n    console.log('Application submitted successfully:', formData);\n  } catch (error) {\n    console.error('Submission failed:', error);\n  } finally {\n    setIsSubmitting(false);\n  }\n};\n\n<div className=\"form-stepper-container\">\n  <GoabFormStepper \n    step={currentStep} \n    onChange={handleStepChange}\n    ariaLabel=\"Application form progress\">\n    {stepTitles.map((title, index) => (\n      <GoabFormStep \n        key={index}\n        text={title} \n        status={stepStatuses[index]} \n      />\n    ))}\n  </GoabFormStepper>\n\n  <GoabPages current={currentStep} mb=\"3xl\" mt=\"xl\" mr=\"xl\" ml=\"xl\">\n    {stepTitles.map((_, index) => (\n      <div key={index}>\n        {/* Step content based on currentStep */}\n      </div>\n    ))}\n  </GoabPages>\n\n  {currentStep >= 0 && (\n    <div className=\"navigation-controls\">\n      <GoabButton \n        type=\"secondary\" \n        onClick={() => navigateToStep(currentStep - 1)}\n        disabled={currentStep <= 0}>\n        Previous\n      </GoabButton>\n      \n      {currentStep < stepTitles.length - 1 ? (\n        <GoabButton \n          type=\"primary\" \n          onClick={() => navigateToStep(currentStep + 1)}>\n          Next\n        </GoabButton>\n      ) : (\n        <GoabButton \n          type=\"primary\" \n          onClick={handleSubmitApplication}\n          disabled={!formData.review.agreedToTerms || isSubmitting}>\n          {isSubmitting ? 'Submitting...' : 'Submit Application'}\n        </GoabButton>\n      )}\n    </div>\n  )}\n</div>\n\n/* CSS */\n.form-stepper-container {\n  max-width: 900px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.stepper-header {\n  margin-bottom: var(--goa-space-xl);\n  text-align: center;\n}\n\n.stepper-header h1 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-text);\n}\n\n.header-description {\n  margin: 0;\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-l);\n}\n\n.step-content {\n  padding: var(--goa-space-l) 0;\n}\n\n.step-content h2 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-text);\n}\n\n.step-description {\n  margin: 0 0 var(--goa-space-l) 0;\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-l);\n}\n\n.navigation-controls {\n  display: flex;\n  justify-content: space-between;\n  margin-top: var(--goa-space-xl);\n  padding-top: var(--goa-space-l);\n  border-top: 1px solid var(--goa-color-border);\n}\n\n.references-section {\n  margin-top: var(--goa-space-l);\n  padding: var(--goa-space-l);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.references-section h3 {\n  margin: var(--goa-space-l) 0 var(--goa-space-m) 0;\n  color: var(--goa-color-text);\n}\n\n.review-section {\n  background-color: var(--goa-color-background-light);\n  padding: var(--goa-space-l);\n  border-radius: var(--goa-border-radius-s);\n  margin-bottom: var(--goa-space-l);\n}\n\n.review-section h3 {\n  margin: var(--goa-space-l) 0 var(--goa-space-m) 0;\n  color: var(--goa-color-text);\n  border-bottom: 1px solid var(--goa-color-border);\n  padding-bottom: var(--goa-space-xs);\n}\n\n.review-item {\n  display: flex;\n  margin-bottom: var(--goa-space-s);\n}\n\n.review-item .label {\n  font-weight: 600;\n  color: var(--goa-color-text);\n  min-width: 120px;\n  margin-right: var(--goa-space-m);\n}\n\n.review-item .value {\n  color: var(--goa-color-text);\n}\n\n.stepper-guide {\n  margin-top: var(--goa-space-2xl);\n  padding: var(--goa-space-l);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n  border-left: 4px solid var(--goa-color-interactive);\n}\n\n.stepper-guide h2 {\n  margin: 0 0 var(--goa-space-m) 0;\n  color: var(--goa-color-text);\n}\n\n.status-guide {\n  margin: 0;\n  padding-left: var(--goa-space-l);\n}\n\n.status-guide li {\n  margin-bottom: var(--goa-space-s);\n  line-height: 1.5;\n}\n\n.status-guide strong {\n  color: var(--goa-color-text);\n}"
    },
    "angular": {
      "complete": "export class SetTheStatusOfStepOnAFormStepperComponent {\n  currentStep: number = -1;\n  stepStatuses: GoabFormStepStatus[] = [\"not-started\", \"not-started\", \"not-started\", \"not-started\"];\n  isSubmitting: boolean = false;\n  validationErrors: any = {};\n  stepCompletionFlags: boolean[] = [false, false, false, false];\n\n  formData = {\n    personalDetails: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phone: ''\n    },\n    employmentHistory: {\n      currentEmployer: '',\n      position: '',\n      experience: '',\n      skills: ''\n    },\n    references: {\n      reference1Name: '',\n      reference1Contact: '',\n      hasReferences: false\n    },\n    review: {\n      agreedToTerms: false,\n      finalComments: ''\n    }\n  };\n\n  stepTitles = [\n    'Personal Details',\n    'Employment History',\n    'References',\n    'Review & Submit'\n  ];\n\n  stepDescriptions = [\n    'Provide your basic personal information',\n    'Tell us about your work experience',\n    'Add professional references',\n    'Review your application before submission'\n  ];\n\n  handleStepChange(event: GoabFormStepperOnChangeDetail) {\n    const newStep = event.step;\n    \n    // Validate current step before allowing navigation\n    if (newStep > this.currentStep) {\n      const isCurrentStepValid = this.validateStep(this.currentStep);\n      if (!isCurrentStepValid) {\n        console.log('Cannot proceed: current step has validation errors');\n        return;\n      }\n    }\n    \n    this.currentStep = newStep;\n    this.trackStepNavigation(this.currentStep, newStep);\n    console.log('Step changed from', this.currentStep, 'to', newStep);\n  }\n\n  validateStep(stepIndex: number): boolean {\n    const errors: any = {};\n    let isValid = true;\n\n    switch (stepIndex) {\n      case 0: // Personal Details\n        if (!this.formData.personalDetails.firstName.trim()) {\n          errors.firstName = 'First name is required';\n          isValid = false;\n        }\n        if (!this.formData.personalDetails.lastName.trim()) {\n          errors.lastName = 'Last name is required';\n          isValid = false;\n        }\n        if (!this.formData.personalDetails.email.trim()) {\n          errors.email = 'Email is required';\n          isValid = false;\n        }\n        break;\n        \n      case 1: // Employment History\n        if (!this.formData.employmentHistory.currentEmployer.trim()) {\n          errors.currentEmployer = 'Current employer is required';\n          isValid = false;\n        }\n        if (!this.formData.employmentHistory.position.trim()) {\n          errors.position = 'Position is required';\n          isValid = false;\n        }\n        break;\n        \n      case 2: // References\n        if (this.formData.references.hasReferences) {\n          if (!this.formData.references.reference1Name.trim()) {\n            errors.reference1Name = 'Reference name is required';\n            isValid = false;\n          }\n        }\n        break;\n        \n      case 3: // Review\n        if (!this.formData.review.agreedToTerms) {\n          errors.agreedToTerms = 'You must agree to the terms and conditions';\n          isValid = false;\n        }\n        break;\n    }\n\n    this.validationErrors = { ...this.validationErrors, [stepIndex]: errors };\n    return isValid;\n  }\n\n  updateStepStatus(stepIndex: number, status: GoabFormStepStatus) {\n    const newStatuses = [...this.stepStatuses];\n    newStatuses[stepIndex] = status;\n    this.stepStatuses = newStatuses;\n    \n    const newCompletionFlags = [...this.stepCompletionFlags];\n    newCompletionFlags[stepIndex] = status === 'complete';\n    this.stepCompletionFlags = newCompletionFlags;\n    \n    console.log(`Step ${stepIndex} status updated to: ${status}`);\n  }\n\n  checkStepCompletion(stepIndex: number) {\n    const isValid = this.validateStep(stepIndex);\n    const isComplete = this.isStepComplete(stepIndex);\n    \n    if (isComplete && isValid) {\n      this.updateStepStatus(stepIndex, 'complete');\n    } else if (this.hasStepBeenStarted(stepIndex)) {\n      this.updateStepStatus(stepIndex, 'incomplete');\n    } else {\n      this.updateStepStatus(stepIndex, 'not-started');\n    }\n  }\n\n  isStepComplete(stepIndex: number): boolean {\n    switch (stepIndex) {\n      case 0:\n        return this.formData.personalDetails.firstName && \n               this.formData.personalDetails.lastName && \n               this.formData.personalDetails.email;\n      case 1:\n        return this.formData.employmentHistory.currentEmployer && \n               this.formData.employmentHistory.position;\n      case 2:\n        return !this.formData.references.hasReferences || \n               (this.formData.references.reference1Name && this.formData.references.reference1Contact);\n      case 3:\n        return this.formData.review.agreedToTerms;\n      default:\n        return false;\n    }\n  }\n\n  hasStepBeenStarted(stepIndex: number): boolean {\n    switch (stepIndex) {\n      case 0:\n        return this.formData.personalDetails.firstName || \n               this.formData.personalDetails.lastName || \n               this.formData.personalDetails.email || \n               this.formData.personalDetails.phone;\n      case 1:\n        return this.formData.employmentHistory.currentEmployer || \n               this.formData.employmentHistory.position || \n               this.formData.employmentHistory.experience ||\n               this.formData.employmentHistory.skills;\n      case 2:\n        return this.formData.references.hasReferences ||\n               this.formData.references.reference1Name || \n               this.formData.references.reference1Contact;\n      case 3:\n        return this.formData.review.agreedToTerms || this.formData.review.finalComments;\n      default:\n        return false;\n    }\n  }\n\n  navigateToStep(targetStep: number) {\n    if (targetStep < 0 || targetStep >= this.stepTitles.length) {\n      return;\n    }\n    \n    // For forward navigation, validate current step\n    if (targetStep > this.currentStep) {\n      const isCurrentValid = this.validateStep(this.currentStep);\n      if (!isCurrentValid) {\n        console.log('Please fix validation errors before proceeding');\n        return;\n      }\n    }\n    \n    this.currentStep = targetStep;\n  }\n\n  async handleSubmitApplication() {\n    // Validate all steps before submission\n    let allValid = true;\n    for (let i = 0; i < this.stepTitles.length - 1; i++) {\n      if (!this.validateStep(i)) {\n        allValid = false;\n      }\n    }\n    \n    if (!allValid) {\n      console.log('Please complete all required fields');\n      return;\n    }\n    \n    this.isSubmitting = true;\n    \n    try {\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      this.updateStepStatus(3, 'complete');\n      console.log('Application submitted successfully:', this.formData);\n    } catch (error) {\n      console.error('Submission failed:', error);\n    } finally {\n      this.isSubmitting = false;\n    }\n  }\n\n  trackStepNavigation(fromStep: number, toStep: number) {\n    console.log('Step navigation analytics:', {\n      fromStep: fromStep >= 0 ? this.stepTitles[fromStep] : 'Initial',\n      toStep: this.stepTitles[toStep],\n      timestamp: new Date().toISOString(),\n      formCompletionRate: this.stepCompletionFlags.filter(Boolean).length / this.stepTitles.length\n    });\n  }\n\n  canProceedToNextStep(): boolean {\n    return this.currentStep < this.stepTitles.length - 1 && this.validateStep(this.currentStep);\n  }\n\n  canGoToPreviousStep(): boolean {\n    return this.currentStep > 0;\n  }\n}",
      "key": "currentStep: number = -1;\nstepStatuses: GoabFormStepStatus[] = [\"not-started\", \"not-started\", \"not-started\", \"not-started\"];\nisSubmitting: boolean = false;\nvalidationErrors: any = {};\nstepCompletionFlags: boolean[] = [false, false, false, false];\n\nformData = {\n  personalDetails: {\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: ''\n  },\n  employmentHistory: {\n    currentEmployer: '',\n    position: '',\n    experience: '',\n    skills: ''\n  },\n  references: {\n    reference1Name: '',\n    reference1Contact: '',\n    hasReferences: false\n  },\n  review: {\n    agreedToTerms: false,\n    finalComments: ''\n  }\n};\n\nstepTitles = [\n  'Personal Details',\n  'Employment History',\n  'References',\n  'Review & Submit'\n];\n\nhandleStepChange(event: GoabFormStepperOnChangeDetail) {\n  const newStep = event.step;\n  \n  if (newStep > this.currentStep) {\n    const isCurrentStepValid = this.validateStep(this.currentStep);\n    if (!isCurrentStepValid) {\n      console.log('Cannot proceed: current step has validation errors');\n      return;\n    }\n  }\n  \n  this.currentStep = newStep;\n  this.trackStepNavigation(this.currentStep, newStep);\n}\n\nvalidateStep(stepIndex: number): boolean {\n  const errors: any = {};\n  let isValid = true;\n\n  switch (stepIndex) {\n    case 0: // Personal Details\n      if (!this.formData.personalDetails.firstName.trim()) {\n        errors.firstName = 'First name is required';\n        isValid = false;\n      }\n      if (!this.formData.personalDetails.email.trim()) {\n        errors.email = 'Email is required';\n        isValid = false;\n      }\n      break;\n      \n    case 1: // Employment History\n      if (!this.formData.employmentHistory.currentEmployer.trim()) {\n        errors.currentEmployer = 'Current employer is required';\n        isValid = false;\n      }\n      break;\n  }\n\n  this.validationErrors = { ...this.validationErrors, [stepIndex]: errors };\n  return isValid;\n}\n\nupdateStepStatus(stepIndex: number, status: GoabFormStepStatus) {\n  const newStatuses = [...this.stepStatuses];\n  newStatuses[stepIndex] = status;\n  this.stepStatuses = newStatuses;\n  \n  const newCompletionFlags = [...this.stepCompletionFlags];\n  newCompletionFlags[stepIndex] = status === 'complete';\n  this.stepCompletionFlags = newCompletionFlags;\n}\n\ncheckStepCompletion(stepIndex: number) {\n  const isValid = this.validateStep(stepIndex);\n  const isComplete = this.isStepComplete(stepIndex);\n  \n  if (isComplete && isValid) {\n    this.updateStepStatus(stepIndex, 'complete');\n  } else if (this.hasStepBeenStarted(stepIndex)) {\n    this.updateStepStatus(stepIndex, 'incomplete');\n  } else {\n    this.updateStepStatus(stepIndex, 'not-started');\n  }\n}\n\nnavigateToStep(targetStep: number) {\n  if (targetStep < 0 || targetStep >= this.stepTitles.length) {\n    return;\n  }\n  \n  if (targetStep > this.currentStep) {\n    const isCurrentValid = this.validateStep(this.currentStep);\n    if (!isCurrentValid) {\n      return;\n    }\n  }\n  \n  this.currentStep = targetStep;\n}\n\n<!-- Template -->\n<div class=\"form-stepper-container\">\n  <div class=\"stepper-header\">\n    <h1>Multi-Step Application Form</h1>\n    <p class=\"header-description\">\n      Complete all steps to submit your application. Your progress is automatically saved.\n    </p>\n  </div>\n\n  <goab-form-stepper \n    [step]=\"currentStep\" \n    (onChange)=\"handleStepChange($event)\"\n    ariaLabel=\"Application form progress\">\n    <goab-form-step \n      *ngFor=\"let title of stepTitles; let i = index\"\n      [text]=\"title\" \n      [status]=\"stepStatuses[i]\">\n    </goab-form-step>\n  </goab-form-stepper>\n\n  <goab-pages [current]=\"currentStep\" mb=\"3xl\" mt=\"xl\" mr=\"xl\" ml=\"xl\">\n    <div *ngFor=\"let title of stepTitles; let i = index\">\n      <!-- Step content rendered based on currentStep -->\n    </div>\n  </goab-pages>\n\n  <div class=\"navigation-controls\" *ngIf=\"currentStep >= 0\">\n    <goab-button \n      type=\"secondary\" \n      (onClick)=\"navigateToStep(currentStep - 1)\"\n      [disabled]=\"!canGoToPreviousStep()\">\n      Previous\n    </goab-button>\n    \n    <goab-button \n      *ngIf=\"currentStep < stepTitles.length - 1; else submitButton\"\n      type=\"primary\" \n      (onClick)=\"navigateToStep(currentStep + 1)\"\n      [disabled]=\"!canProceedToNextStep()\">\n      Next\n    </goab-button>\n    \n    <ng-template #submitButton>\n      <goab-button \n        type=\"primary\" \n        (onClick)=\"handleSubmitApplication()\"\n        [disabled]=\"!formData.review.agreedToTerms || isSubmitting\">\n        {{ isSubmitting ? 'Submitting...' : 'Submit Application' }}\n      </goab-button>\n    </ng-template>\n  </div>\n</div>"
    }
  },
  "tags": [
    "form-stepper",
    "step-status",
    "multi-step-form",
    "form-validation",
    "progress-tracking",
    "step-completion",
    "form-pattern",
    "workflow-management",
    "status-control",
    "form-progression"
  ]
}