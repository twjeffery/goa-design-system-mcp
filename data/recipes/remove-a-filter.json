{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "remove-a-filter",
  "recipeName": "Remove a Filter",
  "category": "interaction-pattern",
  "summary": "Allow users to remove individual filter chips from active filter collections with clear visual feedback and state management",
  "serviceContext": {
    "useCase": "Enable users to remove specific filters from their active filter set, providing flexibility in refining search results and data views",
    "userType": "both",
    "governmentServiceFlows": [
      "When citizens need to adjust search criteria while looking for services or information",
      "When workers need to modify filters while reviewing case data or administrative records",
      "When users want to remove specific constraints from filtered data views",
      "When providing granular control over data filtering and search refinement"
    ],
    "relatedPatterns": [
      "add-a-filter-chip",
      "filter-data-in-a-table",
      "add-and-edit-lots-of-filters",
      "type-to-create-a-new-filter"
    ]
  },
  "components": [
    {
      "componentName": "GoabFilterChip",
      "role": "Removable filter indicator",
      "purpose": "Display active filter with built-in removal functionality through click interaction"
    }
  ],
  "codeReference": {
    "exampleFile": "remove-a-filter.tsx",
    "linesOfCode": 116,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "low",
    "keyPatterns": [
      "State management with useState hook for filter chip collection",
      "Filter removal through array filtering and state updates",
      "Click event handling for individual chip removal",
      "Dynamic rendering of filter chips with proper key attributes",
      "Consistent spacing between filter chips using margin utilities"
    ],
    "designPatterns": [
      "Interactive filter management",
      "Granular filter control",
      "Visual feedback for filter state",
      "Flexible search refinement"
    ],
    "accessibility": [
      "Filter chips are keyboard accessible with proper click handling",
      "Clear visual indication of removable filters",
      "Screen readers can identify and interact with filter removal controls",
      "Consistent interaction patterns across all filter chips",
      "Proper focus management when filters are removed"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabFilterChip } from \"@abgov/react-components\";\nimport { useState } from \"react\";\n\nexport default function RemoveAFilter() {\n  const [activeFilters, setActiveFilters] = useState([\n    { id: 1, label: \"Status: Active\", value: \"active\" },\n    { id: 2, label: \"Type: Application\", value: \"application\" },\n    { id: 3, label: \"Date: This Month\", value: \"this-month\" },\n    { id: 4, label: \"Priority: High\", value: \"high\" }\n  ]);\n  const [filterHistory, setFilterHistory] = useState<any[]>([]);\n  const [undoTimeout, setUndoTimeout] = useState<NodeJS.Timeout | null>(null);\n\n  const removeFilter = (filterId: number) => {\n    const filterToRemove = activeFilters.find(f => f.id === filterId);\n    if (!filterToRemove) return;\n\n    // Add to history for potential undo\n    setFilterHistory(prev => [...prev, filterToRemove]);\n    \n    // Remove from active filters\n    setActiveFilters(prev => prev.filter(f => f.id !== filterId));\n    \n    // Track analytics\n    console.log('Filter removed:', filterToRemove.label);\n    \n    // Clear any existing undo timeout\n    if (undoTimeout) {\n      clearTimeout(undoTimeout);\n    }\n    \n    // Set new undo timeout\n    const timeout = setTimeout(() => {\n      setFilterHistory(prev => prev.filter(f => f.id !== filterId));\n    }, 10000); // 10 second undo window\n    \n    setUndoTimeout(timeout);\n  };\n\n  const undoRemoveFilter = (filterId: number) => {\n    const filterToRestore = filterHistory.find(f => f.id === filterId);\n    if (!filterToRestore) return;\n\n    // Add back to active filters\n    setActiveFilters(prev => [...prev, filterToRestore]);\n    \n    // Remove from history\n    setFilterHistory(prev => prev.filter(f => f.id !== filterId));\n    \n    // Clear timeout\n    if (undoTimeout) {\n      clearTimeout(undoTimeout);\n      setUndoTimeout(null);\n    }\n    \n    console.log('Filter restored:', filterToRestore.label);\n  };\n\n  const clearAllFilters = () => {\n    if (activeFilters.length === 0) return;\n    \n    // Add all filters to history\n    setFilterHistory(prev => [...prev, ...activeFilters]);\n    \n    // Clear active filters\n    setActiveFilters([]);\n    \n    console.log('All filters cleared');\n    \n    // Set undo timeout for all filters\n    const timeout = setTimeout(() => {\n      setFilterHistory([]);\n    }, 10000);\n    \n    setUndoTimeout(timeout);\n  };\n\n  const getFilterCount = () => {\n    return activeFilters.length;\n  };\n\n  const hasActiveFilters = () => {\n    return activeFilters.length > 0;\n  };\n\n  return (\n    <div className=\"filter-management\">\n      <div className=\"filter-header\">\n        <h3>Active Filters ({getFilterCount()})</h3>\n        {hasActiveFilters() && (\n          <button \n            className=\"clear-all-button\"\n            onClick={clearAllFilters}\n            aria-label=\"Clear all filters\">\n            Clear All\n          </button>\n        )}\n      </div>\n      \n      <div className=\"filter-chips\">\n        {activeFilters.map(filter => (\n          <GoabFilterChip\n            key={filter.id}\n            content={filter.label}\n            onClick={() => removeFilter(filter.id)}\n            mr=\"s\"\n            mb=\"s\"\n            aria-label={`Remove filter: ${filter.label}`}\n          />\n        ))}\n      </div>\n      \n      {!hasActiveFilters() && (\n        <div className=\"no-filters-message\">\n          <p>No active filters. Use the search and filter controls above to refine your results.</p>\n        </div>\n      )}\n      \n      {filterHistory.length > 0 && (\n        <div className=\"undo-section\">\n          <p>Recently removed filters:</p>\n          <div className=\"undo-chips\">\n            {filterHistory.map(filter => (\n              <button\n                key={filter.id}\n                className=\"undo-chip\"\n                onClick={() => undoRemoveFilter(filter.id)}\n                aria-label={`Restore filter: ${filter.label}`}>\n                {filter.label} <span className=\"undo-icon\">↺</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}",
      "key": "const [filters, setFilters] = useState([\n  { id: 1, label: \"Status: Active\", value: \"active\" },\n  { id: 2, label: \"Type: Application\", value: \"application\" },\n  { id: 3, label: \"Date: This Month\", value: \"this-month\" }\n]);\nconst [removedFilters, setRemovedFilters] = useState([]);\n\nconst removeFilter = (filterId: number) => {\n  const filterToRemove = filters.find(f => f.id === filterId);\n  if (!filterToRemove) return;\n\n  // Remove from active filters\n  setFilters(prev => prev.filter(f => f.id !== filterId));\n  \n  // Add to removed filters for potential undo\n  setRemovedFilters(prev => [...prev, filterToRemove]);\n  \n  // Track analytics\n  console.log('Filter removed:', filterToRemove.label);\n  \n  // Optional: Apply filter changes to data\n  // applyFiltersToData(filters.filter(f => f.id !== filterId));\n};\n\nconst undoRemoveFilter = (filterId: number) => {\n  const filterToRestore = removedFilters.find(f => f.id === filterId);\n  if (!filterToRestore) return;\n\n  // Add back to active filters\n  setFilters(prev => [...prev, filterToRestore]);\n  \n  // Remove from removed filters\n  setRemovedFilters(prev => prev.filter(f => f.id !== filterId));\n  \n  console.log('Filter restored:', filterToRestore.label);\n};\n\nconst clearAllFilters = () => {\n  if (filters.length === 0) return;\n  \n  // Add all to removed filters\n  setRemovedFilters(prev => [...prev, ...filters]);\n  \n  // Clear active filters\n  setFilters([]);\n  \n  console.log('All filters cleared');\n};\n\nconst handleFilterRemoval = (filterId: number, event?: React.MouseEvent) => {\n  // Optional: Prevent event bubbling\n  if (event) {\n    event.stopPropagation();\n  }\n  \n  removeFilter(filterId);\n};\n\nconst getActiveFilterCount = () => {\n  return filters.length;\n};\n\nconst hasActiveFilters = () => {\n  return filters.length > 0;\n};\n\nconst getFilterById = (id: number) => {\n  return filters.find(f => f.id === id);\n};\n\n<div className=\"filter-management\">\n  <div className=\"filter-header\">\n    <h3>Active Filters ({getActiveFilterCount()})</h3>\n    {hasActiveFilters() && (\n      <button \n        className=\"clear-all-button\"\n        onClick={clearAllFilters}\n        aria-label=\"Clear all filters\">\n        Clear All\n      </button>\n    )}\n  </div>\n  \n  <div className=\"filter-chips\">\n    {filters.map(filter => (\n      <GoabFilterChip\n        key={filter.id}\n        content={filter.label}\n        onClick={() => handleFilterRemoval(filter.id)}\n        mr=\"s\"\n        mb=\"s\"\n        aria-label={`Remove filter: ${filter.label}`}\n      />\n    ))}\n  </div>\n  \n  {!hasActiveFilters() && (\n    <div className=\"no-filters-message\">\n      <p>No active filters. Use the search and filter controls to refine your results.</p>\n    </div>\n  )}\n  \n  {removedFilters.length > 0 && (\n    <div className=\"undo-section\">\n      <p>Recently removed filters:</p>\n      <div className=\"undo-chips\">\n        {removedFilters.map(filter => (\n          <button\n            key={filter.id}\n            className=\"undo-chip\"\n            onClick={() => undoRemoveFilter(filter.id)}\n            aria-label={`Restore filter: ${filter.label}`}>\n            {filter.label} <span className=\"undo-icon\">↺</span>\n          </button>\n        ))}\n      </div>\n    </div>\n  )}\n</div>\n\n/* CSS */\n.filter-management {\n  margin-bottom: var(--goa-space-l);\n}\n\n.filter-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: var(--goa-space-m);\n}\n\n.filter-header h3 {\n  margin: 0;\n  font-size: var(--goa-font-size-m);\n  color: var(--goa-color-text);\n}\n\n.clear-all-button {\n  background: none;\n  border: 1px solid var(--goa-color-border);\n  color: var(--goa-color-text-secondary);\n  padding: var(--goa-space-xs) var(--goa-space-s);\n  border-radius: var(--goa-border-radius-s);\n  cursor: pointer;\n  font-size: var(--goa-font-size-s);\n}\n\n.clear-all-button:hover {\n  background-color: var(--goa-color-background-hover);\n  border-color: var(--goa-color-border-hover);\n}\n\n.filter-chips {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--goa-space-s);\n  margin-bottom: var(--goa-space-m);\n}\n\n.no-filters-message {\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n  border: 1px solid var(--goa-color-border);\n  text-align: center;\n}\n\n.no-filters-message p {\n  margin: 0;\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-s);\n}\n\n.undo-section {\n  margin-top: var(--goa-space-m);\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-info-light);\n  border-radius: var(--goa-border-radius-s);\n  border-left: 4px solid var(--goa-color-info);\n}\n\n.undo-section p {\n  margin: 0 0 var(--goa-space-s) 0;\n  font-size: var(--goa-font-size-s);\n  color: var(--goa-color-info-dark);\n}\n\n.undo-chips {\n  display: flex;\n  flex-wrap: wrap;\n  gap: var(--goa-space-s);\n}\n\n.undo-chip {\n  background: var(--goa-color-background);\n  border: 1px solid var(--goa-color-info);\n  color: var(--goa-color-info-dark);\n  padding: var(--goa-space-xs) var(--goa-space-s);\n  border-radius: var(--goa-border-radius-s);\n  cursor: pointer;\n  font-size: var(--goa-font-size-s);\n  display: flex;\n  align-items: center;\n  gap: var(--goa-space-xs);\n}\n\n.undo-chip:hover {\n  background-color: var(--goa-color-info-light);\n}\n\n.undo-icon {\n  font-weight: bold;\n}"
    },
    "angular": {
      "complete": "export class RemoveAFilterComponent {\n  filters = [\n    { id: 1, label: \"Status: Active\", value: \"active\" },\n    { id: 2, label: \"Type: Application\", value: \"application\" },\n    { id: 3, label: \"Date: This Month\", value: \"this-month\" },\n    { id: 4, label: \"Priority: High\", value: \"high\" }\n  ];\n  removedFilters: any[] = [];\n  undoTimeout: any = null;\n\n  removeFilter(filterId: number) {\n    const filterToRemove = this.filters.find(f => f.id === filterId);\n    if (!filterToRemove) return;\n\n    // Add to removed filters for potential undo\n    this.removedFilters.push(filterToRemove);\n    \n    // Remove from active filters\n    this.filters = this.filters.filter(f => f.id !== filterId);\n    \n    // Track analytics\n    console.log('Filter removed:', filterToRemove.label);\n    \n    // Clear any existing undo timeout\n    if (this.undoTimeout) {\n      clearTimeout(this.undoTimeout);\n    }\n    \n    // Set new undo timeout\n    this.undoTimeout = setTimeout(() => {\n      this.removedFilters = this.removedFilters.filter(f => f.id !== filterId);\n    }, 10000); // 10 second undo window\n  }\n\n  undoRemoveFilter(filterId: number) {\n    const filterToRestore = this.removedFilters.find(f => f.id === filterId);\n    if (!filterToRestore) return;\n\n    // Add back to active filters\n    this.filters.push(filterToRestore);\n    \n    // Remove from removed filters\n    this.removedFilters = this.removedFilters.filter(f => f.id !== filterId);\n    \n    // Clear timeout\n    if (this.undoTimeout) {\n      clearTimeout(this.undoTimeout);\n      this.undoTimeout = null;\n    }\n    \n    console.log('Filter restored:', filterToRestore.label);\n  }\n\n  clearAllFilters() {\n    if (this.filters.length === 0) return;\n    \n    // Add all filters to removed filters\n    this.removedFilters.push(...this.filters);\n    \n    // Clear active filters\n    this.filters = [];\n    \n    console.log('All filters cleared');\n    \n    // Set undo timeout for all filters\n    this.undoTimeout = setTimeout(() => {\n      this.removedFilters = [];\n    }, 10000);\n  }\n\n  getFilterCount(): number {\n    return this.filters.length;\n  }\n\n  hasActiveFilters(): boolean {\n    return this.filters.length > 0;\n  }\n\n  handleFilterRemoval(filterId: number, event?: Event) {\n    // Optional: Prevent event bubbling\n    if (event) {\n      event.stopPropagation();\n    }\n    \n    this.removeFilter(filterId);\n  }\n\n  getFilterById(id: number) {\n    return this.filters.find(f => f.id === id);\n  }\n}",
      "key": "filters = [\n  { id: 1, label: \"Status: Active\", value: \"active\" },\n  { id: 2, label: \"Type: Application\", value: \"application\" },\n  { id: 3, label: \"Date: This Month\", value: \"this-month\" }\n];\nremovedFilters: any[] = [];\nundoTimeout: any = null;\n\nremoveFilter(filterId: number) {\n  const filterToRemove = this.filters.find(f => f.id === filterId);\n  if (!filterToRemove) return;\n\n  // Add to removed filters for potential undo\n  this.removedFilters.push(filterToRemove);\n  \n  // Remove from active filters\n  this.filters = this.filters.filter(f => f.id !== filterId);\n  \n  // Track analytics\n  console.log('Filter removed:', filterToRemove.label);\n  \n  // Clear any existing undo timeout\n  if (this.undoTimeout) {\n    clearTimeout(this.undoTimeout);\n  }\n  \n  // Set new undo timeout\n  this.undoTimeout = setTimeout(() => {\n    this.removedFilters = this.removedFilters.filter(f => f.id !== filterId);\n  }, 10000);\n}\n\nundoRemoveFilter(filterId: number) {\n  const filterToRestore = this.removedFilters.find(f => f.id === filterId);\n  if (!filterToRestore) return;\n\n  // Add back to active filters\n  this.filters.push(filterToRestore);\n  \n  // Remove from removed filters\n  this.removedFilters = this.removedFilters.filter(f => f.id !== filterId);\n  \n  // Clear timeout\n  if (this.undoTimeout) {\n    clearTimeout(this.undoTimeout);\n    this.undoTimeout = null;\n  }\n  \n  console.log('Filter restored:', filterToRestore.label);\n}\n\nclearAllFilters() {\n  if (this.filters.length === 0) return;\n  \n  // Add all filters to removed filters\n  this.removedFilters.push(...this.filters);\n  \n  // Clear active filters\n  this.filters = [];\n  \n  console.log('All filters cleared');\n}\n\ngetFilterCount(): number {\n  return this.filters.length;\n}\n\nhasActiveFilters(): boolean {\n  return this.filters.length > 0;\n}\n\nhandleFilterRemoval(filterId: number, event?: Event) {\n  if (event) {\n    event.stopPropagation();\n  }\n  \n  this.removeFilter(filterId);\n}\n\n<!-- Template -->\n<div class=\"filter-management\">\n  <div class=\"filter-header\">\n    <h3>Active Filters ({{ getFilterCount() }})</h3>\n    <button \n      class=\"clear-all-button\"\n      (click)=\"clearAllFilters()\"\n      *ngIf=\"hasActiveFilters()\"\n      aria-label=\"Clear all filters\">\n      Clear All\n    </button>\n  </div>\n  \n  <div class=\"filter-chips\">\n    <goab-filter-chip\n      *ngFor=\"let filter of filters\"\n      [content]=\"filter.label\"\n      (onClick)=\"handleFilterRemoval(filter.id)\"\n      mr=\"s\"\n      mb=\"s\"\n      [attr.aria-label]=\"'Remove filter: ' + filter.label\">\n    </goab-filter-chip>\n  </div>\n  \n  <div class=\"no-filters-message\" *ngIf=\"!hasActiveFilters()\">\n    <p>No active filters. Use the search and filter controls to refine your results.</p>\n  </div>\n  \n  <div class=\"undo-section\" *ngIf=\"removedFilters.length > 0\">\n    <p>Recently removed filters:</p>\n    <div class=\"undo-chips\">\n      <button\n        *ngFor=\"let filter of removedFilters\"\n        class=\"undo-chip\"\n        (click)=\"undoRemoveFilter(filter.id)\"\n        [attr.aria-label]=\"'Restore filter: ' + filter.label\">\n        {{ filter.label }} <span class=\"undo-icon\">↺</span>\n      </button>\n    </div>\n  </div>\n</div>"
    }
  },
  "tags": [
    "filter-chip",
    "remove-filter",
    "filter-management",
    "chip-interaction",
    "state-management",
    "filter-removal",
    "undo-functionality",
    "search-refinement",
    "filter-controls",
    "interactive-chips"
  ]
}