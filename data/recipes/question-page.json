{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "question-page",
  "recipeName": "Question Page",
  "category": "form-pattern",
  "summary": "Design focused question pages following one idea per page principle to reduce cognitive load and improve user experience",
  "serviceContext": {
    "useCase": "Create individual question pages that present one focused task or question at a time, optimizing for user comprehension and completion rates",
    "userType": "both",
    "governmentServiceFlows": [
      "When citizens complete government forms with complex decision points requiring focused attention",
      "When workers process case information through structured questioning workflows",
      "When users need to make important decisions that require careful consideration",
      "When form completion rates and data quality are critical for service delivery"
    ],
    "relatedPatterns": [
      "public-form",
      "ask-a-user-one-question-at-a-time",
      "give-background-information-before-asking-a-question",
      "show-a-simple-progress-indicator-on-a-question-page"
    ]
  },
  "components": [
    {
      "componentName": "GoabTab",
      "role": "Content organization",
      "purpose": "Organize question page documentation into code examples and design guidelines"
    },
    {
      "componentName": "GoabTabs",
      "role": "Navigation container",
      "purpose": "Provide tabbed interface for accessing different aspects of question page guidance"
    },
    {
      "componentName": "GoabText",
      "role": "Content display",
      "purpose": "Present structured text content with consistent typography and spacing"
    }
  ],
  "codeReference": {
    "exampleFile": "question-page.tsx",
    "linesOfCode": 239,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "medium",
    "keyPatterns": [
      "One idea per page principle for reduced cognitive load",
      "Progress indication only when necessary and reliable",
      "Adaptive questioning based on user responses",
      "Mobile-first design approach for accessibility",
      "Linear progression with clear navigation",
      "Error handling at individual question level"
    ],
    "designPatterns": [
      "Single-concept questioning",
      "Progressive form completion",
      "Adaptive form logic",
      "Mobile-optimized interaction",
      "Accessibility-first design"
    ],
    "accessibility": [
      "Reduced cognitive load through focused questioning",
      "Improved screen reader navigation with single-concept pages",
      "Better error handling with contextual feedback",
      "Enhanced mobile accessibility with simplified interface",
      "Clear progression through form workflow"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabTab, GoabTabs, GoabText } from \"@abgov/react-components\";\nimport { useState } from \"react\";\n\nexport default function QuestionPage() {\n  const [currentTab, setCurrentTab] = useState(1);\n  const [formProgress, setFormProgress] = useState(0);\n  const [showProgressIndicator, setShowProgressIndicator] = useState(false);\n\n  const questionPagePrinciples = {\n    userBenefits: [\n      \"understand what you're asking them to do\",\n      \"focus on the specific question and its answer\",\n      \"find their way through an unfamiliar process\",\n      \"use the service on a mobile device\",\n      \"recover easily from errors\",\n      \"navigate with assistive technologies\"\n    ],\n    serviceBenefits: [\n      \"handle branching questions and loops\",\n      \"save a user's answers automatically as they go\",\n      \"capture analytics about each question\",\n      \"manage potential complexity on a page\"\n    ],\n    keyAdvantages: [\n      {\n        title: \"Focus\",\n        description: \"Asking one question at a time helps users focus on the task at hand. This is especially beneficial for complex forms or surveys, where multiple fields can easily overwhelm or confuse the user.\"\n      },\n      {\n        title: \"Efficiency\",\n        description: \"Due to the improved focus of the task at hand, completion time for forms can be lowered when measured against traditional long form patterns.\"\n      },\n      {\n        title: \"Progression\",\n        description: \"This approach gives users a sense of progression and accomplishment as they navigate through the form, which can motivate them to complete the form.\"\n      },\n      {\n        title: \"Reduce Cognitive Load\",\n        description: \"By reducing the amount of information presented at once, this design pattern can help minimize cognitive load.\"\n      },\n      {\n        title: \"Adaptive\",\n        description: \"Allows for adaptive questioning. The answer to one question can determine the next question asked.\"\n      },\n      {\n        title: \"Data Quality\",\n        description: \"With all the user's attention on one question, they are more likely to provide accurate and thoughtful answers.\"\n      },\n      {\n        title: \"Mobile Friendly\",\n        description: \"One question at a time approach makes it easier for users to fill out the form on smaller screens.\"\n      },\n      {\n        title: \"Error Handling\",\n        description: \"If a user makes an error on a form, it is easier and faster to provide feedback on that specific question.\"\n      }\n    ]\n  };\n\n  const progressIndicatorGuidelines = {\n    whenToAvoid: [\n      {\n        title: \"Induce anxiety\",\n        description: \"If the form is lengthy, showing a slow-moving progress bar can induce anxiety and may deter the user from completing the form.\"\n      },\n      {\n        title: \"False perception\",\n        description: \"Progress bars often represent completion in a linear fashion, but not all form questions take an equal amount of time or effort to complete.\"\n      },\n      {\n        title: \"Distraction\",\n        description: \"In an adaptive questioning scenario where the next question depends on the answer to the current question, it's challenging to provide an accurate progress indicator.\"\n      },\n      {\n        title: \"Speed over accuracy\",\n        description: \"A progress indicator can lead users to rush through the form to see the progress bar move faster, thus sacrificing the quality of their responses.\"\n      }\n    ],\n    formStepperCriteria: [\n      \"your form can be broken into logical groups or steps that is helpful to constantly communicate to the user\",\n      \"your form is always linear, and a user cannot skip questions\",\n      \"it is valuable to indicate to the user where they are in the process at all times ongoing\",\n      \"it is valuable to indicate to the user how many steps are remaining, and you can do so reliably\",\n      \"the form is not dynamic, where the number of questions remaining can change depending on the response\"\n    ]\n  };\n\n  const handleTabChange = (tabIndex: number) => {\n    setCurrentTab(tabIndex);\n  };\n\n  const shouldShowProgressIndicator = (formLength: number, isLinear: boolean, hasReliableCount: boolean) => {\n    return formLength > 5 && isLinear && hasReliableCount;\n  };\n\n  const calculateFormProgress = (currentQuestion: number, totalQuestions: number) => {\n    return (currentQuestion / totalQuestions) * 100;\n  };\n\n  return (\n    <div className=\"question-page-pattern\">\n      <GoabTabs initialTab={currentTab} onChange={handleTabChange}>\n        <GoabTab heading=\"Code\">\n          <div className=\"code-examples\">\n            <h3>Question Page Implementation</h3>\n            <p>Question page code examples would be displayed here...</p>\n          </div>\n        </GoabTab>\n\n        <GoabTab heading=\"Design guidelines\">\n          <div className=\"design-guidelines\">\n            <div className=\"form-overview\">\n              <img\n                alt=\"question page overview\"\n                src=\"/images/patterns/form-pattern_question-page.png\"\n              />\n            </div>\n\n            <section className=\"form-structure\">\n              <h2>Form structure</h2>\n              <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n                Start by splitting the form across multiple pages with each page containing just one\n                idea, for example:\n              </GoabText>\n              <ul>\n                <li>one piece of information you're telling a user</li>\n                <li>one decision they have to make</li>\n                <li>one question they have to answer</li>\n              </ul>\n\n              <div className=\"benefits-section\">\n                <h4>Helps users to:</h4>\n                <ul>\n                  {questionPagePrinciples.userBenefits.map((benefit, index) => (\n                    <li key={index}>\n                      <GoabText size=\"body-m\" mt=\"none\" mb=\"xs\">{benefit}</GoabText>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n\n              <div className=\"service-benefits\">\n                <h4>Helps the service to:</h4>\n                <ul>\n                  {questionPagePrinciples.serviceBenefits.map((benefit, index) => (\n                    <li key={index}>\n                      <GoabText size=\"body-m\" mt=\"none\" mb=\"xs\">{benefit}</GoabText>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </section>\n\n            <section className=\"key-advantages\">\n              <h3>What are the main benefits of starting with one idea per page?</h3>\n              {questionPagePrinciples.keyAdvantages.map((advantage, index) => (\n                <div key={index} className=\"advantage-item\">\n                  <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n                    <strong>{advantage.title}:</strong> {advantage.description}\n                  </GoabText>\n                </div>\n              ))}\n            </section>\n\n            <section className=\"progress-indicators\">\n              <h2>Using progress indicators</h2>\n              <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n                Start by testing your form without a progress indicator to see if it's simple enough\n                that users do not need one.\n              </GoabText>\n              <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n                Try improving the order, type or number of questions before adding a progress\n                indicator. If people still have difficulty, try adding a simple step or question\n                indicator.\n              </GoabText>\n\n              <div className=\"progress-example\">\n                <img\n                  alt=\"Example of a simple progress indicator in a form\"\n                  src=\"/images/patterns/question-page-progress-indicator.png\"\n                />\n                <figcaption>Example of a simple progress indicator in a form</figcaption>\n              </div>\n\n              <div className=\"avoid-progress\">\n                <h3>Why should I avoid progress indicators on forms?</h3>\n                {progressIndicatorGuidelines.whenToAvoid.map((reason, index) => (\n                  <GoabText key={index} size=\"body-m\" mt=\"l\" mb=\"l\">\n                    <strong>{reason.title}:</strong> {reason.description}\n                  </GoabText>\n                ))}\n              </div>\n            </section>\n\n            <section className=\"form-stepper\">\n              <h2>When to use a form stepper</h2>\n              <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n                A form stepper is a type of visual step/progress indicator in a form.\n              </GoabText>\n              <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n                Start with a one thing per page approach, and consider using a form stepper when all\n                of the following is true:\n              </GoabText>\n              <ul>\n                {progressIndicatorGuidelines.formStepperCriteria.map((criterion, index) => (\n                  <li key={index}>\n                    <GoabText size=\"body-m\" mt=\"none\" mb=\"xs\">{criterion}</GoabText>\n                  </li>\n                ))}\n              </ul>\n            </section>\n          </div>\n        </GoabTab>\n      </GoabTabs>\n    </div>\n  );\n}",
      "key": "const [activeTab, setActiveTab] = useState(1);\nconst [questionProgress, setQuestionProgress] = useState(0);\nconst [formStructure, setFormStructure] = useState({});\n\nconst questionPageBenefits = {\n  userFocused: [\n    \"understand what you're asking them to do\",\n    \"focus on the specific question and its answer\",\n    \"find their way through an unfamiliar process\",\n    \"use the service on a mobile device\",\n    \"recover easily from errors\",\n    \"navigate with assistive technologies\"\n  ],\n  serviceFocused: [\n    \"handle branching questions and loops\",\n    \"save a user's answers automatically as they go\",\n    \"capture analytics about each question\",\n    \"manage potential complexity on a page\"\n  ]\n};\n\nconst designPrinciples = {\n  oneIdeaPerPage: {\n    concepts: [\n      \"one piece of information you're telling a user\",\n      \"one decision they have to make\",\n      \"one question they have to answer\"\n    ],\n    advantages: [\n      { title: \"Focus\", description: \"Asking one question at a time helps users focus on the task at hand.\" },\n      { title: \"Efficiency\", description: \"Completion time for forms can be lowered when measured against traditional long form patterns.\" },\n      { title: \"Progression\", description: \"Gives users a sense of progression and accomplishment as they navigate through the form.\" },\n      { title: \"Reduce Cognitive Load\", description: \"By reducing the amount of information presented at once, this design pattern can help minimize cognitive load.\" },\n      { title: \"Adaptive\", description: \"Allows for adaptive questioning where the answer to one question can determine the next question asked.\" },\n      { title: \"Data Quality\", description: \"With all the user's attention on one question, they are more likely to provide accurate and thoughtful answers.\" },\n      { title: \"Mobile Friendly\", description: \"One question at a time approach makes it easier for users to fill out the form on smaller screens.\" },\n      { title: \"Error Handling\", description: \"If a user makes an error on a form, it is easier and faster to provide feedback on that specific question.\" }\n    ]\n  },\n  progressIndicators: {\n    whenToAvoid: [\n      { title: \"Induce anxiety\", description: \"If the form is lengthy, showing a slow-moving progress bar can induce anxiety and may deter the user from completing the form.\" },\n      { title: \"False perception\", description: \"Progress bars often represent completion in a linear fashion, but not all form questions take an equal amount of time or effort to complete.\" },\n      { title: \"Distraction\", description: \"In an adaptive questioning scenario where the next question depends on the answer to the current question, it's challenging to provide an accurate progress indicator.\" },\n      { title: \"Speed over accuracy\", description: \"A progress indicator can lead users to rush through the form to see the progress bar move faster, thus sacrificing the quality of their responses.\" }\n    ],\n    formStepperCriteria: [\n      \"your form can be broken into logical groups or steps that is helpful to constantly communicate to the user\",\n      \"your form is always linear, and a user cannot skip questions\",\n      \"it is valuable to indicate to the user where they are in the process at all times ongoing\",\n      \"it is valuable to indicate to the user how many steps are remaining, and you can do so reliably\",\n      \"the form is not dynamic, where the number of questions remaining can change depending on the response\"\n    ]\n  }\n};\n\nconst handleTabNavigation = (tabIndex: number) => {\n  setActiveTab(tabIndex);\n};\n\nconst evaluateProgressNeed = (formLength: number, isLinear: boolean, hasReliableCount: boolean) => {\n  return {\n    shouldShow: formLength > 5 && isLinear && hasReliableCount,\n    recommendation: formLength <= 5 ? 'Form is simple enough without progress indicator' : 'Consider adding progress indicator'\n  };\n};\n\nconst calculateQuestionProgress = (currentQuestion: number, totalQuestions: number) => {\n  return Math.round((currentQuestion / totalQuestions) * 100);\n};\n\nconst validateFormStructure = (structure: any) => {\n  const errors = [];\n  if (!structure.hasOneIdeaPerPage) {\n    errors.push('Form should follow one idea per page principle');\n  }\n  if (!structure.isMobileFriendly) {\n    errors.push('Form should be optimized for mobile devices');\n  }\n  if (!structure.hasAccessibleDesign) {\n    errors.push('Form should include accessibility considerations');\n  }\n  return errors;\n};\n\n<div className=\"question-page-pattern\">\n  <GoabTabs initialTab={activeTab} onChange={handleTabNavigation}>\n    <GoabTab heading=\"Code\">\n      <div className=\"implementation-guide\">\n        <h3>Question Page Implementation</h3>\n        <p>Code examples for implementing question pages with one idea per page principle...</p>\n      </div>\n    </GoabTab>\n\n    <GoabTab heading=\"Design guidelines\">\n      <div className=\"design-guidelines\">\n        <img alt=\"question page overview\" src=\"/images/patterns/form-pattern_question-page.png\" />\n        \n        <section className=\"form-structure\">\n          <h2>Form structure</h2>\n          <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n            Start by splitting the form across multiple pages with each page containing just one idea, for example:\n          </GoabText>\n          <ul>\n            {designPrinciples.oneIdeaPerPage.concepts.map((concept, index) => (\n              <li key={index}>\n                <GoabText size=\"body-m\" mt=\"none\" mb=\"xs\">{concept}</GoabText>\n              </li>\n            ))}\n          </ul>\n\n          <div className=\"benefits-grid\">\n            <div className=\"user-benefits\">\n              <h4>Helps users to:</h4>\n              <ul>\n                {questionPageBenefits.userFocused.map((benefit, index) => (\n                  <li key={index}>\n                    <GoabText size=\"body-m\" mt=\"none\" mb=\"xs\">{benefit}</GoabText>\n                  </li>\n                ))}\n              </ul>\n            </div>\n            \n            <div className=\"service-benefits\">\n              <h4>Helps the service to:</h4>\n              <ul>\n                {questionPageBenefits.serviceFocused.map((benefit, index) => (\n                  <li key={index}>\n                    <GoabText size=\"body-m\" mt=\"none\" mb=\"xs\">{benefit}</GoabText>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </section>\n\n        <section className=\"key-advantages\">\n          <h3>What are the main benefits of starting with one idea per page?</h3>\n          {designPrinciples.oneIdeaPerPage.advantages.map((advantage, index) => (\n            <div key={index} className=\"advantage-item\">\n              <GoabText size=\"body-m\" mt=\"l\" mb=\"l\">\n                <strong>{advantage.title}:</strong> {advantage.description}\n              </GoabText>\n            </div>\n          ))}\n        </section>\n      </div>\n    </GoabTab>\n  </GoabTabs>\n</div>\n\n/* CSS */\n.question-page-pattern {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.benefits-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: var(--goa-space-xl);\n  margin-top: var(--goa-space-l);\n}\n\n@media (max-width: 768px) {\n  .benefits-grid {\n    grid-template-columns: 1fr;\n  }\n}\n\n.advantage-item {\n  margin-bottom: var(--goa-space-l);\n}\n\n.progress-example {\n  text-align: center;\n  margin: var(--goa-space-xl) 0;\n}\n\n.progress-example img {\n  max-width: 100%;\n  height: auto;\n  border: 1px solid var(--goa-color-border);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.progress-example figcaption {\n  margin-top: var(--goa-space-s);\n  font-size: var(--goa-font-size-s);\n  color: var(--goa-color-text-secondary);\n  font-style: italic;\n}"
    },
    "angular": {
      "complete": "export class QuestionPageComponent {\n  activeTab = 1;\n  questionProgress = 0;\n  formStructure: any = {};\n  \n  questionPageBenefits = {\n    userFocused: [\n      \"understand what you're asking them to do\",\n      \"focus on the specific question and its answer\",\n      \"find their way through an unfamiliar process\",\n      \"use the service on a mobile device\",\n      \"recover easily from errors\",\n      \"navigate with assistive technologies\"\n    ],\n    serviceFocused: [\n      \"handle branching questions and loops\",\n      \"save a user's answers automatically as they go\",\n      \"capture analytics about each question\",\n      \"manage potential complexity on a page\"\n    ]\n  };\n\n  designPrinciples = {\n    oneIdeaPerPage: {\n      concepts: [\n        \"one piece of information you're telling a user\",\n        \"one decision they have to make\",\n        \"one question they have to answer\"\n      ],\n      advantages: [\n        { title: \"Focus\", description: \"Asking one question at a time helps users focus on the task at hand.\" },\n        { title: \"Efficiency\", description: \"Completion time for forms can be lowered when measured against traditional long form patterns.\" },\n        { title: \"Progression\", description: \"Gives users a sense of progression and accomplishment as they navigate through the form.\" },\n        { title: \"Reduce Cognitive Load\", description: \"By reducing the amount of information presented at once, this design pattern can help minimize cognitive load.\" },\n        { title: \"Adaptive\", description: \"Allows for adaptive questioning where the answer to one question can determine the next question asked.\" },\n        { title: \"Data Quality\", description: \"With all the user's attention on one question, they are more likely to provide accurate and thoughtful answers.\" },\n        { title: \"Mobile Friendly\", description: \"One question at a time approach makes it easier for users to fill out the form on smaller screens.\" },\n        { title: \"Error Handling\", description: \"If a user makes an error on a form, it is easier and faster to provide feedback on that specific question.\" }\n      ]\n    },\n    progressIndicators: {\n      whenToAvoid: [\n        { title: \"Induce anxiety\", description: \"If the form is lengthy, showing a slow-moving progress bar can induce anxiety and may deter the user from completing the form.\" },\n        { title: \"False perception\", description: \"Progress bars often represent completion in a linear fashion, but not all form questions take an equal amount of time or effort to complete.\" },\n        { title: \"Distraction\", description: \"In an adaptive questioning scenario where the next question depends on the answer to the current question, it's challenging to provide an accurate progress indicator.\" },\n        { title: \"Speed over accuracy\", description: \"A progress indicator can lead users to rush through the form to see the progress bar move faster, thus sacrificing the quality of their responses.\" }\n      ],\n      formStepperCriteria: [\n        \"your form can be broken into logical groups or steps that is helpful to constantly communicate to the user\",\n        \"your form is always linear, and a user cannot skip questions\",\n        \"it is valuable to indicate to the user where they are in the process at all times ongoing\",\n        \"it is valuable to indicate to the user how many steps are remaining, and you can do so reliably\",\n        \"the form is not dynamic, where the number of questions remaining can change depending on the response\"\n      ]\n    }\n  };\n\n  handleTabNavigation(tabIndex: number) {\n    this.activeTab = tabIndex;\n  }\n\n  evaluateProgressNeed(formLength: number, isLinear: boolean, hasReliableCount: boolean) {\n    return {\n      shouldShow: formLength > 5 && isLinear && hasReliableCount,\n      recommendation: formLength <= 5 ? 'Form is simple enough without progress indicator' : 'Consider adding progress indicator'\n    };\n  }\n\n  calculateQuestionProgress(currentQuestion: number, totalQuestions: number): number {\n    return Math.round((currentQuestion / totalQuestions) * 100);\n  }\n\n  validateFormStructure(structure: any): string[] {\n    const errors: string[] = [];\n    if (!structure.hasOneIdeaPerPage) {\n      errors.push('Form should follow one idea per page principle');\n    }\n    if (!structure.isMobileFriendly) {\n      errors.push('Form should be optimized for mobile devices');\n    }\n    if (!structure.hasAccessibleDesign) {\n      errors.push('Form should include accessibility considerations');\n    }\n    return errors;\n  }\n\n  isActiveTab(tabIndex: number): boolean {\n    return this.activeTab === tabIndex;\n  }\n}",
      "key": "activeTab = 1;\nquestionProgress = 0;\nformStructure: any = {};\n\nquestionPageBenefits = {\n  userFocused: [\n    \"understand what you're asking them to do\",\n    \"focus on the specific question and its answer\",\n    \"find their way through an unfamiliar process\",\n    \"use the service on a mobile device\",\n    \"recover easily from errors\",\n    \"navigate with assistive technologies\"\n  ],\n  serviceFocused: [\n    \"handle branching questions and loops\",\n    \"save a user's answers automatically as they go\",\n    \"capture analytics about each question\",\n    \"manage potential complexity on a page\"\n  ]\n};\n\ndesignPrinciples = {\n  oneIdeaPerPage: {\n    concepts: [\n      \"one piece of information you're telling a user\",\n      \"one decision they have to make\",\n      \"one question they have to answer\"\n    ],\n    advantages: [\n      { title: \"Focus\", description: \"Asking one question at a time helps users focus on the task at hand.\" },\n      { title: \"Efficiency\", description: \"Completion time for forms can be lowered when measured against traditional long form patterns.\" },\n      { title: \"Progression\", description: \"Gives users a sense of progression and accomplishment as they navigate through the form.\" }\n    ]\n  }\n};\n\nhandleTabNavigation(tabIndex: number) {\n  this.activeTab = tabIndex;\n}\n\nevaluateProgressNeed(formLength: number, isLinear: boolean, hasReliableCount: boolean) {\n  return {\n    shouldShow: formLength > 5 && isLinear && hasReliableCount,\n    recommendation: formLength <= 5 ? 'Form is simple enough without progress indicator' : 'Consider adding progress indicator'\n  };\n}\n\ncalculateQuestionProgress(currentQuestion: number, totalQuestions: number): number {\n  return Math.round((currentQuestion / totalQuestions) * 100);\n}\n\nvalidateFormStructure(structure: any): string[] {\n  const errors: string[] = [];\n  if (!structure.hasOneIdeaPerPage) {\n    errors.push('Form should follow one idea per page principle');\n  }\n  if (!structure.isMobileFriendly) {\n    errors.push('Form should be optimized for mobile devices');\n  }\n  if (!structure.hasAccessibleDesign) {\n    errors.push('Form should include accessibility considerations');\n  }\n  return errors;\n}\n\nisActiveTab(tabIndex: number): boolean {\n  return this.activeTab === tabIndex;\n}\n\n<!-- Template -->\n<div class=\"question-page-pattern\">\n  <goab-tabs [initialTab]=\"activeTab\" (onChange)=\"handleTabNavigation($event)\">\n    <goab-tab heading=\"Code\">\n      <div class=\"implementation-guide\">\n        <h3>Question Page Implementation</h3>\n        <p>Code examples for implementing question pages with one idea per page principle...</p>\n      </div>\n    </goab-tab>\n\n    <goab-tab heading=\"Design guidelines\">\n      <div class=\"design-guidelines\">\n        <img alt=\"question page overview\" src=\"/images/patterns/form-pattern_question-page.png\" />\n        \n        <section class=\"form-structure\">\n          <h2>Form structure</h2>\n          <goab-text size=\"body-m\" mt=\"l\" mb=\"l\">\n            Start by splitting the form across multiple pages with each page containing just one idea, for example:\n          </goab-text>\n          <ul>\n            <li *ngFor=\"let concept of designPrinciples.oneIdeaPerPage.concepts\">\n              <goab-text size=\"body-m\" mt=\"none\" mb=\"xs\">{{ concept }}</goab-text>\n            </li>\n          </ul>\n\n          <div class=\"benefits-grid\">\n            <div class=\"user-benefits\">\n              <h4>Helps users to:</h4>\n              <ul>\n                <li *ngFor=\"let benefit of questionPageBenefits.userFocused\">\n                  <goab-text size=\"body-m\" mt=\"none\" mb=\"xs\">{{ benefit }}</goab-text>\n                </li>\n              </ul>\n            </div>\n            \n            <div class=\"service-benefits\">\n              <h4>Helps the service to:</h4>\n              <ul>\n                <li *ngFor=\"let benefit of questionPageBenefits.serviceFocused\">\n                  <goab-text size=\"body-m\" mt=\"none\" mb=\"xs\">{{ benefit }}</goab-text>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </section>\n\n        <section class=\"key-advantages\">\n          <h3>What are the main benefits of starting with one idea per page?</h3>\n          <div class=\"advantage-item\" *ngFor=\"let advantage of designPrinciples.oneIdeaPerPage.advantages\">\n            <goab-text size=\"body-m\" mt=\"l\" mb=\"l\">\n              <strong>{{ advantage.title }}:</strong> {{ advantage.description }}\n            </goab-text>\n          </div>\n        </section>\n      </div>\n    </goab-tab>\n  </goab-tabs>\n</div>"
    }
  },
  "tags": [
    "question-page",
    "form-pattern",
    "one-idea-per-page",
    "cognitive-load",
    "accessibility",
    "mobile-first",
    "progressive-disclosure",
    "adaptive-questioning",
    "user-experience",
    "form-design"
  ]
}