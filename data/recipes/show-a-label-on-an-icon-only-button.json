{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "show-a-label-on-an-icon-only-button",
  "recipeName": "Show a Label on an Icon-Only Button",
  "category": "interaction-pattern",
  "summary": "Display descriptive labels for icon-only buttons using tooltips to improve usability and accessibility without cluttering the interface",
  "serviceContext": {
    "useCase": "Provide clear context for icon-based actions while maintaining clean interface design, ensuring users understand button functionality without relying solely on visual icon recognition",
    "userType": "both",
    "governmentServiceFlows": [
      "When citizens interact with compact toolbar buttons for editing forms or managing applications",
      "When workers use administrative dashboards with space-constrained action buttons",
      "When mobile interfaces require minimal visual footprint while maintaining clarity",
      "When accessibility standards require clear labeling for all interactive elements"
    ],
    "relatedPatterns": [
      "copy-to-clipboard",
      "confirm-a-change",
      "header-with-menu-click-event",
      "show-full-date-in-a-tooltip"
    ]
  },
  "components": [
    {
      "componentName": "GoabIconButton",
      "role": "Icon-based action trigger",
      "purpose": "Provide compact button interface with icon representation of functionality"
    },
    {
      "componentName": "GoabTooltip",
      "role": "Contextual label display",
      "purpose": "Show descriptive text labels on hover or focus to clarify button purpose"
    },
    {
      "componentName": "GoabButtonGroup",
      "role": "Button container and alignment",
      "purpose": "Group related icon buttons with consistent spacing and visual organization"
    }
  ],
  "codeReference": {
    "exampleFile": "show-a-label-on-an-icon-only-button.tsx",
    "linesOfCode": 23,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "low",
    "keyPatterns": [
      "Tooltip wrapper around icon buttons for label display",
      "Button group organization for related actions",
      "Accessible labeling with aria-label attributes",
      "Icon selection matching button functionality",
      "Consistent tooltip content structure"
    ],
    "designPatterns": [
      "Progressive disclosure through tooltips",
      "Icon-based interface design",
      "Accessible button labeling",
      "Compact action controls",
      "Context-sensitive help"
    ],
    "accessibility": [
      "Aria-label attributes provide screen reader context",
      "Tooltip content enhances understanding for all users",
      "Keyboard navigation support for button focus and activation",
      "Clear visual distinction between different icon actions",
      "Hover and focus states reveal contextual information"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabButtonGroup, GoabIconButton, GoabTooltip, GoabCallout, GoabFormItem, GoabTextArea, GoabButton } from \"@abgov/react-components\";\nimport { useState } from \"react\";\n\nexport default function ShowALabelOnAnIconOnlyButton() {\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [alertsEnabled, setAlertsEnabled] = useState<boolean>(true);\n  const [settingsOpen, setSettingsOpen] = useState<boolean>(false);\n  const [documentContent, setDocumentContent] = useState<string>('Sample document content that can be edited...');\n  const [lastAction, setLastAction] = useState<string>('');\n  const [actionHistory, setActionHistory] = useState<string[]>([]);\n\n  const handleEditClick = () => {\n    setEditMode(!editMode);\n    const action = editMode ? 'Edit mode disabled' : 'Edit mode enabled';\n    setLastAction(action);\n    addToHistory(action);\n    \n    console.log('Edit button clicked:', { editMode: !editMode, timestamp: new Date().toISOString() });\n  };\n\n  const handleAlertsClick = () => {\n    setAlertsEnabled(!alertsEnabled);\n    const action = alertsEnabled ? 'Alerts disabled' : 'Alerts enabled';\n    setLastAction(action);\n    addToHistory(action);\n    \n    console.log('Alerts button clicked:', { alertsEnabled: !alertsEnabled, timestamp: new Date().toISOString() });\n  };\n\n  const handleSettingsClick = () => {\n    setSettingsOpen(!settingsOpen);\n    const action = settingsOpen ? 'Settings closed' : 'Settings opened';\n    setLastAction(action);\n    addToHistory(action);\n    \n    console.log('Settings button clicked:', { settingsOpen: !settingsOpen, timestamp: new Date().toISOString() });\n  };\n\n  const handleSaveClick = () => {\n    const action = 'Document saved';\n    setLastAction(action);\n    addToHistory(action);\n    setEditMode(false);\n    \n    console.log('Save button clicked:', { content: documentContent, timestamp: new Date().toISOString() });\n  };\n\n  const handleCancelClick = () => {\n    const action = 'Edit cancelled';\n    setLastAction(action);\n    addToHistory(action);\n    setEditMode(false);\n    \n    // Reset content to original (in real app, this would revert to saved state)\n    setDocumentContent('Sample document content that can be edited...');\n    \n    console.log('Cancel button clicked:', { timestamp: new Date().toISOString() });\n  };\n\n  const handleDeleteClick = () => {\n    if (window.confirm('Are you sure you want to delete this document?')) {\n      const action = 'Document deleted';\n      setLastAction(action);\n      addToHistory(action);\n      setDocumentContent('');\n      setEditMode(false);\n      \n      console.log('Delete button clicked:', { timestamp: new Date().toISOString() });\n    }\n  };\n\n  const handleCopyClick = async () => {\n    try {\n      await navigator.clipboard.writeText(documentContent);\n      const action = 'Content copied to clipboard';\n      setLastAction(action);\n      addToHistory(action);\n      \n      console.log('Copy button clicked:', { contentLength: documentContent.length, timestamp: new Date().toISOString() });\n    } catch (error) {\n      console.error('Failed to copy content:', error);\n      setLastAction('Copy failed');\n    }\n  };\n\n  const handlePrintClick = () => {\n    window.print();\n    const action = 'Print dialog opened';\n    setLastAction(action);\n    addToHistory(action);\n    \n    console.log('Print button clicked:', { timestamp: new Date().toISOString() });\n  };\n\n  const handleRefreshClick = () => {\n    // Simulate refresh/reload\n    setDocumentContent('Sample document content that can be edited...');\n    setEditMode(false);\n    setAlertsEnabled(true);\n    setSettingsOpen(false);\n    \n    const action = 'Content refreshed';\n    setLastAction(action);\n    addToHistory(action);\n    \n    console.log('Refresh button clicked:', { timestamp: new Date().toISOString() });\n  };\n\n  const addToHistory = (action: string) => {\n    const timestamp = new Date().toLocaleTimeString();\n    const historyEntry = `${timestamp}: ${action}`;\n    setActionHistory(prev => [historyEntry, ...prev.slice(0, 4)]); // Keep last 5 entries\n  };\n\n  const getEditButtonTooltip = (): string => {\n    return editMode ? 'Exit edit mode' : 'Enter edit mode';\n  };\n\n  const getAlertsButtonTooltip = (): string => {\n    return alertsEnabled ? 'Disable notifications' : 'Enable notifications';\n  };\n\n  const getSettingsButtonTooltip = (): string => {\n    return settingsOpen ? 'Close settings' : 'Open settings';\n  };\n\n  const getEditButtonIcon = (): string => {\n    return editMode ? 'close' : 'pencil';\n  };\n\n  const getAlertsButtonIcon = (): string => {\n    return alertsEnabled ? 'notifications' : 'notifications-off';\n  };\n\n  const getSettingsButtonIcon = (): string => {\n    return settingsOpen ? 'close' : 'settings';\n  };\n\n  const renderDocumentToolbar = () => {\n    if (!editMode) {\n      return (\n        <GoabButtonGroup alignment=\"left\" gap=\"xs\">\n          <GoabTooltip content={getEditButtonTooltip()}>\n            <GoabIconButton \n              icon={getEditButtonIcon()} \n              onClick={handleEditClick}\n              ariaLabel={getEditButtonTooltip()}\n              variant=\"primary\"\n            />\n          </GoabTooltip>\n          \n          <GoabTooltip content=\"Copy content\">\n            <GoabIconButton \n              icon=\"copy\" \n              onClick={handleCopyClick}\n              ariaLabel=\"Copy document content to clipboard\"\n              variant=\"secondary\"\n            />\n          </GoabTooltip>\n          \n          <GoabTooltip content=\"Print document\">\n            <GoabIconButton \n              icon=\"print\" \n              onClick={handlePrintClick}\n              ariaLabel=\"Print document\"\n              variant=\"secondary\"\n            />\n          </GoabTooltip>\n          \n          <GoabTooltip content=\"Refresh content\">\n            <GoabIconButton \n              icon=\"refresh\" \n              onClick={handleRefreshClick}\n              ariaLabel=\"Refresh document content\"\n              variant=\"secondary\"\n            />\n          </GoabTooltip>\n        </GoabButtonGroup>\n      );\n    }\n\n    return (\n      <GoabButtonGroup alignment=\"left\" gap=\"xs\">\n        <GoabTooltip content=\"Save changes\">\n          <GoabIconButton \n            icon=\"checkmark\" \n            onClick={handleSaveClick}\n            ariaLabel=\"Save document changes\"\n            variant=\"primary\"\n          />\n        </GoabTooltip>\n        \n        <GoabTooltip content=\"Cancel editing\">\n          <GoabIconButton \n            icon=\"close\" \n            onClick={handleCancelClick}\n            ariaLabel=\"Cancel editing and discard changes\"\n            variant=\"secondary\"\n          />\n        </GoabTooltip>\n        \n        <GoabTooltip content=\"Delete document\">\n          <GoabIconButton \n            icon=\"trash\" \n            onClick={handleDeleteClick}\n            ariaLabel=\"Delete this document permanently\"\n            variant=\"destructive\"\n          />\n        </GoabTooltip>\n      </GoabButtonGroup>\n    );\n  };\n\n  const renderSystemToolbar = () => (\n    <GoabButtonGroup alignment=\"right\" gap=\"xs\">\n      <GoabTooltip content={getAlertsButtonTooltip()}>\n        <GoabIconButton \n          icon={getAlertsButtonIcon()} \n          onClick={handleAlertsClick}\n          ariaLabel={getAlertsButtonTooltip()}\n          variant={alertsEnabled ? \"primary\" : \"secondary\"}\n        />\n      </GoabTooltip>\n      \n      <GoabTooltip content={getSettingsButtonTooltip()}>\n        <GoabIconButton \n          icon={getSettingsButtonIcon()} \n          onClick={handleSettingsClick}\n          ariaLabel={getSettingsButtonTooltip()}\n          variant={settingsOpen ? \"primary\" : \"secondary\"}\n        />\n      </GoabTooltip>\n    </GoabButtonGroup>\n  );\n\n  return (\n    <div className=\"icon-button-demo\">\n      <div className=\"demo-header\">\n        <h1>Icon Button with Labels Demo</h1>\n        <p className=\"demo-description\">\n          Hover over the icon buttons to see their descriptive labels. This improves usability while maintaining a clean interface.\n        </p>\n      </div>\n\n      <div className=\"main-content\">\n        <div className=\"document-section\">\n          <div className=\"section-header\">\n            <h2>Document Actions</h2>\n            <div className=\"document-toolbar\">\n              {renderDocumentToolbar()}\n            </div>\n          </div>\n          \n          <div className=\"document-content\">\n            {editMode ? (\n              <GoabFormItem label=\"Document Content\" helperText=\"Edit the content below\">\n                <GoabTextArea\n                  value={documentContent}\n                  onChange={(e) => setDocumentContent(e.value)}\n                  rows={6}\n                  placeholder=\"Enter document content...\"\n                />\n              </GoabFormItem>\n            ) : (\n              <div className=\"content-display\">\n                <h3>Document Preview</h3>\n                <div className=\"content-text\">\n                  {documentContent || 'No content available'}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"system-section\">\n          <div className=\"section-header\">\n            <h2>System Controls</h2>\n            <div className=\"system-toolbar\">\n              {renderSystemToolbar()}\n            </div>\n          </div>\n          \n          {settingsOpen && (\n            <div className=\"settings-panel\">\n              <h3>Settings Panel</h3>\n              <div className=\"settings-content\">\n                <div className=\"setting-item\">\n                  <span className=\"setting-label\">Notifications:</span>\n                  <span className=\"setting-value\">{alertsEnabled ? 'Enabled' : 'Disabled'}</span>\n                </div>\n                <div className=\"setting-item\">\n                  <span className=\"setting-label\">Edit Mode:</span>\n                  <span className=\"setting-value\">{editMode ? 'Active' : 'Inactive'}</span>\n                </div>\n                <div className=\"setting-item\">\n                  <span className=\"setting-label\">Last Action:</span>\n                  <span className=\"setting-value\">{lastAction || 'None'}</span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {lastAction && (\n        <GoabCallout type=\"information\" heading=\"Recent Action\">\n          <p>{lastAction}</p>\n        </GoabCallout>\n      )}\n\n      {actionHistory.length > 0 && (\n        <div className=\"action-history\">\n          <h3>Action History</h3>\n          <ul className=\"history-list\">\n            {actionHistory.map((entry, index) => (\n              <li key={index} className=\"history-entry\">\n                {entry}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      <div className=\"usage-guide\">\n        <h2>Icon Button Labeling Best Practices</h2>\n        <ul className=\"practice-list\">\n          <li>\n            <strong>Clear descriptions:</strong> Tooltip content should clearly describe the button's action\n          </li>\n          <li>\n            <strong>Accessibility:</strong> Always include aria-label attributes for screen readers\n          </li>\n          <li>\n            <strong>Consistent iconography:</strong> Use familiar icons that match user expectations\n          </li>\n          <li>\n            <strong>State indication:</strong> Update tooltips to reflect current state (e.g., \"Enable\" vs \"Disable\")\n          </li>\n          <li>\n            <strong>Contextual grouping:</strong> Group related actions together for better organization\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}",
      "key": "const [editMode, setEditMode] = useState<boolean>(false);\nconst [alertsEnabled, setAlertsEnabled] = useState<boolean>(true);\nconst [settingsOpen, setSettingsOpen] = useState<boolean>(false);\nconst [documentContent, setDocumentContent] = useState<string>('Sample document content...');\nconst [lastAction, setLastAction] = useState<string>('');\n\nconst handleEditClick = () => {\n  setEditMode(!editMode);\n  const action = editMode ? 'Edit mode disabled' : 'Edit mode enabled';\n  setLastAction(action);\n  \n  console.log('Edit button clicked:', { editMode: !editMode, timestamp: new Date().toISOString() });\n};\n\nconst handleAlertsClick = () => {\n  setAlertsEnabled(!alertsEnabled);\n  const action = alertsEnabled ? 'Alerts disabled' : 'Alerts enabled';\n  setLastAction(action);\n  \n  console.log('Alerts button clicked:', { alertsEnabled: !alertsEnabled });\n};\n\nconst handleSettingsClick = () => {\n  setSettingsOpen(!settingsOpen);\n  const action = settingsOpen ? 'Settings closed' : 'Settings opened';\n  setLastAction(action);\n  \n  console.log('Settings button clicked:', { settingsOpen: !settingsOpen });\n};\n\nconst getEditButtonTooltip = (): string => {\n  return editMode ? 'Exit edit mode' : 'Enter edit mode';\n};\n\nconst getAlertsButtonTooltip = (): string => {\n  return alertsEnabled ? 'Disable notifications' : 'Enable notifications';\n};\n\nconst getSettingsButtonTooltip = (): string => {\n  return settingsOpen ? 'Close settings' : 'Open settings';\n};\n\nconst getEditButtonIcon = (): string => {\n  return editMode ? 'close' : 'pencil';\n};\n\nconst getAlertsButtonIcon = (): string => {\n  return alertsEnabled ? 'notifications' : 'notifications-off';\n};\n\nconst renderDocumentToolbar = () => {\n  if (!editMode) {\n    return (\n      <GoabButtonGroup alignment=\"left\" gap=\"xs\">\n        <GoabTooltip content={getEditButtonTooltip()}>\n          <GoabIconButton \n            icon={getEditButtonIcon()} \n            onClick={handleEditClick}\n            ariaLabel={getEditButtonTooltip()}\n            variant=\"primary\"\n          />\n        </GoabTooltip>\n        \n        <GoabTooltip content=\"Copy content\">\n          <GoabIconButton \n            icon=\"copy\" \n            onClick={() => console.log('Copy clicked')}\n            ariaLabel=\"Copy document content to clipboard\"\n            variant=\"secondary\"\n          />\n        </GoabTooltip>\n        \n        <GoabTooltip content=\"Print document\">\n          <GoabIconButton \n            icon=\"print\" \n            onClick={() => window.print()}\n            ariaLabel=\"Print document\"\n            variant=\"secondary\"\n          />\n        </GoabTooltip>\n      </GoabButtonGroup>\n    );\n  }\n\n  return (\n    <GoabButtonGroup alignment=\"left\" gap=\"xs\">\n      <GoabTooltip content=\"Save changes\">\n        <GoabIconButton \n          icon=\"checkmark\" \n          onClick={() => setEditMode(false)}\n          ariaLabel=\"Save document changes\"\n          variant=\"primary\"\n        />\n      </GoabTooltip>\n      \n      <GoabTooltip content=\"Cancel editing\">\n        <GoabIconButton \n          icon=\"close\" \n          onClick={() => setEditMode(false)}\n          ariaLabel=\"Cancel editing and discard changes\"\n          variant=\"secondary\"\n        />\n      </GoabTooltip>\n    </GoabButtonGroup>\n  );\n};\n\nconst renderSystemToolbar = () => (\n  <GoabButtonGroup alignment=\"right\" gap=\"xs\">\n    <GoabTooltip content={getAlertsButtonTooltip()}>\n      <GoabIconButton \n        icon={getAlertsButtonIcon()} \n        onClick={handleAlertsClick}\n        ariaLabel={getAlertsButtonTooltip()}\n        variant={alertsEnabled ? \"primary\" : \"secondary\"}\n      />\n    </GoabTooltip>\n    \n    <GoabTooltip content={getSettingsButtonTooltip()}>\n      <GoabIconButton \n        icon=\"settings\" \n        onClick={handleSettingsClick}\n        ariaLabel={getSettingsButtonTooltip()}\n        variant={settingsOpen ? \"primary\" : \"secondary\"}\n      />\n    </GoabTooltip>\n  </GoabButtonGroup>\n);\n\n<div className=\"icon-button-demo\">\n  <div className=\"demo-header\">\n    <h1>Icon Button with Labels Demo</h1>\n    <p>Hover over the icon buttons to see their descriptive labels.</p>\n  </div>\n\n  <div className=\"main-content\">\n    <div className=\"document-section\">\n      <div className=\"section-header\">\n        <h2>Document Actions</h2>\n        <div className=\"document-toolbar\">\n          {renderDocumentToolbar()}\n        </div>\n      </div>\n      \n      <div className=\"document-content\">\n        {editMode ? (\n          <GoabFormItem label=\"Document Content\">\n            <GoabTextArea\n              value={documentContent}\n              onChange={(e) => setDocumentContent(e.value)}\n              rows={4}\n              placeholder=\"Enter document content...\"\n            />\n          </GoabFormItem>\n        ) : (\n          <div className=\"content-display\">\n            <h3>Document Preview</h3>\n            <p>{documentContent}</p>\n          </div>\n        )}\n      </div>\n    </div>\n\n    <div className=\"system-section\">\n      <div className=\"section-header\">\n        <h2>System Controls</h2>\n        <div className=\"system-toolbar\">\n          {renderSystemToolbar()}\n        </div>\n      </div>\n      \n      {settingsOpen && (\n        <div className=\"settings-panel\">\n          <h3>Settings Panel</h3>\n          <div className=\"settings-content\">\n            <div className=\"setting-item\">\n              <span>Notifications: {alertsEnabled ? 'Enabled' : 'Disabled'}</span>\n            </div>\n            <div className=\"setting-item\">\n              <span>Edit Mode: {editMode ? 'Active' : 'Inactive'}</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  </div>\n\n  {lastAction && (\n    <GoabCallout type=\"information\" heading=\"Recent Action\">\n      <p>{lastAction}</p>\n    </GoabCallout>\n  )}\n</div>\n\n/* CSS */\n.icon-button-demo {\n  max-width: 1000px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.demo-header {\n  text-align: center;\n  margin-bottom: var(--goa-space-xl);\n}\n\n.demo-header h1 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-text);\n}\n\n.demo-description {\n  margin: 0;\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-l);\n}\n\n.main-content {\n  display: grid;\n  gap: var(--goa-space-xl);\n  margin-bottom: var(--goa-space-xl);\n}\n\n.document-section, .system-section {\n  border: 1px solid var(--goa-color-border);\n  border-radius: var(--goa-border-radius-s);\n  padding: var(--goa-space-l);\n  background-color: var(--goa-color-background);\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: var(--goa-space-l);\n  padding-bottom: var(--goa-space-m);\n  border-bottom: 1px solid var(--goa-color-border);\n}\n\n.section-header h2 {\n  margin: 0;\n  color: var(--goa-color-text);\n}\n\n.document-content {\n  margin-top: var(--goa-space-l);\n}\n\n.content-display {\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.content-display h3 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-text);\n}\n\n.content-text {\n  color: var(--goa-color-text);\n  line-height: 1.5;\n}\n\n.settings-panel {\n  margin-top: var(--goa-space-l);\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n  border: 1px solid var(--goa-color-border);\n}\n\n.settings-panel h3 {\n  margin: 0 0 var(--goa-space-m) 0;\n  color: var(--goa-color-text);\n}\n\n.settings-content {\n  display: grid;\n  gap: var(--goa-space-s);\n}\n\n.setting-item {\n  display: flex;\n  justify-content: space-between;\n  padding: var(--goa-space-xs) 0;\n  border-bottom: 1px solid var(--goa-color-border-light);\n}\n\n.setting-label {\n  font-weight: 500;\n  color: var(--goa-color-text);\n}\n\n.setting-value {\n  color: var(--goa-color-text-secondary);\n}\n\n.action-history {\n  margin-top: var(--goa-space-xl);\n  padding: var(--goa-space-l);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.action-history h3 {\n  margin: 0 0 var(--goa-space-m) 0;\n  color: var(--goa-color-text);\n}\n\n.history-list {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.history-entry {\n  padding: var(--goa-space-xs) var(--goa-space-s);\n  margin-bottom: var(--goa-space-xs);\n  background-color: var(--goa-color-background);\n  border-radius: var(--goa-border-radius-s);\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-s);\n}\n\n.usage-guide {\n  margin-top: var(--goa-space-2xl);\n  padding: var(--goa-space-l);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n  border-left: 4px solid var(--goa-color-interactive);\n}\n\n.usage-guide h2 {\n  margin: 0 0 var(--goa-space-m) 0;\n  color: var(--goa-color-text);\n}\n\n.practice-list {\n  margin: 0;\n  padding-left: var(--goa-space-l);\n}\n\n.practice-list li {\n  margin-bottom: var(--goa-space-s);\n  line-height: 1.5;\n}\n\n.practice-list strong {\n  color: var(--goa-color-text);\n}\n\n@media (max-width: 768px) {\n  .section-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: var(--goa-space-m);\n  }\n  \n  .setting-item {\n    flex-direction: column;\n    gap: var(--goa-space-xs);\n  }\n}"
    },
    "angular": {
      "complete": "export class ShowALabelOnAnIconOnlyButtonComponent {\n  editMode: boolean = false;\n  alertsEnabled: boolean = true;\n  settingsOpen: boolean = false;\n  documentContent: string = 'Sample document content that can be edited...';\n  lastAction: string = '';\n  actionHistory: string[] = [];\n\n  handleEditClick() {\n    this.editMode = !this.editMode;\n    const action = this.editMode ? 'Edit mode enabled' : 'Edit mode disabled';\n    this.lastAction = action;\n    this.addToHistory(action);\n    \n    console.log('Edit button clicked:', { editMode: this.editMode, timestamp: new Date().toISOString() });\n  }\n\n  handleAlertsClick() {\n    this.alertsEnabled = !this.alertsEnabled;\n    const action = this.alertsEnabled ? 'Alerts enabled' : 'Alerts disabled';\n    this.lastAction = action;\n    this.addToHistory(action);\n    \n    console.log('Alerts button clicked:', { alertsEnabled: this.alertsEnabled });\n  }\n\n  handleSettingsClick() {\n    this.settingsOpen = !this.settingsOpen;\n    const action = this.settingsOpen ? 'Settings opened' : 'Settings closed';\n    this.lastAction = action;\n    this.addToHistory(action);\n    \n    console.log('Settings button clicked:', { settingsOpen: this.settingsOpen });\n  }\n\n  handleSaveClick() {\n    const action = 'Document saved';\n    this.lastAction = action;\n    this.addToHistory(action);\n    this.editMode = false;\n    \n    console.log('Save button clicked:', { content: this.documentContent });\n  }\n\n  handleCancelClick() {\n    const action = 'Edit cancelled';\n    this.lastAction = action;\n    this.addToHistory(action);\n    this.editMode = false;\n    \n    // Reset content to original\n    this.documentContent = 'Sample document content that can be edited...';\n    \n    console.log('Cancel button clicked');\n  }\n\n  handleCopyClick() {\n    navigator.clipboard.writeText(this.documentContent).then(() => {\n      const action = 'Content copied to clipboard';\n      this.lastAction = action;\n      this.addToHistory(action);\n      \n      console.log('Copy button clicked:', { contentLength: this.documentContent.length });\n    }).catch(error => {\n      console.error('Failed to copy content:', error);\n      this.lastAction = 'Copy failed';\n    });\n  }\n\n  handlePrintClick() {\n    window.print();\n    const action = 'Print dialog opened';\n    this.lastAction = action;\n    this.addToHistory(action);\n    \n    console.log('Print button clicked');\n  }\n\n  addToHistory(action: string) {\n    const timestamp = new Date().toLocaleTimeString();\n    const historyEntry = `${timestamp}: ${action}`;\n    this.actionHistory = [historyEntry, ...this.actionHistory.slice(0, 4)];\n  }\n\n  getEditButtonTooltip(): string {\n    return this.editMode ? 'Exit edit mode' : 'Enter edit mode';\n  }\n\n  getAlertsButtonTooltip(): string {\n    return this.alertsEnabled ? 'Disable notifications' : 'Enable notifications';\n  }\n\n  getSettingsButtonTooltip(): string {\n    return this.settingsOpen ? 'Close settings' : 'Open settings';\n  }\n\n  getEditButtonIcon(): string {\n    return this.editMode ? 'close' : 'pencil';\n  }\n\n  getAlertsButtonIcon(): string {\n    return this.alertsEnabled ? 'notifications' : 'notifications-off';\n  }\n\n  getEditButtonVariant(): string {\n    return this.editMode ? 'primary' : 'secondary';\n  }\n\n  getAlertsButtonVariant(): string {\n    return this.alertsEnabled ? 'primary' : 'secondary';\n  }\n\n  getSettingsButtonVariant(): string {\n    return this.settingsOpen ? 'primary' : 'secondary';\n  }\n}",
      "key": "editMode: boolean = false;\nalertsEnabled: boolean = true;\nsettingsOpen: boolean = false;\ndocumentContent: string = 'Sample document content that can be edited...';\nlastAction: string = '';\nactionHistory: string[] = [];\n\nhandleEditClick() {\n  this.editMode = !this.editMode;\n  const action = this.editMode ? 'Edit mode enabled' : 'Edit mode disabled';\n  this.lastAction = action;\n  this.addToHistory(action);\n  \n  console.log('Edit button clicked:', { editMode: this.editMode });\n}\n\nhandleAlertsClick() {\n  this.alertsEnabled = !this.alertsEnabled;\n  const action = this.alertsEnabled ? 'Alerts enabled' : 'Alerts disabled';\n  this.lastAction = action;\n  this.addToHistory(action);\n}\n\nhandleSettingsClick() {\n  this.settingsOpen = !this.settingsOpen;\n  const action = this.settingsOpen ? 'Settings opened' : 'Settings closed';\n  this.lastAction = action;\n  this.addToHistory(action);\n}\n\ngetEditButtonTooltip(): string {\n  return this.editMode ? 'Exit edit mode' : 'Enter edit mode';\n}\n\ngetAlertsButtonTooltip(): string {\n  return this.alertsEnabled ? 'Disable notifications' : 'Enable notifications';\n}\n\ngetSettingsButtonTooltip(): string {\n  return this.settingsOpen ? 'Close settings' : 'Open settings';\n}\n\ngetEditButtonIcon(): string {\n  return this.editMode ? 'close' : 'pencil';\n}\n\ngetAlertsButtonIcon(): string {\n  return this.alertsEnabled ? 'notifications' : 'notifications-off';\n}\n\naddToHistory(action: string) {\n  const timestamp = new Date().toLocaleTimeString();\n  const historyEntry = `${timestamp}: ${action}`;\n  this.actionHistory = [historyEntry, ...this.actionHistory.slice(0, 4)];\n}\n\n<!-- Template -->\n<div class=\"icon-button-demo\">\n  <div class=\"demo-header\">\n    <h1>Icon Button with Labels Demo</h1>\n    <p class=\"demo-description\">\n      Hover over the icon buttons to see their descriptive labels. This improves usability while maintaining a clean interface.\n    </p>\n  </div>\n\n  <div class=\"main-content\">\n    <div class=\"document-section\">\n      <div class=\"section-header\">\n        <h2>Document Actions</h2>\n        <div class=\"document-toolbar\">\n          <goab-button-group alignment=\"left\" gap=\"xs\" *ngIf=\"!editMode\">\n            <goab-tooltip [content]=\"getEditButtonTooltip()\">\n              <goab-icon-button \n                [icon]=\"getEditButtonIcon()\" \n                (onClick)=\"handleEditClick()\"\n                [ariaLabel]=\"getEditButtonTooltip()\"\n                variant=\"primary\">\n              </goab-icon-button>\n            </goab-tooltip>\n            \n            <goab-tooltip content=\"Copy content\">\n              <goab-icon-button \n                icon=\"copy\" \n                (onClick)=\"handleCopyClick()\"\n                ariaLabel=\"Copy document content to clipboard\"\n                variant=\"secondary\">\n              </goab-icon-button>\n            </goab-tooltip>\n            \n            <goab-tooltip content=\"Print document\">\n              <goab-icon-button \n                icon=\"print\" \n                (onClick)=\"handlePrintClick()\"\n                ariaLabel=\"Print document\"\n                variant=\"secondary\">\n              </goab-icon-button>\n            </goab-tooltip>\n          </goab-button-group>\n          \n          <goab-button-group alignment=\"left\" gap=\"xs\" *ngIf=\"editMode\">\n            <goab-tooltip content=\"Save changes\">\n              <goab-icon-button \n                icon=\"checkmark\" \n                (onClick)=\"handleSaveClick()\"\n                ariaLabel=\"Save document changes\"\n                variant=\"primary\">\n              </goab-icon-button>\n            </goab-tooltip>\n            \n            <goab-tooltip content=\"Cancel editing\">\n              <goab-icon-button \n                icon=\"close\" \n                (onClick)=\"handleCancelClick()\"\n                ariaLabel=\"Cancel editing and discard changes\"\n                variant=\"secondary\">\n              </goab-icon-button>\n            </goab-tooltip>\n          </goab-button-group>\n        </div>\n      </div>\n      \n      <div class=\"document-content\">\n        <goab-form-item label=\"Document Content\" helperText=\"Edit the content below\" *ngIf=\"editMode\">\n          <goab-text-area\n            [(value)]=\"documentContent\"\n            rows=\"6\"\n            placeholder=\"Enter document content...\">\n          </goab-text-area>\n        </goab-form-item>\n        \n        <div class=\"content-display\" *ngIf=\"!editMode\">\n          <h3>Document Preview</h3>\n          <div class=\"content-text\">\n            {{ documentContent || 'No content available' }}\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"system-section\">\n      <div class=\"section-header\">\n        <h2>System Controls</h2>\n        <div class=\"system-toolbar\">\n          <goab-button-group alignment=\"right\" gap=\"xs\">\n            <goab-tooltip [content]=\"getAlertsButtonTooltip()\">\n              <goab-icon-button \n                [icon]=\"getAlertsButtonIcon()\" \n                (onClick)=\"handleAlertsClick()\"\n                [ariaLabel]=\"getAlertsButtonTooltip()\"\n                [variant]=\"getAlertsButtonVariant()\">\n              </goab-icon-button>\n            </goab-tooltip>\n            \n            <goab-tooltip [content]=\"getSettingsButtonTooltip()\">\n              <goab-icon-button \n                icon=\"settings\" \n                (onClick)=\"handleSettingsClick()\"\n                [ariaLabel]=\"getSettingsButtonTooltip()\"\n                [variant]=\"getSettingsButtonVariant()\">\n              </goab-icon-button>\n            </goab-tooltip>\n          </goab-button-group>\n        </div>\n      </div>\n      \n      <div class=\"settings-panel\" *ngIf=\"settingsOpen\">\n        <h3>Settings Panel</h3>\n        <div class=\"settings-content\">\n          <div class=\"setting-item\">\n            <span class=\"setting-label\">Notifications:</span>\n            <span class=\"setting-value\">{{ alertsEnabled ? 'Enabled' : 'Disabled' }}</span>\n          </div>\n          <div class=\"setting-item\">\n            <span class=\"setting-label\">Edit Mode:</span>\n            <span class=\"setting-value\">{{ editMode ? 'Active' : 'Inactive' }}</span>\n          </div>\n          <div class=\"setting-item\">\n            <span class=\"setting-label\">Last Action:</span>\n            <span class=\"setting-value\">{{ lastAction || 'None' }}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <goab-callout type=\"information\" heading=\"Recent Action\" *ngIf=\"lastAction\">\n    <p>{{ lastAction }}</p>\n  </goab-callout>\n\n  <div class=\"action-history\" *ngIf=\"actionHistory.length > 0\">\n    <h3>Action History</h3>\n    <ul class=\"history-list\">\n      <li class=\"history-entry\" *ngFor=\"let entry of actionHistory\">\n        {{ entry }}\n      </li>\n    </ul>\n  </div>\n</div>"
    }
  },
  "tags": [
    "icon-button",
    "tooltip",
    "accessibility",
    "button-group",
    "button-labeling",
    "interaction-pattern",
    "icon-interface",
    "user-guidance",
    "contextual-help",
    "ui-clarity"
  ]
}