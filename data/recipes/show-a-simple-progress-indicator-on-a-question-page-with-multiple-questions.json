{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "show-a-simple-progress-indicator-on-a-question-page-with-multiple-questions",
  "recipeName": "Show a Simple Progress Indicator on a Question Page with Multiple Questions",
  "category": "form-pattern",
  "summary": "Display step-by-step progress information on question pages that contain multiple related questions, helping users understand their position in the overall process",
  "serviceContext": {
    "useCase": "Guide users through multi-step forms by showing their current progress and providing clear context about which step they're completing, especially when each step contains multiple related questions",
    "userType": "citizen",
    "governmentServiceFlows": [
      "When citizens complete applications with multiple sequential steps, each containing several related questions",
      "When forms require users to understand their progress through complex, multi-part processes",
      "When providing clear navigation context helps reduce form abandonment",
      "When users need reassurance about remaining effort required to complete the process"
    ],
    "relatedPatterns": [
      "show-a-simple-progress-indicator-on-a-question-page",
      "show-a-section-title-on-a-question-page",
      "form-stepper-with-controlled-navigation",
      "ask-a-user-one-question-at-a-time"
    ]
  },
  "components": [
    {
      "componentName": "Back Link",
      "role": "Navigation element",
      "purpose": "Allow users to return to previous steps with clear visual indication"
    },
    {
      "componentName": "Progress Text (h3)",
      "role": "Step indicator",
      "purpose": "Show current step number and total steps in simple text format"
    },
    {
      "componentName": "Page Title (h2)",
      "role": "Step content identifier",
      "purpose": "Clearly indicate the topic or theme of the current step's questions"
    },
    {
      "componentName": "GoabFormItem",
      "role": "Question container",
      "purpose": "Present individual questions with proper labeling and form structure"
    },
    {
      "componentName": "GoabInput",
      "role": "Answer input field",
      "purpose": "Collect user responses with appropriate field types and constraints"
    },
    {
      "componentName": "GoabButton",
      "role": "Form progression control",
      "purpose": "Allow users to save their responses and continue to the next step"
    }
  ],
  "codeReference": {
    "exampleFile": "show-a-simple-progress-indicator-on-a-question-page-with-multiple-questions.tsx",
    "linesOfCode": 223,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "medium",
    "keyPatterns": [
      "Simple text-based progress indicator showing step X of Y",
      "Multiple related questions grouped on a single page",
      "Back navigation with consistent styling",
      "Clear page heading indicating question topic",
      "Input fields with appropriate widths and leading content",
      "Progressive form structure with save and continue action"
    ],
    "designPatterns": [
      "Step-based progress indication",
      "Grouped question presentation",
      "Clear information hierarchy",
      "Progressive disclosure",
      "User-centered form design"
    ],
    "accessibility": [
      "Proper heading structure maintains document outline",
      "Progress indicator provides orientation context",
      "Form items properly labeled for screen readers",
      "Input fields have descriptive aria-labels",
      "Navigation links clearly indicate purpose"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabButton, GoabFormItem, GoabInput, GoabTextArea, GoabCallout, GoabRadioGroup, GoabRadioItem } from \"@abgov/react-components\";\nimport { GoabInputOnChangeDetail, GoabRadioGroupOnChangeDetail } from \"@abgov/ui-components-common\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function ShowASimpleProgressIndicatorOnAQuestionPageWithMultipleQuestions() {\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState<number>(1);\n  const [totalSteps] = useState<number>(5);\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [formData, setFormData] = useState<any>({\n    // Step 1: Personal Information\n    name: '',\n    phoneNumber: '',\n    postalCode: '',\n    \n    // Step 2: Employment Details\n    employmentStatus: '',\n    employer: '',\n    jobTitle: '',\n    \n    // Step 3: Family Information\n    maritalStatus: '',\n    dependents: '',\n    householdIncome: '',\n    \n    // Step 4: Additional Details\n    previousApplications: '',\n    additionalInfo: '',\n    \n    // Step 5: Review and Confirmation\n    agreedToTerms: false,\n    contactPreference: ''\n  });\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [stepCompletion, setStepCompletion] = useState<boolean[]>([false, false, false, false, false]);\n\n  const stepConfig = [\n    {\n      stepNumber: 1,\n      title: 'Personal Information',\n      description: 'Basic details about yourself',\n      questions: [\n        { field: 'name', label: 'What is your name?', type: 'text', required: true, width: '50ch' },\n        { field: 'phoneNumber', label: 'What is your phone number?', type: 'tel', required: true, leadingContent: '+1' },\n        { field: 'postalCode', label: 'What is your home postal code?', type: 'text', required: true, width: '14ch' }\n      ]\n    },\n    {\n      stepNumber: 2,\n      title: 'Employment Details',\n      description: 'Information about your work situation',\n      questions: [\n        { field: 'employmentStatus', label: 'What is your employment status?', type: 'radio', required: true, options: ['Employed', 'Unemployed', 'Self-employed', 'Student', 'Retired'] },\n        { field: 'employer', label: 'Who is your current employer?', type: 'text', required: false, width: '50ch' },\n        { field: 'jobTitle', label: 'What is your job title?', type: 'text', required: false, width: '40ch' }\n      ]\n    },\n    {\n      stepNumber: 3,\n      title: 'Family Information',\n      description: 'Details about your family situation',\n      questions: [\n        { field: 'maritalStatus', label: 'What is your marital status?', type: 'radio', required: true, options: ['Single', 'Married', 'Common-law', 'Divorced', 'Widowed'] },\n        { field: 'dependents', label: 'How many dependents do you have?', type: 'number', required: true, width: '10ch' },\n        { field: 'householdIncome', label: 'What is your annual household income?', type: 'text', required: true, width: '20ch', leadingContent: '$' }\n      ]\n    },\n    {\n      stepNumber: 4,\n      title: 'Additional Details',\n      description: 'Any other relevant information',\n      questions: [\n        { field: 'previousApplications', label: 'Have you applied for this program before?', type: 'radio', required: true, options: ['Yes', 'No'] },\n        { field: 'additionalInfo', label: 'Is there anything else you\\'d like us to know?', type: 'textarea', required: false }\n      ]\n    },\n    {\n      stepNumber: 5,\n      title: 'Review and Confirmation',\n      description: 'Review your information and confirm submission',\n      questions: [\n        { field: 'contactPreference', label: 'How would you prefer to be contacted?', type: 'radio', required: true, options: ['Email', 'Phone', 'Mail'] },\n        { field: 'agreedToTerms', label: 'I agree to the terms and conditions', type: 'checkbox', required: true }\n      ]\n    }\n  ];\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    \n    // Clear validation errors for this field\n    if (validationErrors[field]) {\n      setValidationErrors(prev => {\n        const updated = { ...prev };\n        delete updated[field];\n        return updated;\n      });\n    }\n    \n    console.log(`Field ${field} updated:`, value);\n  };\n\n  const handleRadioChange = (field: string) => (event: GoabRadioGroupOnChangeDetail) => {\n    handleInputChange(field, event.value);\n  };\n\n  const validateCurrentStep = (): boolean => {\n    const currentStepConfig = stepConfig[currentStep - 1];\n    const errors: any = {};\n    let isValid = true;\n\n    currentStepConfig.questions.forEach(question => {\n      if (question.required) {\n        const value = formData[question.field];\n        \n        if (question.type === 'checkbox') {\n          if (!value) {\n            errors[question.field] = 'This field is required';\n            isValid = false;\n          }\n        } else if (!value || (typeof value === 'string' && !value.trim())) {\n          errors[question.field] = 'This field is required';\n          isValid = false;\n        }\n      }\n      \n      // Additional validations\n      if (question.field === 'postalCode' && formData[question.field]) {\n        const postalCodeRegex = /^[A-Za-z]\\d[A-Za-z] \\d[A-Za-z]\\d$/;\n        if (!postalCodeRegex.test(formData[question.field])) {\n          errors[question.field] = 'Please enter a valid postal code (e.g., A1A 1A1)';\n          isValid = false;\n        }\n      }\n      \n      if (question.field === 'phoneNumber' && formData[question.field]) {\n        const phoneRegex = /^\\d{10}$/;\n        if (!phoneRegex.test(formData[question.field].replace(/\\D/g, ''))) {\n          errors[question.field] = 'Please enter a valid 10-digit phone number';\n          isValid = false;\n        }\n      }\n    });\n\n    setValidationErrors(errors);\n    return isValid;\n  };\n\n  const handleSaveAndContinue = () => {\n    if (!validateCurrentStep()) {\n      console.log('Validation failed for step:', currentStep);\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    // Simulate save operation\n    setTimeout(() => {\n      // Mark current step as completed\n      const updatedCompletion = [...stepCompletion];\n      updatedCompletion[currentStep - 1] = true;\n      setStepCompletion(updatedCompletion);\n      \n      // Track step completion\n      trackStepCompletion(currentStep);\n      \n      if (currentStep < totalSteps) {\n        setCurrentStep(currentStep + 1);\n      } else {\n        // Final submission\n        handleFinalSubmission();\n      }\n      \n      setIsSubmitting(false);\n      console.log('Step saved:', currentStep, formData);\n    }, 1000);\n  };\n\n  const handleBackNavigation = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n    \n    // Track navigation analytics\n    trackNavigationAction('back', currentStep);\n    \n    console.log('Navigating back from step:', currentStep);\n  };\n\n  const handleFinalSubmission = () => {\n    console.log('Final application submission:', {\n      formData,\n      completionTime: new Date().toISOString(),\n      stepsCompleted: stepCompletion.filter(Boolean).length\n    });\n    \n    // Navigate to confirmation page\n    // navigate('/application/confirmation');\n  };\n\n  const trackStepCompletion = (step: number) => {\n    console.log('Step completion analytics:', {\n      step,\n      stepTitle: stepConfig[step - 1].title,\n      timestamp: new Date().toISOString(),\n      formData: formData,\n      validationErrors: Object.keys(validationErrors).length\n    });\n  };\n\n  const trackNavigationAction = (action: string, fromStep: number) => {\n    console.log('Navigation analytics:', {\n      action,\n      fromStep,\n      timestamp: new Date().toISOString(),\n      stepCompletion\n    });\n  };\n\n  const getCurrentStepConfig = () => {\n    return stepConfig[currentStep - 1];\n  };\n\n  const getCompletionPercentage = (): number => {\n    return Math.round((stepCompletion.filter(Boolean).length / totalSteps) * 100);\n  };\n\n  const renderQuestion = (question: any) => {\n    const commonProps = {\n      name: question.field,\n      'aria-label': question.label,\n      error: !!validationErrors[question.field]\n    };\n\n    switch (question.type) {\n      case 'radio':\n        return (\n          <GoabRadioGroup\n            {...commonProps}\n            value={formData[question.field] || ''}\n            onChange={handleRadioChange(question.field)}\n            error={!!validationErrors[question.field]}>\n            {question.options.map((option: string) => (\n              <GoabRadioItem\n                key={option}\n                value={option.toLowerCase().replace(' ', '-')}\n                label={option}\n              />\n            ))}\n          </GoabRadioGroup>\n        );\n        \n      case 'textarea':\n        return (\n          <GoabTextArea\n            {...commonProps}\n            value={formData[question.field] || ''}\n            onChange={(e: GoabInputOnChangeDetail) => handleInputChange(question.field, e.value)}\n            rows={4}\n            placeholder={`Enter ${question.label.toLowerCase()}...`}\n          />\n        );\n        \n      case 'checkbox':\n        return (\n          <div className=\"checkbox-container\">\n            <input\n              type=\"checkbox\"\n              id={question.field}\n              checked={formData[question.field] || false}\n              onChange={(e) => handleInputChange(question.field, e.target.checked)}\n              aria-describedby={validationErrors[question.field] ? `${question.field}-error` : undefined}\n            />\n            <label htmlFor={question.field}>{question.label}</label>\n          </div>\n        );\n        \n      default:\n        return (\n          <GoabInput\n            {...commonProps}\n            type={question.type || 'text'}\n            value={formData[question.field] || ''}\n            onChange={(e: GoabInputOnChangeDetail) => handleInputChange(question.field, e.value)}\n            width={question.width || undefined}\n            leadingContent={question.leadingContent || undefined}\n            placeholder={question.placeholder || undefined}\n          />\n        );\n    }\n  };\n\n  const currentStepConfig = getCurrentStepConfig();\n\n  return (\n    <div className=\"question-page-example\">\n      <div className=\"page-header\">\n        <div className=\"progress-summary\">\n          <span className=\"completion-percentage\">{getCompletionPercentage()}% complete</span>\n          <span className=\"steps-completed\">\n            {stepCompletion.filter(Boolean).length} of {totalSteps} steps completed\n          </span>\n        </div>\n      </div>\n\n      <div className=\"question-page-content\">\n        {currentStep > 1 && (\n          <button \n            type=\"button\"\n            className=\"back-link\" \n            onClick={handleBackNavigation}\n            aria-label=\"Go back to previous step\">\n            Back\n          </button>\n        )}\n        \n        <h3 className=\"section-title text-secondary\">\n          Step {currentStep} of {totalSteps}\n        </h3>\n        \n        <h2>{currentStepConfig.title}</h2>\n        \n        {currentStepConfig.description && (\n          <p className=\"step-description\">{currentStepConfig.description}</p>\n        )}\n        \n        <form className=\"step-form\">\n          {currentStepConfig.questions.map((question, index) => (\n            <GoabFormItem \n              key={question.field}\n              label={question.label}\n              mt={index === 0 ? \"xl\" : \"l\"}\n              error={validationErrors[question.field]}\n              required={question.required}>\n              {renderQuestion(question)}\n            </GoabFormItem>\n          ))}\n          \n          <GoabButton \n            type=\"primary\" \n            mt=\"2xl\"\n            onClick={handleSaveAndContinue}\n            disabled={isSubmitting}>\n            {isSubmitting \n              ? 'Saving...' \n              : currentStep === totalSteps \n                ? 'Submit Application' \n                : 'Save and continue'\n            }\n          </GoabButton>\n        </form>\n        \n        {Object.keys(validationErrors).length > 0 && (\n          <GoabCallout type=\"emergency\" heading=\"Please fix the following errors:\">\n            <ul className=\"error-list\">\n              {Object.entries(validationErrors).map(([field, error]) => (\n                <li key={field}>{error as string}</li>\n              ))}\n            </ul>\n          </GoabCallout>\n        )}\n      </div>\n\n      <div className=\"progress-guide\">\n        <h2>Multi-Question Progress Best Practices</h2>\n        <ul className=\"guide-list\">\n          <li>\n            <strong>Simple step indicator:</strong> Use \"Step X of Y\" format for clear progress understanding\n          </li>\n          <li>\n            <strong>Group related questions:</strong> Combine logically related questions on the same step\n          </li>\n          <li>\n            <strong>Clear step titles:</strong> Use descriptive titles that explain the question theme\n          </li>\n          <li>\n            <strong>Consistent navigation:</strong> Provide back navigation and clear forward progression\n          </li>\n          <li>\n            <strong>Progress feedback:</strong> Show completion percentage and steps completed\n          </li>\n          <li>\n            <strong>Appropriate field sizes:</strong> Use field widths that match expected content length\n          </li>\n        </ul>\n      </div>\n\n      {/* CSS included inline for demo purposes */}\n      <style jsx>{`\n        .question-page-example {\n          max-width: 800px;\n          margin: 0 auto;\n          padding: var(--goa-space-l);\n        }\n        \n        .page-header {\n          margin-bottom: var(--goa-space-xl);\n          padding-bottom: var(--goa-space-m);\n          border-bottom: 1px solid var(--goa-color-border);\n        }\n        \n        .progress-summary {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          color: var(--goa-color-text-secondary);\n          font-size: var(--goa-font-size-s);\n        }\n        \n        .completion-percentage {\n          font-weight: 600;\n          color: var(--goa-color-interactive);\n        }\n        \n        .question-page-content {\n          margin-bottom: var(--goa-space-2xl);\n        }\n        \n        .back-link {\n          display: inline-flex;\n          align-items: center;\n          background: none;\n          border: none;\n          color: var(--goa-color-interactive);\n          text-decoration: underline;\n          cursor: pointer;\n          font-size: var(--goa-font-size-m);\n          margin-top: var(--goa-space-m);\n          padding: 0;\n        }\n        \n        .back-link::before {\n          content: \"\";\n          display: inline-block;\n          width: 20px;\n          height: 20px;\n          margin-right: var(--goa-space-xs);\n          background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 2 22 22\" fill=\"none\" stroke=\"%230070C4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>') center center no-repeat;\n        }\n        \n        .back-link:hover,\n        .back-link:focus {\n          color: var(--goa-color-interactive-hover);\n        }\n        \n        .back-link:hover::before,\n        .back-link:focus::before {\n          background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 2 22 22\" fill=\"none\" stroke=\"%23004f84\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>') center center no-repeat;\n        }\n        \n        .section-title {\n          margin: var(--goa-space-2xl) 0 0 0;\n          color: var(--goa-color-text-secondary);\n          font-size: var(--goa-font-size-l);\n          font-weight: 600;\n        }\n        \n        .section-title + h2 {\n          margin-top: var(--goa-space-xs);\n          margin-bottom: var(--goa-space-s);\n          color: var(--goa-color-text);\n        }\n        \n        .step-description {\n          margin: 0 0 var(--goa-space-l) 0;\n          color: var(--goa-color-text-secondary);\n          font-size: var(--goa-font-size-l);\n        }\n        \n        .step-form {\n          margin-top: var(--goa-space-l);\n        }\n        \n        .checkbox-container {\n          display: flex;\n          align-items: center;\n          gap: var(--goa-space-s);\n        }\n        \n        .checkbox-container input[type=\"checkbox\"] {\n          width: 18px;\n          height: 18px;\n        }\n        \n        .checkbox-container label {\n          color: var(--goa-color-text);\n          font-size: var(--goa-font-size-m);\n          cursor: pointer;\n        }\n        \n        .error-list {\n          margin: 0;\n          padding-left: var(--goa-space-l);\n        }\n        \n        .error-list li {\n          margin-bottom: var(--goa-space-xs);\n        }\n        \n        .progress-guide {\n          margin-top: var(--goa-space-2xl);\n          padding: var(--goa-space-l);\n          background-color: var(--goa-color-background-light);\n          border-radius: var(--goa-border-radius-s);\n          border-left: 4px solid var(--goa-color-interactive);\n        }\n        \n        .progress-guide h2 {\n          margin: 0 0 var(--goa-space-m) 0;\n          color: var(--goa-color-text);\n        }\n        \n        .guide-list {\n          margin: 0;\n          padding-left: var(--goa-space-l);\n        }\n        \n        .guide-list li {\n          margin-bottom: var(--goa-space-s);\n          line-height: 1.5;\n        }\n        \n        .guide-list strong {\n          color: var(--goa-color-text);\n        }\n      `}</style>\n    </div>\n  );\n}",
      "key": "const [currentStep, setCurrentStep] = useState<number>(1);\nconst [totalSteps] = useState<number>(5);\nconst [isSubmitting, setIsSubmitting] = useState<boolean>(false);\nconst [formData, setFormData] = useState<any>({\n  name: '',\n  phoneNumber: '',\n  postalCode: '',\n  employmentStatus: '',\n  employer: '',\n  jobTitle: ''\n});\nconst [validationErrors, setValidationErrors] = useState<any>({});\nconst [stepCompletion, setStepCompletion] = useState<boolean[]>([false, false, false, false, false]);\n\nconst stepConfig = [\n  {\n    stepNumber: 1,\n    title: 'Personal Information',\n    description: 'Basic details about yourself',\n    questions: [\n      { field: 'name', label: 'What is your name?', type: 'text', required: true, width: '50ch' },\n      { field: 'phoneNumber', label: 'What is your phone number?', type: 'tel', required: true, leadingContent: '+1' },\n      { field: 'postalCode', label: 'What is your home postal code?', type: 'text', required: true, width: '14ch' }\n    ]\n  },\n  {\n    stepNumber: 2,\n    title: 'Employment Details',\n    description: 'Information about your work situation',\n    questions: [\n      { field: 'employmentStatus', label: 'What is your employment status?', type: 'radio', required: true, options: ['Employed', 'Unemployed', 'Self-employed'] },\n      { field: 'employer', label: 'Who is your current employer?', type: 'text', required: false, width: '50ch' },\n      { field: 'jobTitle', label: 'What is your job title?', type: 'text', required: false, width: '40ch' }\n    ]\n  }\n];\n\nconst handleInputChange = (field: string, value: string | boolean) => {\n  setFormData(prev => ({\n    ...prev,\n    [field]: value\n  }));\n  \n  if (validationErrors[field]) {\n    setValidationErrors(prev => {\n      const updated = { ...prev };\n      delete updated[field];\n      return updated;\n    });\n  }\n};\n\nconst handleRadioChange = (field: string) => (event: GoabRadioGroupOnChangeDetail) => {\n  handleInputChange(field, event.value);\n};\n\nconst validateCurrentStep = (): boolean => {\n  const currentStepConfig = stepConfig[currentStep - 1];\n  const errors: any = {};\n  let isValid = true;\n\n  currentStepConfig.questions.forEach(question => {\n    if (question.required) {\n      const value = formData[question.field];\n      \n      if (!value || (typeof value === 'string' && !value.trim())) {\n        errors[question.field] = 'This field is required';\n        isValid = false;\n      }\n    }\n  });\n\n  setValidationErrors(errors);\n  return isValid;\n};\n\nconst handleSaveAndContinue = () => {\n  if (!validateCurrentStep()) {\n    return;\n  }\n\n  setIsSubmitting(true);\n  \n  setTimeout(() => {\n    const updatedCompletion = [...stepCompletion];\n    updatedCompletion[currentStep - 1] = true;\n    setStepCompletion(updatedCompletion);\n    \n    if (currentStep < totalSteps) {\n      setCurrentStep(currentStep + 1);\n    }\n    \n    setIsSubmitting(false);\n  }, 1000);\n};\n\nconst handleBackNavigation = () => {\n  if (currentStep > 1) {\n    setCurrentStep(currentStep - 1);\n  }\n};\n\nconst getCurrentStepConfig = () => {\n  return stepConfig[currentStep - 1];\n};\n\nconst getCompletionPercentage = (): number => {\n  return Math.round((stepCompletion.filter(Boolean).length / totalSteps) * 100);\n};\n\nconst renderQuestion = (question: any) => {\n  switch (question.type) {\n    case 'radio':\n      return (\n        <GoabRadioGroup\n          name={question.field}\n          value={formData[question.field] || ''}\n          onChange={handleRadioChange(question.field)}\n          error={!!validationErrors[question.field]}>\n          {question.options.map((option: string) => (\n            <GoabRadioItem\n              key={option}\n              value={option.toLowerCase().replace(' ', '-')}\n              label={option}\n            />\n          ))}\n        </GoabRadioGroup>\n      );\n        \n    default:\n      return (\n        <GoabInput\n          name={question.field}\n          type={question.type || 'text'}\n          value={formData[question.field] || ''}\n          onChange={(e: GoabInputOnChangeDetail) => handleInputChange(question.field, e.value)}\n          width={question.width || undefined}\n          leadingContent={question.leadingContent || undefined}\n          ariaLabel={question.label}\n          error={!!validationErrors[question.field]}\n        />\n      );\n  }\n};\n\nconst currentStepConfig = getCurrentStepConfig();\n\n<div className=\"question-page-example\">\n  <div className=\"page-header\">\n    <div className=\"progress-summary\">\n      <span className=\"completion-percentage\">{getCompletionPercentage()}% complete</span>\n      <span className=\"steps-completed\">\n        {stepCompletion.filter(Boolean).length} of {totalSteps} steps completed\n      </span>\n    </div>\n  </div>\n\n  <div className=\"question-page-content\">\n    {currentStep > 1 && (\n      <button \n        type=\"button\"\n        className=\"back-link\" \n        onClick={handleBackNavigation}>\n        Back\n      </button>\n    )}\n    \n    <h3 className=\"section-title text-secondary\">\n      Step {currentStep} of {totalSteps}\n    </h3>\n    \n    <h2>{currentStepConfig.title}</h2>\n    \n    <form className=\"step-form\">\n      {currentStepConfig.questions.map((question, index) => (\n        <GoabFormItem \n          key={question.field}\n          label={question.label}\n          mt={index === 0 ? \"xl\" : \"l\"}\n          error={validationErrors[question.field]}\n          required={question.required}>\n          {renderQuestion(question)}\n        </GoabFormItem>\n      ))}\n      \n      <GoabButton \n        type=\"primary\" \n        mt=\"2xl\"\n        onClick={handleSaveAndContinue}\n        disabled={isSubmitting}>\n        {isSubmitting \n          ? 'Saving...' \n          : currentStep === totalSteps \n            ? 'Submit Application' \n            : 'Save and continue'\n        }\n      </GoabButton>\n    </form>\n  </div>\n</div>\n\n/* CSS */\n.question-page-example {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.page-header {\n  margin-bottom: var(--goa-space-xl);\n  padding-bottom: var(--goa-space-m);\n  border-bottom: 1px solid var(--goa-color-border);\n}\n\n.progress-summary {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-s);\n}\n\n.completion-percentage {\n  font-weight: 600;\n  color: var(--goa-color-interactive);\n}\n\n.back-link {\n  display: inline-flex;\n  align-items: center;\n  background: none;\n  border: none;\n  color: var(--goa-color-interactive);\n  text-decoration: underline;\n  cursor: pointer;\n  font-size: var(--goa-font-size-m);\n  margin-top: var(--goa-space-m);\n  padding: 0;\n}\n\n.back-link::before {\n  content: \"\";\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  margin-right: var(--goa-space-xs);\n  background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 2 22 22\" fill=\"none\" stroke=\"%230070C4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><polyline points=\"15 18 9 12 15 6\"></polyline></svg>') center center no-repeat;\n}\n\n.section-title {\n  margin: var(--goa-space-2xl) 0 0 0;\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-l);\n  font-weight: 600;\n}\n\n.section-title + h2 {\n  margin-top: var(--goa-space-xs);\n  margin-bottom: var(--goa-space-s);\n  color: var(--goa-color-text);\n}\n\n.step-form {\n  margin-top: var(--goa-space-l);\n}"
    },
    "angular": {
      "complete": "export class ShowASimpleProgressIndicatorOnAQuestionPageWithMultipleQuestionsComponent {\n  currentStep: number = 1;\n  totalSteps: number = 5;\n  isSubmitting: boolean = false;\n  validationErrors: any = {};\n  stepCompletion: boolean[] = [false, false, false, false, false];\n  \n  formData = {\n    name: '',\n    phoneNumber: '',\n    postalCode: '',\n    employmentStatus: '',\n    employer: '',\n    jobTitle: '',\n    maritalStatus: '',\n    dependents: '',\n    householdIncome: '',\n    previousApplications: '',\n    additionalInfo: '',\n    agreedToTerms: false,\n    contactPreference: ''\n  };\n\n  stepConfig = [\n    {\n      stepNumber: 1,\n      title: 'Personal Information',\n      description: 'Basic details about yourself',\n      questions: [\n        { field: 'name', label: 'What is your name?', type: 'text', required: true, width: '50ch' },\n        { field: 'phoneNumber', label: 'What is your phone number?', type: 'tel', required: true, leadingContent: '+1' },\n        { field: 'postalCode', label: 'What is your home postal code?', type: 'text', required: true, width: '14ch' }\n      ]\n    },\n    {\n      stepNumber: 2,\n      title: 'Employment Details',\n      description: 'Information about your work situation',\n      questions: [\n        { field: 'employmentStatus', label: 'What is your employment status?', type: 'radio', required: true, options: ['Employed', 'Unemployed', 'Self-employed'] },\n        { field: 'employer', label: 'Who is your current employer?', type: 'text', required: false, width: '50ch' },\n        { field: 'jobTitle', label: 'What is your job title?', type: 'text', required: false, width: '40ch' }\n      ]\n    }\n  ];\n\n  handleInputChange(field: string, value: string | boolean) {\n    this.formData = {\n      ...this.formData,\n      [field]: value\n    };\n    \n    if (this.validationErrors[field]) {\n      delete this.validationErrors[field];\n    }\n    \n    console.log(`Field ${field} updated:`, value);\n  }\n\n  handleRadioChange(field: string, event: any) {\n    this.handleInputChange(field, event.value);\n  }\n\n  validateCurrentStep(): boolean {\n    const currentStepConfig = this.stepConfig[this.currentStep - 1];\n    const errors: any = {};\n    let isValid = true;\n\n    currentStepConfig.questions.forEach(question => {\n      if (question.required) {\n        const value = this.formData[question.field as keyof typeof this.formData];\n        \n        if (!value || (typeof value === 'string' && !value.trim())) {\n          errors[question.field] = 'This field is required';\n          isValid = false;\n        }\n      }\n    });\n\n    this.validationErrors = errors;\n    return isValid;\n  }\n\n  handleSaveAndContinue() {\n    if (!this.validateCurrentStep()) {\n      console.log('Validation failed for step:', this.currentStep);\n      return;\n    }\n\n    this.isSubmitting = true;\n    \n    setTimeout(() => {\n      const updatedCompletion = [...this.stepCompletion];\n      updatedCompletion[this.currentStep - 1] = true;\n      this.stepCompletion = updatedCompletion;\n      \n      if (this.currentStep < this.totalSteps) {\n        this.currentStep = this.currentStep + 1;\n      }\n      \n      this.isSubmitting = false;\n      console.log('Step saved:', this.currentStep, this.formData);\n    }, 1000);\n  }\n\n  handleBackNavigation() {\n    if (this.currentStep > 1) {\n      this.currentStep = this.currentStep - 1;\n    }\n    \n    console.log('Navigating back from step:', this.currentStep);\n  }\n\n  getCurrentStepConfig() {\n    return this.stepConfig[this.currentStep - 1];\n  }\n\n  getCompletionPercentage(): number {\n    return Math.round((this.stepCompletion.filter(Boolean).length / this.totalSteps) * 100);\n  }\n\n  getCompletedStepsCount(): number {\n    return this.stepCompletion.filter(Boolean).length;\n  }\n\n  getSubmitButtonText(): string {\n    if (this.isSubmitting) return 'Saving...';\n    if (this.currentStep === this.totalSteps) return 'Submit Application';\n    return 'Save and continue';\n  }\n\n  getValidationErrorCount(): number {\n    return Object.keys(this.validationErrors).length;\n  }\n\n  getValidationErrorList(): string[] {\n    return Object.values(this.validationErrors);\n  }\n\n  shouldShowBackButton(): boolean {\n    return this.currentStep > 1;\n  }\n}",
      "key": "currentStep: number = 1;\ntotalSteps: number = 5;\nisSubmitting: boolean = false;\nvalidationErrors: any = {};\nstepCompletion: boolean[] = [false, false, false, false, false];\n\nformData = {\n  name: '',\n  phoneNumber: '',\n  postalCode: '',\n  employmentStatus: '',\n  employer: '',\n  jobTitle: ''\n};\n\nstepConfig = [\n  {\n    stepNumber: 1,\n    title: 'Personal Information',\n    description: 'Basic details about yourself',\n    questions: [\n      { field: 'name', label: 'What is your name?', type: 'text', required: true, width: '50ch' },\n      { field: 'phoneNumber', label: 'What is your phone number?', type: 'tel', required: true, leadingContent: '+1' },\n      { field: 'postalCode', label: 'What is your home postal code?', type: 'text', required: true, width: '14ch' }\n    ]\n  }\n];\n\nhandleInputChange(field: string, value: string | boolean) {\n  this.formData = {\n    ...this.formData,\n    [field]: value\n  };\n  \n  if (this.validationErrors[field]) {\n    delete this.validationErrors[field];\n  }\n}\n\nhandleRadioChange(field: string, event: any) {\n  this.handleInputChange(field, event.value);\n}\n\nvalidateCurrentStep(): boolean {\n  const currentStepConfig = this.stepConfig[this.currentStep - 1];\n  const errors: any = {};\n  let isValid = true;\n\n  currentStepConfig.questions.forEach(question => {\n    if (question.required) {\n      const value = this.formData[question.field];\n      \n      if (!value || (typeof value === 'string' && !value.trim())) {\n        errors[question.field] = 'This field is required';\n        isValid = false;\n      }\n    }\n  });\n\n  this.validationErrors = errors;\n  return isValid;\n}\n\nhandleSaveAndContinue() {\n  if (!this.validateCurrentStep()) {\n    return;\n  }\n\n  this.isSubmitting = true;\n  \n  setTimeout(() => {\n    const updatedCompletion = [...this.stepCompletion];\n    updatedCompletion[this.currentStep - 1] = true;\n    this.stepCompletion = updatedCompletion;\n    \n    if (this.currentStep < this.totalSteps) {\n      this.currentStep = this.currentStep + 1;\n    }\n    \n    this.isSubmitting = false;\n  }, 1000);\n}\n\nhandleBackNavigation() {\n  if (this.currentStep > 1) {\n    this.currentStep = this.currentStep - 1;\n  }\n}\n\ngetCurrentStepConfig() {\n  return this.stepConfig[this.currentStep - 1];\n}\n\ngetCompletionPercentage(): number {\n  return Math.round((this.stepCompletion.filter(Boolean).length / this.totalSteps) * 100);\n}\n\n<!-- Template -->\n<div class=\"question-page-example\">\n  <div class=\"page-header\">\n    <div class=\"progress-summary\">\n      <span class=\"completion-percentage\">{{ getCompletionPercentage() }}% complete</span>\n      <span class=\"steps-completed\">\n        {{ getCompletedStepsCount() }} of {{ totalSteps }} steps completed\n      </span>\n    </div>\n  </div>\n\n  <div class=\"question-page-content\">\n    <button \n      type=\"button\"\n      class=\"back-link\" \n      (click)=\"handleBackNavigation()\"\n      *ngIf=\"shouldShowBackButton()\">\n      Back\n    </button>\n    \n    <h3 class=\"section-title text-secondary\">\n      Step {{ currentStep }} of {{ totalSteps }}\n    </h3>\n    \n    <h2>{{ getCurrentStepConfig().title }}</h2>\n    \n    <p class=\"step-description\" *ngIf=\"getCurrentStepConfig().description\">\n      {{ getCurrentStepConfig().description }}\n    </p>\n    \n    <form class=\"step-form\">\n      <goab-form-item \n        *ngFor=\"let question of getCurrentStepConfig().questions; let i = index\"\n        [label]=\"question.label\"\n        [mt]=\"i === 0 ? 'xl' : 'l'\"\n        [error]=\"validationErrors[question.field]\"\n        [required]=\"question.required\">\n        \n        <goab-input\n          *ngIf=\"question.type !== 'radio'\"\n          [name]=\"question.field\"\n          [type]=\"question.type || 'text'\"\n          [value]=\"formData[question.field] || ''\"\n          (onChange)=\"handleInputChange(question.field, $event.value)\"\n          [width]=\"question.width || undefined\"\n          [leadingContent]=\"question.leadingContent || undefined\"\n          [ariaLabel]=\"question.label\"\n          [error]=\"!!validationErrors[question.field]\">\n        </goab-input>\n        \n        <goab-radio-group\n          *ngIf=\"question.type === 'radio'\"\n          [name]=\"question.field\"\n          [value]=\"formData[question.field] || ''\"\n          (onChange)=\"handleRadioChange(question.field, $event)\"\n          [error]=\"!!validationErrors[question.field]\">\n          <goab-radio-item\n            *ngFor=\"let option of question.options\"\n            [value]=\"option.toLowerCase().replace(' ', '-')\"\n            [label]=\"option\">\n          </goab-radio-item>\n        </goab-radio-group>\n      </goab-form-item>\n      \n      <goab-button \n        type=\"primary\" \n        mt=\"2xl\"\n        (onClick)=\"handleSaveAndContinue()\"\n        [disabled]=\"isSubmitting\">\n        {{ getSubmitButtonText() }}\n      </goab-button>\n    </form>\n    \n    <goab-callout \n      type=\"emergency\" \n      heading=\"Please fix the following errors:\"\n      *ngIf=\"getValidationErrorCount() > 0\">\n      <ul class=\"error-list\">\n        <li *ngFor=\"let error of getValidationErrorList()\">{{ error }}</li>\n      </ul>\n    </goab-callout>\n  </div>\n</div>"
    }
  },
  "tags": [
    "progress-indicator",
    "multi-question-page",
    "step-progress",
    "form-pattern",
    "question-grouping",
    "step-navigation",
    "form-progression",
    "user-guidance",
    "progress-tracking",
    "multi-step-form"
  ]
}