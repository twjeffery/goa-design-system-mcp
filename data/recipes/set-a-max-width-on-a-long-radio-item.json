{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "set-a-max-width-on-a-long-radio-item",
  "recipeName": "Set a Max Width on a Long Radio Item",
  "category": "form-control",
  "summary": "Control the display width of radio button labels to ensure consistent layout and readability when option text varies significantly in length",
  "serviceContext": {
    "useCase": "Maintain consistent form layout and improve readability when radio button options have varying text lengths, ensuring proper alignment and visual hierarchy",
    "userType": "both",
    "governmentServiceFlows": [
      "When citizens select from options with varying description lengths in applications",
      "When workers choose from administrative options where some require detailed explanations",
      "When form layouts need consistent spacing despite different option text lengths",
      "When ensuring mobile-friendly radio button groups with long descriptive text"
    ],
    "relatedPatterns": [
      "select-one-or-more-from-a-list-of-options",
      "include-descriptions-for-items-in-a-checkbox-list",
      "ask-a-user-one-question-at-a-time",
      "group-related-questions-together-on-a-question-page"
    ]
  },
  "components": [
    {
      "componentName": "GoabRadioItem",
      "role": "Individual option control",
      "purpose": "Display radio option with controlled maximum width for consistent layout"
    },
    {
      "componentName": "GoabRadioGroup",
      "role": "Option group container",
      "purpose": "Group related radio options with shared selection behavior"
    },
    {
      "componentName": "GoabFormItem",
      "role": "Form field container",
      "purpose": "Wrap radio group with proper labeling and form structure"
    }
  ],
  "codeReference": {
    "exampleFile": "set-a-max-width-on-a-long-radio-item.tsx",
    "linesOfCode": 66,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "low",
    "keyPatterns": [
      "MaxWidth property on individual radio items for layout control",
      "Mixed radio items with and without width constraints",
      "Consistent radio group state management",
      "Responsive design considerations for long text labels",
      "Visual alignment of radio options with varying text lengths"
    ],
    "designPatterns": [
      "Constrained text display",
      "Consistent form layout",
      "Responsive radio controls",
      "Text wrapping management",
      "Visual hierarchy maintenance"
    ],
    "accessibility": [
      "Radio items remain fully accessible with width constraints",
      "Text wrapping preserves readability for screen readers",
      "Proper radio group behavior maintained regardless of width settings",
      "Clear visual association between radio buttons and labels",
      "Consistent tab order through radio options"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabFormItem, GoabRadioGroup, GoabRadioItem, GoabButton } from \"@abgov/react-components\";\nimport { GoabRadioGroupOnChangeDetail } from \"@abgov/ui-components-common\";\nimport { useState } from \"react\";\n\nexport default function SetAMaxWidthOnALongRadioItem() {\n  const [selectedOption, setSelectedOption] = useState<string>('');\n  const [formSubmitted, setFormSubmitted] = useState<boolean>(false);\n  const [validationError, setValidationError] = useState<string>('');\n\n  const optionsList = [\n    {\n      value: '1',\n      label: 'Option one which has a very long label with lots of text that would normally extend across the entire width of the container',\n      maxWidth: '300px',\n      description: 'This option demonstrates how to control text wrapping for long labels'\n    },\n    {\n      value: '2',\n      label: 'Option two',\n      description: 'A standard length option for comparison'\n    },\n    {\n      value: '3',\n      label: 'Option three with moderate length text',\n      description: 'This option has medium-length text'\n    },\n    {\n      value: '4',\n      label: 'Another extremely long option that demonstrates the importance of width control in maintaining consistent form layouts and ensuring good user experience across different devices and screen sizes',\n      maxWidth: '400px',\n      description: 'This option shows a different max width setting'\n    },\n    {\n      value: '5',\n      label: 'Short option',\n      description: 'Minimal text option'\n    }\n  ];\n\n  const handleRadioChange = (event: GoabRadioGroupOnChangeDetail) => {\n    setSelectedOption(event.value);\n    \n    // Clear validation error when user makes selection\n    if (validationError) {\n      setValidationError('');\n    }\n    \n    console.log('Radio option selected:', event.value);\n  };\n\n  const validateSelection = (): boolean => {\n    if (!selectedOption) {\n      setValidationError('Please select an option to continue');\n      return false;\n    }\n    \n    setValidationError('');\n    return true;\n  };\n\n  const handleSubmit = () => {\n    if (!validateSelection()) {\n      return;\n    }\n    \n    setFormSubmitted(true);\n    \n    const selectedOptionData = optionsList.find(opt => opt.value === selectedOption);\n    \n    console.log('Form submitted with selection:', {\n      value: selectedOption,\n      label: selectedOptionData?.label,\n      timestamp: new Date().toISOString()\n    });\n  };\n\n  const handleReset = () => {\n    setSelectedOption('');\n    setFormSubmitted(false);\n    setValidationError('');\n  };\n\n  const getSelectedOptionLabel = (): string => {\n    const option = optionsList.find(opt => opt.value === selectedOption);\n    return option ? option.label : 'No option selected';\n  };\n\n  const getLayoutDemoOptions = () => {\n    return [\n      {\n        value: 'demo1',\n        label: 'Unrestricted width option that can extend to the full container width',\n        description: 'No maxWidth property set'\n      },\n      {\n        value: 'demo2',\n        label: 'Width restricted to 250px for this particular option with very long text',\n        maxWidth: '250px',\n        description: 'maxWidth set to 250px'\n      },\n      {\n        value: 'demo3',\n        label: 'Another very long option demonstrating different width constraint behavior',\n        maxWidth: '350px',\n        description: 'maxWidth set to 350px'\n      }\n    ];\n  };\n\n  const renderRadioWithDescription = (option: any) => {\n    return (\n      <div key={option.value} className=\"radio-item-container\">\n        <GoabRadioItem\n          value={option.value}\n          label={option.label}\n          maxWidth={option.maxWidth}\n        />\n        <p className=\"option-description\">\n          {option.description}\n          {option.maxWidth && ` (maxWidth: ${option.maxWidth})`}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-width-radio-container\">\n      <div className=\"main-example\">\n        <GoabFormItem \n          label=\"Select one option\" \n          error={validationError}\n          helperText=\"Notice how the long options wrap at different widths for better layout control\"\n          required>\n          <GoabRadioGroup \n            name=\"selectOne\" \n            value={selectedOption} \n            onChange={handleRadioChange}\n            error={!!validationError}>\n            {optionsList.map(option => (\n              <GoabRadioItem\n                key={option.value}\n                value={option.value}\n                label={option.label}\n                maxWidth={option.maxWidth}\n              />\n            ))}\n          </GoabRadioGroup>\n        </GoabFormItem>\n\n        {selectedOption && (\n          <div className=\"selection-preview\">\n            <h3>Selected Option:</h3>\n            <p className=\"selected-text\">{getSelectedOptionLabel()}</p>\n          </div>\n        )}\n\n        <div className=\"form-actions\">\n          <GoabButton \n            type=\"primary\" \n            onClick={handleSubmit}\n            disabled={!selectedOption || formSubmitted}>\n            {formSubmitted ? 'Selection saved' : 'Save selection'}\n          </GoabButton>\n          \n          {!formSubmitted && (\n            <GoabButton \n              type=\"secondary\" \n              onClick={handleReset}\n              disabled={!selectedOption}>\n              Reset\n            </GoabButton>\n          )}\n        </div>\n      </div>\n\n      <div className=\"layout-demonstration\">\n        <h2>Layout Demonstration</h2>\n        <p>This example shows how different maxWidth values affect radio item layout:</p>\n        \n        <GoabFormItem label=\"Width control examples\" helperText=\"Compare how different maxWidth settings affect text wrapping\">\n          <GoabRadioGroup name=\"demo\" value=\"\" onChange={() => {}}>\n            {getLayoutDemoOptions().map(option => renderRadioWithDescription(option))}\n          </GoabRadioGroup>\n        </GoabFormItem>\n      </div>\n\n      <div className=\"best-practices\">\n        <h2>Best Practices</h2>\n        <ul className=\"practices-list\">\n          <li>\n            <strong>Consistent layout:</strong> Use maxWidth to maintain visual alignment when option text lengths vary significantly\n          </li>\n          <li>\n            <strong>Responsive design:</strong> Consider how maxWidth affects mobile layouts and ensure text remains readable\n          </li>\n          <li>\n            <strong>Content hierarchy:</strong> Longer labels should still convey essential information clearly\n          </li>\n          <li>\n            <strong>Accessibility:</strong> Ensure text wrapping doesn't impact screen reader comprehension\n          </li>\n          <li>\n            <strong>Testing:</strong> Test with various text lengths to ensure consistent user experience\n          </li>\n        </ul>\n      </div>\n\n      {formSubmitted && (\n        <div className=\"success-message\" role=\"alert\">\n          <h3>Selection Confirmed</h3>\n          <p>Your option has been saved successfully. The selected text was properly constrained for optimal layout.</p>\n        </div>\n      )}\n    </div>\n  );\n}",
      "key": "const [selectedOption, setSelectedOption] = useState<string>('');\nconst [validationError, setValidationError] = useState<string>('');\n\nconst optionsList = [\n  {\n    value: '1',\n    label: 'Option one which has a very long label with lots of text that would normally extend across the entire width of the container',\n    maxWidth: '300px',\n    description: 'This option demonstrates how to control text wrapping for long labels'\n  },\n  {\n    value: '2',\n    label: 'Option two',\n    description: 'A standard length option for comparison'\n  },\n  {\n    value: '3',\n    label: 'Option three with moderate length text',\n    description: 'This option has medium-length text'\n  }\n];\n\nconst handleRadioChange = (event: GoabRadioGroupOnChangeDetail) => {\n  setSelectedOption(event.value);\n  \n  if (validationError) {\n    setValidationError('');\n  }\n  \n  console.log('Radio option selected:', event.value);\n};\n\nconst validateSelection = (): boolean => {\n  if (!selectedOption) {\n    setValidationError('Please select an option to continue');\n    return false;\n  }\n  \n  setValidationError('');\n  return true;\n};\n\nconst handleSubmit = () => {\n  if (!validateSelection()) {\n    return;\n  }\n  \n  const selectedOptionData = optionsList.find(opt => opt.value === selectedOption);\n  \n  console.log('Form submitted with selection:', {\n    value: selectedOption,\n    label: selectedOptionData?.label,\n    timestamp: new Date().toISOString()\n  });\n};\n\nconst getSelectedOptionLabel = (): string => {\n  const option = optionsList.find(opt => opt.value === selectedOption);\n  return option ? option.label : 'No option selected';\n};\n\n<div className=\"max-width-radio-container\">\n  <GoabFormItem \n    label=\"Select one option\" \n    error={validationError}\n    helperText=\"Notice how the long options wrap at different widths for better layout control\"\n    required>\n    <GoabRadioGroup \n      name=\"selectOne\" \n      value={selectedOption} \n      onChange={handleRadioChange}\n      error={!!validationError}>\n      {optionsList.map(option => (\n        <GoabRadioItem\n          key={option.value}\n          value={option.value}\n          label={option.label}\n          maxWidth={option.maxWidth}\n        />\n      ))}\n    </GoabRadioGroup>\n  </GoabFormItem>\n\n  {selectedOption && (\n    <div className=\"selection-preview\">\n      <h3>Selected Option:</h3>\n      <p className=\"selected-text\">{getSelectedOptionLabel()}</p>\n    </div>\n  )}\n\n  <div className=\"form-actions\">\n    <GoabButton \n      type=\"primary\" \n      onClick={handleSubmit}\n      disabled={!selectedOption}>\n      Save selection\n    </GoabButton>\n    \n    <GoabButton \n      type=\"secondary\" \n      onClick={() => setSelectedOption('')}\n      disabled={!selectedOption}>\n      Reset\n    </GoabButton>\n  </div>\n</div>\n\n/* CSS */\n.max-width-radio-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.radio-item-container {\n  margin-bottom: var(--goa-space-m);\n}\n\n.option-description {\n  margin: var(--goa-space-xs) 0 0 var(--goa-space-xl);\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-s);\n  font-style: italic;\n}\n\n.selection-preview {\n  margin: var(--goa-space-l) 0;\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n  border-left: 4px solid var(--goa-color-interactive);\n}\n\n.selection-preview h3 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-text);\n}\n\n.selected-text {\n  margin: 0;\n  color: var(--goa-color-text);\n  font-weight: 600;\n}\n\n.form-actions {\n  display: flex;\n  gap: var(--goa-space-m);\n  margin-top: var(--goa-space-l);\n}\n\n.layout-demonstration {\n  margin-top: var(--goa-space-2xl);\n  padding-top: var(--goa-space-l);\n  border-top: 1px solid var(--goa-color-border);\n}\n\n.layout-demonstration h2 {\n  margin-bottom: var(--goa-space-m);\n  color: var(--goa-color-text);\n}\n\n.best-practices {\n  margin-top: var(--goa-space-2xl);\n  padding-top: var(--goa-space-l);\n  border-top: 1px solid var(--goa-color-border);\n}\n\n.best-practices h2 {\n  margin-bottom: var(--goa-space-m);\n  color: var(--goa-color-text);\n}\n\n.practices-list {\n  margin-left: var(--goa-space-m);\n}\n\n.practices-list li {\n  margin-bottom: var(--goa-space-s);\n  line-height: 1.5;\n}\n\n.practices-list strong {\n  color: var(--goa-color-text);\n}\n\n.success-message {\n  margin-top: var(--goa-space-xl);\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-success-light);\n  border-left: 4px solid var(--goa-color-success);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.success-message h3 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-success-dark);\n}\n\n.success-message p {\n  margin: 0;\n  color: var(--goa-color-success-dark);\n}"
    },
    "angular": {
      "complete": "export class SetAMaxWidthOnALongRadioItemComponent {\n  selectedOption: string = '';\n  validationError: string = '';\n  formSubmitted: boolean = false;\n\n  optionsList = [\n    {\n      value: '1',\n      label: 'Option one which has a very long label with lots of text that would normally extend across the entire width of the container',\n      maxWidth: '300px',\n      description: 'This option demonstrates how to control text wrapping for long labels'\n    },\n    {\n      value: '2',\n      label: 'Option two',\n      description: 'A standard length option for comparison'\n    },\n    {\n      value: '3',\n      label: 'Option three with moderate length text',\n      description: 'This option has medium-length text'\n    }\n  ];\n\n  handleRadioChange(event: any) {\n    this.selectedOption = event.value;\n    \n    if (this.validationError) {\n      this.validationError = '';\n    }\n    \n    console.log('Radio option selected:', event.value);\n  }\n\n  validateSelection(): boolean {\n    if (!this.selectedOption) {\n      this.validationError = 'Please select an option to continue';\n      return false;\n    }\n    \n    this.validationError = '';\n    return true;\n  }\n\n  handleSubmit() {\n    if (!this.validateSelection()) {\n      return;\n    }\n    \n    this.formSubmitted = true;\n    \n    const selectedOptionData = this.optionsList.find(opt => opt.value === this.selectedOption);\n    \n    console.log('Form submitted with selection:', {\n      value: this.selectedOption,\n      label: selectedOptionData?.label,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  handleReset() {\n    this.selectedOption = '';\n    this.formSubmitted = false;\n    this.validationError = '';\n  }\n\n  getSelectedOptionLabel(): string {\n    const option = this.optionsList.find(opt => opt.value === this.selectedOption);\n    return option ? option.label : 'No option selected';\n  }\n\n  getSubmitButtonText(): string {\n    return this.formSubmitted ? 'Selection saved' : 'Save selection';\n  }\n\n  isSubmitDisabled(): boolean {\n    return !this.selectedOption || this.formSubmitted;\n  }\n\n  isResetDisabled(): boolean {\n    return !this.selectedOption || this.formSubmitted;\n  }\n}",
      "key": "selectedOption: string = '';\nvalidationError: string = '';\nformSubmitted: boolean = false;\n\noptionsList = [\n  {\n    value: '1',\n    label: 'Option one which has a very long label with lots of text that would normally extend across the entire width of the container',\n    maxWidth: '300px',\n    description: 'This option demonstrates how to control text wrapping for long labels'\n  },\n  {\n    value: '2',\n    label: 'Option two',\n    description: 'A standard length option for comparison'\n  },\n  {\n    value: '3',\n    label: 'Option three with moderate length text',\n    description: 'This option has medium-length text'\n  }\n];\n\nhandleRadioChange(event: any) {\n  this.selectedOption = event.value;\n  \n  if (this.validationError) {\n    this.validationError = '';\n  }\n  \n  console.log('Radio option selected:', event.value);\n}\n\nvalidateSelection(): boolean {\n  if (!this.selectedOption) {\n    this.validationError = 'Please select an option to continue';\n    return false;\n  }\n  \n  this.validationError = '';\n  return true;\n}\n\nhandleSubmit() {\n  if (!this.validateSelection()) {\n    return;\n  }\n  \n  this.formSubmitted = true;\n  \n  const selectedOptionData = this.optionsList.find(opt => opt.value === this.selectedOption);\n  \n  console.log('Form submitted with selection:', {\n    value: this.selectedOption,\n    label: selectedOptionData?.label,\n    timestamp: new Date().toISOString()\n  });\n}\n\nhandleReset() {\n  this.selectedOption = '';\n  this.formSubmitted = false;\n  this.validationError = '';\n}\n\ngetSelectedOptionLabel(): string {\n  const option = this.optionsList.find(opt => opt.value === this.selectedOption);\n  return option ? option.label : 'No option selected';\n}\n\ngetSubmitButtonText(): string {\n  return this.formSubmitted ? 'Selection saved' : 'Save selection';\n}\n\n<!-- Template -->\n<div class=\"max-width-radio-container\">\n  <goab-form-item \n    label=\"Select one option\" \n    [error]=\"validationError\"\n    helperText=\"Notice how the long options wrap at different widths for better layout control\"\n    required>\n    <goab-radio-group \n      name=\"selectOne\" \n      [value]=\"selectedOption\" \n      (onChange)=\"handleRadioChange($event)\"\n      [error]=\"!!validationError\">\n      <goab-radio-item\n        *ngFor=\"let option of optionsList\"\n        [value]=\"option.value\"\n        [label]=\"option.label\"\n        [maxWidth]=\"option.maxWidth\">\n      </goab-radio-item>\n    </goab-radio-group>\n  </goab-form-item>\n\n  <div class=\"selection-preview\" *ngIf=\"selectedOption\">\n    <h3>Selected Option:</h3>\n    <p class=\"selected-text\">{{ getSelectedOptionLabel() }}</p>\n  </div>\n\n  <div class=\"form-actions\">\n    <goab-button \n      type=\"primary\" \n      (onClick)=\"handleSubmit()\"\n      [disabled]=\"isSubmitDisabled()\">\n      {{ getSubmitButtonText() }}\n    </goab-button>\n    \n    <goab-button \n      type=\"secondary\" \n      (onClick)=\"handleReset()\"\n      [disabled]=\"isResetDisabled()\"\n      *ngIf=\"!formSubmitted\">\n      Reset\n    </goab-button>\n  </div>\n\n  <div class=\"success-message\" role=\"alert\" *ngIf=\"formSubmitted\">\n    <h3>Selection Confirmed</h3>\n    <p>Your option has been saved successfully. The selected text was properly constrained for optimal layout.</p>\n  </div>\n</div>"
    }
  },
  "tags": [
    "radio-item",
    "max-width",
    "form-control",
    "layout-control",
    "text-wrapping",
    "radio-group",
    "responsive-design",
    "form-layout",
    "option-display",
    "width-constraint"
  ]
}