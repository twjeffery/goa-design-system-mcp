{
  "$schema": "../recipe-schema.json",
  "schemaVersion": "2.1.0-ai-context",
  "recipeId": "select-one-or-more-from-a-list-of-options",
  "recipeName": "Select One or More from a List of Options",
  "category": "form-control",
  "summary": "Allow users to select multiple options from a predefined list using checkboxes for scenarios requiring multiple selections",
  "serviceContext": {
    "useCase": "Enable users to choose multiple related options from a list, providing flexibility for scenarios where more than one selection is appropriate or required",
    "userType": "both",
    "governmentServiceFlows": [
      "When citizens need to select preferred communication methods or contact preferences",
      "When workers need to assign multiple categories, tags, or classifications to cases",
      "When users need to select multiple services, benefits, or program options",
      "When gathering information about multiple applicable conditions, situations, or preferences"
    ],
    "relatedPatterns": [
      "include-descriptions-for-items-in-a-checkbox-list",
      "ask-a-user-one-question-at-a-time",
      "group-related-questions-together-on-a-question-page",
      "reveal-more-information-to-help-answer-a-question"
    ]
  },
  "components": [
    {
      "componentName": "GoabCheckbox",
      "role": "Multi-selection input",
      "purpose": "Allow individual option selection with independent checked states for multiple choices"
    },
    {
      "componentName": "GoabFormItem",
      "role": "Form field container",
      "purpose": "Group checkboxes with proper labeling, helper text, and form structure"
    }
  ],
  "codeReference": {
    "exampleFile": "select-one-or-more-from-a-list-of-options.tsx",
    "linesOfCode": 88,
    "lastModified": "2024-01-01T00:00:00.000Z"
  },
  "implementation": {
    "complexity": "medium",
    "keyPatterns": [
      "Multiple checkbox controls for independent option selection",
      "Form item container with instructional helper text",
      "State management for tracking multiple selected values",
      "Validation handling for minimum/maximum selection requirements",
      "Clear labeling indicating multiple selections are allowed"
    ],
    "designPatterns": [
      "Multi-selection interface",
      "Checkbox group organization",
      "Independent option selection",
      "Form validation for multiple choices",
      "User guidance for selection behavior"
    ],
    "accessibility": [
      "Each checkbox is independently accessible with proper labeling",
      "Helper text clarifies that multiple selections are allowed",
      "Logical tab order through checkbox options",
      "Clear indication of selected vs unselected states",
      "Group labeling provides context for checkbox collection"
    ]
  },
  "codeExamples": {
    "react": {
      "complete": "import { GoabCheckbox, GoabFormItem, GoabButton, GoabCallout } from \"@abgov/react-components\";\nimport { useState } from \"react\";\n\nexport default function SelectOneOrMoreFromAListOfOptions() {\n  const [selectedOptions, setSelectedOptions] = useState<string[]>([]);\n  const [validationError, setValidationError] = useState<string>('');\n  const [isSubmitted, setIsSubmitted] = useState<boolean>(false);\n  const [showOptionalMessage, setShowOptionalMessage] = useState<boolean>(false);\n\n  const contactOptions = [\n    {\n      value: 'email',\n      label: 'Email',\n      description: 'Receive updates and notifications via email'\n    },\n    {\n      value: 'phone',\n      label: 'Phone',\n      description: 'Get called for important updates or appointments'\n    },\n    {\n      value: 'text',\n      label: 'Text message',\n      description: 'Receive SMS notifications for urgent matters'\n    },\n    {\n      value: 'mail',\n      label: 'Mail',\n      description: 'Receive physical letters and documents by mail'\n    },\n    {\n      value: 'none',\n      label: 'Do not contact me',\n      description: 'Opt out of all communications (may affect service delivery)'\n    }\n  ];\n\n  const handleCheckboxChange = (optionValue: string, isChecked: boolean) => {\n    let updatedOptions: string[];\n    \n    if (isChecked) {\n      // Handle special case: if \"Do not contact me\" is selected, deselect all others\n      if (optionValue === 'none') {\n        updatedOptions = ['none'];\n      } else {\n        // If selecting other options, remove \"Do not contact me\"\n        updatedOptions = [...selectedOptions.filter(opt => opt !== 'none'), optionValue];\n      }\n    } else {\n      // Remove the unchecked option\n      updatedOptions = selectedOptions.filter(opt => opt !== optionValue);\n    }\n    \n    setSelectedOptions(updatedOptions);\n    \n    // Clear validation error when user makes changes\n    if (validationError) {\n      setValidationError('');\n    }\n    \n    // Show optional message if no options selected\n    setShowOptionalMessage(updatedOptions.length === 0);\n    \n    console.log('Selected contact methods:', updatedOptions);\n  };\n\n  const isOptionSelected = (optionValue: string): boolean => {\n    return selectedOptions.includes(optionValue);\n  };\n\n  const validateSelection = (): boolean => {\n    // For this example, we'll make it optional but show a warning\n    if (selectedOptions.length === 0) {\n      setValidationError('Please select at least one contact method, or choose \"Do not contact me\" if you prefer no communication.');\n      return false;\n    }\n    \n    // Check for conflicting selections (this shouldn't happen with our logic, but good to validate)\n    if (selectedOptions.includes('none') && selectedOptions.length > 1) {\n      setValidationError('\"Do not contact me\" cannot be selected with other options.');\n      return false;\n    }\n    \n    setValidationError('');\n    return true;\n  };\n\n  const handleSubmit = () => {\n    if (!validateSelection()) {\n      return;\n    }\n    \n    setIsSubmitted(true);\n    \n    // Process the selections\n    const submissionData = {\n      contactMethods: selectedOptions,\n      timestamp: new Date().toISOString(),\n      totalSelected: selectedOptions.length\n    };\n    \n    console.log('Form submitted with selections:', submissionData);\n    \n    // Track analytics\n    trackSelectionAnalytics(selectedOptions);\n  };\n\n  const trackSelectionAnalytics = (selections: string[]) => {\n    console.log('Selection analytics:', {\n      selectedOptions: selections,\n      selectionCount: selections.length,\n      hasOptOut: selections.includes('none'),\n      mostCommon: 'email' // This would be calculated from usage data\n    });\n  };\n\n  const handleReset = () => {\n    setSelectedOptions([]);\n    setValidationError('');\n    setIsSubmitted(false);\n    setShowOptionalMessage(false);\n  };\n\n  const getSelectionSummary = (): string => {\n    if (selectedOptions.length === 0) {\n      return 'No contact methods selected';\n    }\n    \n    if (selectedOptions.includes('none')) {\n      return 'No contact preferred';\n    }\n    \n    const methodLabels = selectedOptions.map(value => \n      contactOptions.find(opt => opt.value === value)?.label\n    ).filter(Boolean);\n    \n    if (methodLabels.length === 1) {\n      return `Contact via: ${methodLabels[0]}`;\n    }\n    \n    if (methodLabels.length === 2) {\n      return `Contact via: ${methodLabels.join(' and ')}`;\n    }\n    \n    return `Contact via: ${methodLabels.slice(0, -1).join(', ')}, and ${methodLabels[methodLabels.length - 1]}`;\n  };\n\n  const hasNoContactSelected = (): boolean => {\n    return selectedOptions.includes('none');\n  };\n\n  const getSelectedCount = (): number => {\n    return selectedOptions.filter(opt => opt !== 'none').length;\n  };\n\n  return (\n    <div className=\"multi-select-container\">\n      <GoabFormItem \n        label=\"How would you like to be contacted?\" \n        helpText=\"Choose all that apply. Select multiple options if you want to be reached through different methods.\"\n        error={validationError}\n        required={false}>\n        \n        <div className=\"checkbox-list\">\n          {contactOptions.map((option) => (\n            <div key={option.value} className=\"checkbox-item\">\n              <GoabCheckbox\n                checked={isOptionSelected(option.value)}\n                name={`contact_${option.value}`}\n                text={option.label}\n                onChange={(checked) => handleCheckboxChange(option.value, checked)}\n                disabled={isSubmitted}\n                ariaDescribedby={`desc_${option.value}`}\n              />\n              <p id={`desc_${option.value}`} className=\"option-description\">\n                {option.description}\n              </p>\n            </div>\n          ))}\n        </div>\n      </GoabFormItem>\n\n      {showOptionalMessage && (\n        <GoabCallout type=\"information\" heading=\"Contact preferences\">\n          <p>If you don't select any contact methods, we may not be able to provide updates about your application or service.</p>\n        </GoabCallout>\n      )}\n\n      {hasNoContactSelected() && (\n        <GoabCallout type=\"warning\" heading=\"Limited communication\">\n          <p>You've chosen not to be contacted. This may affect our ability to provide updates about your service or application. You can change this preference at any time.</p>\n        </GoabCallout>\n      )}\n\n      <div className=\"selection-summary\">\n        <h3>Your selection:</h3>\n        <p className=\"summary-text\">{getSelectionSummary()}</p>\n        {getSelectedCount() > 0 && (\n          <p className=\"selection-count\">\n            {getSelectedCount()} contact method{getSelectedCount() !== 1 ? 's' : ''} selected\n          </p>\n        )}\n      </div>\n\n      <div className=\"form-actions\">\n        <GoabButton \n          type=\"primary\" \n          onClick={handleSubmit}\n          disabled={isSubmitted}>\n          {isSubmitted ? 'Preferences saved' : 'Save preferences'}\n        </GoabButton>\n        \n        {!isSubmitted && (\n          <GoabButton \n            type=\"secondary\" \n            onClick={handleReset}\n            disabled={selectedOptions.length === 0}>\n            Clear all\n          </GoabButton>\n        )}\n      </div>\n\n      {isSubmitted && (\n        <div className=\"success-message\" role=\"alert\">\n          <h3>Contact preferences saved</h3>\n          <p>Your contact preferences have been updated. You can change these settings at any time in your account.</p>\n        </div>\n      )}\n    </div>\n  );\n}",
      "key": "const [selectedOptions, setSelectedOptions] = useState<string[]>([]);\nconst [validationError, setValidationError] = useState<string>('');\nconst [isSubmitted, setIsSubmitted] = useState<boolean>(false);\n\nconst contactOptions = [\n  {\n    value: 'email',\n    label: 'Email',\n    description: 'Receive updates and notifications via email'\n  },\n  {\n    value: 'phone',\n    label: 'Phone',\n    description: 'Get called for important updates or appointments'\n  },\n  {\n    value: 'text',\n    label: 'Text message',\n    description: 'Receive SMS notifications for urgent matters'\n  }\n];\n\nconst handleCheckboxChange = (optionValue: string, isChecked: boolean) => {\n  let updatedOptions: string[];\n  \n  if (isChecked) {\n    updatedOptions = [...selectedOptions, optionValue];\n  } else {\n    updatedOptions = selectedOptions.filter(opt => opt !== optionValue);\n  }\n  \n  setSelectedOptions(updatedOptions);\n  \n  if (validationError) {\n    setValidationError('');\n  }\n  \n  console.log('Selected contact methods:', updatedOptions);\n};\n\nconst isOptionSelected = (optionValue: string): boolean => {\n  return selectedOptions.includes(optionValue);\n};\n\nconst validateSelection = (): boolean => {\n  if (selectedOptions.length === 0) {\n    setValidationError('Please select at least one contact method.');\n    return false;\n  }\n  \n  setValidationError('');\n  return true;\n};\n\nconst handleSubmit = () => {\n  if (!validateSelection()) {\n    return;\n  }\n  \n  setIsSubmitted(true);\n  \n  const submissionData = {\n    contactMethods: selectedOptions,\n    timestamp: new Date().toISOString(),\n    totalSelected: selectedOptions.length\n  };\n  \n  console.log('Form submitted with selections:', submissionData);\n};\n\nconst handleReset = () => {\n  setSelectedOptions([]);\n  setValidationError('');\n  setIsSubmitted(false);\n};\n\nconst getSelectionSummary = (): string => {\n  if (selectedOptions.length === 0) {\n    return 'No contact methods selected';\n  }\n  \n  const methodLabels = selectedOptions.map(value => \n    contactOptions.find(opt => opt.value === value)?.label\n  ).filter(Boolean);\n  \n  if (methodLabels.length === 1) {\n    return `Contact via: ${methodLabels[0]}`;\n  }\n  \n  return `Contact via: ${methodLabels.join(', ')}`;\n};\n\n<div className=\"multi-select-container\">\n  <GoabFormItem \n    label=\"How would you like to be contacted?\" \n    helpText=\"Choose all that apply. Select multiple options if you want to be reached through different methods.\"\n    error={validationError}\n    required={false}>\n    \n    <div className=\"checkbox-list\">\n      {contactOptions.map((option) => (\n        <div key={option.value} className=\"checkbox-item\">\n          <GoabCheckbox\n            checked={isOptionSelected(option.value)}\n            name={`contact_${option.value}`}\n            text={option.label}\n            onChange={(checked) => handleCheckboxChange(option.value, checked)}\n            disabled={isSubmitted}\n            ariaDescribedby={`desc_${option.value}`}\n          />\n          <p id={`desc_${option.value}`} className=\"option-description\">\n            {option.description}\n          </p>\n        </div>\n      ))}\n    </div>\n  </GoabFormItem>\n\n  <div className=\"selection-summary\">\n    <h3>Your selection:</h3>\n    <p className=\"summary-text\">{getSelectionSummary()}</p>\n    <p className=\"selection-count\">\n      {selectedOptions.length} contact method{selectedOptions.length !== 1 ? 's' : ''} selected\n    </p>\n  </div>\n\n  <div className=\"form-actions\">\n    <GoabButton \n      type=\"primary\" \n      onClick={handleSubmit}\n      disabled={isSubmitted}>\n      {isSubmitted ? 'Preferences saved' : 'Save preferences'}\n    </GoabButton>\n    \n    <GoabButton \n      type=\"secondary\" \n      onClick={handleReset}\n      disabled={selectedOptions.length === 0 || isSubmitted}>\n      Clear all\n    </GoabButton>\n  </div>\n</div>\n\n/* CSS */\n.multi-select-container {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: var(--goa-space-l);\n}\n\n.checkbox-list {\n  display: flex;\n  flex-direction: column;\n  gap: var(--goa-space-m);\n}\n\n.checkbox-item {\n  border: 1px solid var(--goa-color-border);\n  border-radius: var(--goa-border-radius-s);\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-background);\n}\n\n.checkbox-item:hover {\n  background-color: var(--goa-color-background-light);\n}\n\n.option-description {\n  margin: var(--goa-space-xs) 0 0 var(--goa-space-xl);\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-s);\n  line-height: 1.4;\n}\n\n.selection-summary {\n  margin: var(--goa-space-xl) 0;\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-background-light);\n  border-radius: var(--goa-border-radius-s);\n  border-left: 4px solid var(--goa-color-interactive);\n}\n\n.selection-summary h3 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-text);\n}\n\n.summary-text {\n  margin: 0;\n  color: var(--goa-color-text);\n  font-weight: 600;\n}\n\n.selection-count {\n  margin: var(--goa-space-xs) 0 0 0;\n  color: var(--goa-color-text-secondary);\n  font-size: var(--goa-font-size-s);\n}\n\n.form-actions {\n  display: flex;\n  gap: var(--goa-space-m);\n  margin-top: var(--goa-space-xl);\n}\n\n.success-message {\n  margin-top: var(--goa-space-xl);\n  padding: var(--goa-space-m);\n  background-color: var(--goa-color-success-light);\n  border-left: 4px solid var(--goa-color-success);\n  border-radius: var(--goa-border-radius-s);\n}\n\n.success-message h3 {\n  margin: 0 0 var(--goa-space-s) 0;\n  color: var(--goa-color-success-dark);\n}\n\n.success-message p {\n  margin: 0;\n  color: var(--goa-color-success-dark);\n}"
    },
    "angular": {
      "complete": "export class SelectOneOrMoreFromAListOfOptionsComponent {\n  selectedOptions: string[] = [];\n  validationError: string = '';\n  isSubmitted: boolean = false;\n\n  contactOptions = [\n    {\n      value: 'email',\n      label: 'Email',\n      description: 'Receive updates and notifications via email'\n    },\n    {\n      value: 'phone',\n      label: 'Phone',\n      description: 'Get called for important updates or appointments'\n    },\n    {\n      value: 'text',\n      label: 'Text message',\n      description: 'Receive SMS notifications for urgent matters'\n    }\n  ];\n\n  handleCheckboxChange(optionValue: string, isChecked: boolean) {\n    let updatedOptions: string[];\n    \n    if (isChecked) {\n      updatedOptions = [...this.selectedOptions, optionValue];\n    } else {\n      updatedOptions = this.selectedOptions.filter(opt => opt !== optionValue);\n    }\n    \n    this.selectedOptions = updatedOptions;\n    \n    if (this.validationError) {\n      this.validationError = '';\n    }\n    \n    console.log('Selected contact methods:', updatedOptions);\n  }\n\n  isOptionSelected(optionValue: string): boolean {\n    return this.selectedOptions.includes(optionValue);\n  }\n\n  validateSelection(): boolean {\n    if (this.selectedOptions.length === 0) {\n      this.validationError = 'Please select at least one contact method.';\n      return false;\n    }\n    \n    this.validationError = '';\n    return true;\n  }\n\n  handleSubmit() {\n    if (!this.validateSelection()) {\n      return;\n    }\n    \n    this.isSubmitted = true;\n    \n    const submissionData = {\n      contactMethods: this.selectedOptions,\n      timestamp: new Date().toISOString(),\n      totalSelected: this.selectedOptions.length\n    };\n    \n    console.log('Form submitted with selections:', submissionData);\n  }\n\n  handleReset() {\n    this.selectedOptions = [];\n    this.validationError = '';\n    this.isSubmitted = false;\n  }\n\n  getSelectionSummary(): string {\n    if (this.selectedOptions.length === 0) {\n      return 'No contact methods selected';\n    }\n    \n    const methodLabels = this.selectedOptions.map(value => \n      this.contactOptions.find(opt => opt.value === value)?.label\n    ).filter(Boolean);\n    \n    if (methodLabels.length === 1) {\n      return `Contact via: ${methodLabels[0]}`;\n    }\n    \n    return `Contact via: ${methodLabels.join(', ')}`;\n  }\n\n  getSubmitButtonText(): string {\n    return this.isSubmitted ? 'Preferences saved' : 'Save preferences';\n  }\n\n  getSelectionCount(): number {\n    return this.selectedOptions.length;\n  }\n\n  canReset(): boolean {\n    return this.selectedOptions.length > 0 && !this.isSubmitted;\n  }\n}",
      "key": "selectedOptions: string[] = [];\nvalidationError: string = '';\nisSubmitted: boolean = false;\n\ncontactOptions = [\n  {\n    value: 'email',\n    label: 'Email',\n    description: 'Receive updates and notifications via email'\n  },\n  {\n    value: 'phone',\n    label: 'Phone',\n    description: 'Get called for important updates or appointments'\n  },\n  {\n    value: 'text',\n    label: 'Text message',\n    description: 'Receive SMS notifications for urgent matters'\n  }\n];\n\nhandleCheckboxChange(optionValue: string, isChecked: boolean) {\n  let updatedOptions: string[];\n  \n  if (isChecked) {\n    updatedOptions = [...this.selectedOptions, optionValue];\n  } else {\n    updatedOptions = this.selectedOptions.filter(opt => opt !== optionValue);\n  }\n  \n  this.selectedOptions = updatedOptions;\n  \n  if (this.validationError) {\n    this.validationError = '';\n  }\n  \n  console.log('Selected contact methods:', updatedOptions);\n}\n\nisOptionSelected(optionValue: string): boolean {\n  return this.selectedOptions.includes(optionValue);\n}\n\nvalidateSelection(): boolean {\n  if (this.selectedOptions.length === 0) {\n    this.validationError = 'Please select at least one contact method.';\n    return false;\n  }\n  \n  this.validationError = '';\n  return true;\n}\n\nhandleSubmit() {\n  if (!this.validateSelection()) {\n    return;\n  }\n  \n  this.isSubmitted = true;\n  \n  const submissionData = {\n    contactMethods: this.selectedOptions,\n    timestamp: new Date().toISOString(),\n    totalSelected: this.selectedOptions.length\n  };\n  \n  console.log('Form submitted with selections:', submissionData);\n}\n\nhandleReset() {\n  this.selectedOptions = [];\n  this.validationError = '';\n  this.isSubmitted = false;\n}\n\ngetSelectionSummary(): string {\n  if (this.selectedOptions.length === 0) {\n    return 'No contact methods selected';\n  }\n  \n  const methodLabels = this.selectedOptions.map(value => \n    this.contactOptions.find(opt => opt.value === value)?.label\n  ).filter(Boolean);\n  \n  return `Contact via: ${methodLabels.join(', ')}`;\n}\n\ngetSubmitButtonText(): string {\n  return this.isSubmitted ? 'Preferences saved' : 'Save preferences';\n}\n\ngetSelectionCount(): number {\n  return this.selectedOptions.length;\n}\n\n<!-- Template -->\n<div class=\"multi-select-container\">\n  <goab-form-item \n    label=\"How would you like to be contacted?\" \n    helpText=\"Choose all that apply. Select multiple options if you want to be reached through different methods.\"\n    [error]=\"validationError\"\n    [required]=\"false\">\n    \n    <div class=\"checkbox-list\">\n      <div class=\"checkbox-item\" *ngFor=\"let option of contactOptions\">\n        <goab-checkbox\n          [checked]=\"isOptionSelected(option.value)\"\n          [name]=\"'contact_' + option.value\"\n          [text]=\"option.label\"\n          (onChange)=\"handleCheckboxChange(option.value, $event)\"\n          [disabled]=\"isSubmitted\"\n          [attr.aria-describedby]=\"'desc_' + option.value\">\n        </goab-checkbox>\n        <p [id]=\"'desc_' + option.value\" class=\"option-description\">\n          {{ option.description }}\n        </p>\n      </div>\n    </div>\n  </goab-form-item>\n\n  <div class=\"selection-summary\">\n    <h3>Your selection:</h3>\n    <p class=\"summary-text\">{{ getSelectionSummary() }}</p>\n    <p class=\"selection-count\">\n      {{ getSelectionCount() }} contact method{{ getSelectionCount() !== 1 ? 's' : '' }} selected\n    </p>\n  </div>\n\n  <div class=\"form-actions\">\n    <goab-button \n      type=\"primary\" \n      (onClick)=\"handleSubmit()\"\n      [disabled]=\"isSubmitted\">\n      {{ getSubmitButtonText() }}\n    </goab-button>\n    \n    <goab-button \n      type=\"secondary\" \n      (onClick)=\"handleReset()\"\n      [disabled]=\"!canReset()\">\n      Clear all\n    </goab-button>\n  </div>\n\n  <div class=\"success-message\" role=\"alert\" *ngIf=\"isSubmitted\">\n    <h3>Contact preferences saved</h3>\n    <p>Your contact preferences have been updated. You can change these settings at any time in your account.</p>\n  </div>\n</div>"
    }
  },
  "tags": [
    "multi-select",
    "checkbox-group",
    "form-control",
    "multiple-selection",
    "option-selection",
    "user-preferences",
    "contact-methods",
    "form-validation",
    "selection-interface",
    "choice-management"
  ]
}